# Creating Remote Services

In an earlier learning path, you used Service Builder to generate the model,
persistence, and service layers of your application. The services generated by
Service Builder come in two flavors: local and remote. Local services can only
be invoked locally. This means that they can only invoked from the JVM in which
Liferay is running. Remote services can be invoked remotely. This means that
they can be invoked by any web client that can access the services. The remote
services generated by Service Builder are published as JSON web services when
your application is deployed. You can also use Service Builder to generate a
WSDL (Web Services Description Language) document for your remote services to
make them available via SOAP (Simple Object Access Protocol). Please refer to
the [Service Builder tutorial](https://dev.liferay.com/develop/tutorials/-/knowledge_base/6-2/what-is-service-builder)
for more information.

To configure whether Service Builder generates local services, remote services,
or both, you need to add the appropriate entries to your application's
`service.xml` file. Open your guestbook-portlet project's
`docroot/WEB-INF/service.xml` file and examine the tags for the guestbook and
entry entities:

    <entity name="Guestbook" local-service="true" uuid="true">

    <entity name="Entry" local-service="true" uuid="true">

As described in the `service.xml`
[DTD](http://docs.liferay.com/portal/6.2/definitions), `local-service` defaults
to `false` while `remote-service` defaults to `true`. However, it's best to
explicitly specify whether Service Builder should generate local services and
remote services. Other developers who read your `service.xml` file might not
know or remember the defaults. For this reason, add `remote-service="true"` to
the entity tags of the guestbook and entry entities:

    <entity name="Guestbook" local-service="true" remote-service="true" uuid="true">

    <entity name="Entry" local-service="true" remote-service="true" uuid="true">

To examine the Liferay web services that are currently available on your portal,
navigate to [http://\[host name\]:\[port number\]/api/jsonws](http://[host name]:[port number]/api/jsonws) ([http://localhost:8080/api/jsonws](http://localhost:8080/api/jsonws)
if you're running Liferay locally on port 8080). By default, the portal's web
service methods are listed. However, you can view the web services of a portlet
by changing the context path. For example, to view the web services of the
calendar portlet, change to context path from `/` to `/calendar-portlet`. Notice
that you can't you change the context path to `/guestbook-portlet`. Why not?
Because you haven't added any remote service methods to your remote services
classes. After you've added remote service methods to your remote service
classes, run Service Builder, and redeployed your portlet, you'll be able to
select `/guestbook-portlet` on the JSONWS API page and view your web service
methods.

In an earlier learning path, you learned that you can add custom local service
methods to the `*LocalServiceImpl` classes generated by Service Builder.  These
classes are `GuestbookLocalServiceImpl` and `EntryLocalServiceImpl` in the
guestbook-portlet project. Service Builder won't overwrite these classes on
subsequent runs. Similarly, you can add custom remote service methods to the
`*ServiceImpl` classes generated by Service Builder. These are
`GuestbookServiceImpl` and `EntryServiceImpl` in the guestbook-portlet project.
After you add service methods to these classes and run Service Builder, Service
Builder published the service methods as web services and does not overwrite
the classes.
