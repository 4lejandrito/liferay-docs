# Service Builder
Service Builder is a model-driven code generation tool built by Liferay that allows developers to define custom object models called entities. Service Builder generates a service layer through object-relational mapping (ORM) technology that provides a clean separation between your object model and code for the underlying database. This frees you to add the necessary business logic for your application. Service Builder takes an XML file as input and generates the necessary model, persistence, and service layers for your application. These layers provide a clean separation of concerns. Service Builder generates most of the common code needed to implement create, read, update, delete, and find operations on the database, allowing you to focus on the higher level aspects of service design. In this section, you’ll learn some of the main benefits of using Service Builder:

Liferay uses Service Builder to generate all of its internal database persistence code. In fact, all of Liferay’s services, both local and remote, are generated by Service Builder. Additionally, the service modules in Liferay are generated by Service Builder. Service Builder’s use in Liferay Portal demonstrates it to be a robust and reliable tool. Service Builder is easy to use and can save developers lots of development time. Although the number of files Service Builder generates can seem intimidating at first, developers only need to work with a few files in order to make customizations to their applications and add business logic.

## Service Layer
Data-driven applications by their nature need access to a service for storing and retrieving their data. In a well-designed application, the application asks for data, and the service fetches it. The application can then display this data to the user, who reads it or modifies it. If the data is modified, the application passes it back to the service, and the service stores it. The application doesn’t need to know anything about how the service does what it does. It trusts the service to handle storing and retrieving the data, freeing the application to be as robust as it needs to be.

This is what is called loose coupling, and it’s a hallmark of good application design. If your application’s service layer is self-contained, then you can swap it out for a better service layer when something more robust comes along, and you won’t have to modify the application to take advantage of it.

Well, something more robust has come along, and it’s called Service Builder. Using the Object-Relational Mapping engine provided by Hibernate along with a sophisticated code generator, Service Builder can help you implement your service layer in a fraction of the time it would normally take. 

## Persistence
The persistence layer is responsible for saving and retrieving your model data. The service layer is like a buffer zone between your application and your persistence layer: having it gives you the freedom in the future to swap out your persistence layer for a different implementation without modifying anything but the calls in the service layer. This kind of loose coupling is good application design, and Liferay supports that in its frameworks. It does that by providing Service Builder, a framework for generating the model, service, and persistence layers of your application.

## Integrating generated code with the rest of the app

