# Building the Guestbook Mobile SDK [](id=building-the-guestbook-mobile-sdk)

Once you've deployed the Guestbook portlet to your @product@ instance, you're 
ready to build the Guestbook Mobile SDK. You might be asking yourself, "Why do I 
have to build a separate Mobile SDK? Can't I just use the pre-built Mobile SDK 
that Liferay already provides?" Fantastic question! The reason is that Liferay's 
pre-built Mobile SDK includes only the framework necessary to make server calls, 
and the classes required to call the remote services of @product@'s *core* apps. 
Core apps are those included with every @product@ instance (also referred to as 
*out-of-the-box* apps). Since you'll be calling the 
[Guestbook portlet's](/develop/tutorials/-/knowledge_base/6-2/writing-your-first-liferay-application) 
remote services, you must build a separate Mobile SDK for them. This is true of 
any non-core app: you must build a Mobile SDK to call its remote services. Now 
it's time to get building! 

## Building the Mobile SDK [](id=building-the-mobile-sdk)

Liferay provides a Mobile SDK Builder that you can use to build your own Mobile 
SDKs. For the Mobile SDK Builder to generate the classes that can call a 
non-core app's remote services, those services must be available and accompanied 
by a Web Service Deployment Descriptor (WSDD). To learn how the Guestbook 
portlet's remote services and WSDD were generated, see the article 
[Creating Web Services for Your Application](/develop/tutorials/-/knowledge_base/6-2/creating-web-services-for-your-application). 
Since the Guestbook portlet's web services already exist, you don't need to 
generate them. Just remember that you must generate web services when developing 
your own @product@ apps. 

To build the Mobile SDK, you first need to download its's source code. 
You can do so by clicking 
[this link](https://github.com/liferay/liferay-mobile-sdk/archive/android-7.0.4.zip). 
Unzip the file to a location on your machine where you want the Mobile SDK to 
reside. This is purely personal preference; it works the same no matter where it 
is. Once unzipped, the Mobile SDK's source code is in the 
`liferay-mobile-sdk-android-7.0.4` folder. 

Now you're ready to build a Mobile SDK for the Guestbook portlet! You'll do this 
with the Mobile SDK Builder, which is part of the Mobile SDK source code. The 
Builder contains a convenient command line wizard to assist you in building 
Mobile SDKs. To start it, navigate to the `liferay-mobile-sdk-android-7.0.4` 
directory and issue the following command: 

    ./gradlew createModule

The wizard launches and asks you to enter your project's properties. You must 
first provide the `Context` property. This is the context path of the Guestbook 
portlet's remote services. To view your @product@ instance's remote service 
context paths, navigate to 
[http://localhost:8080/api/jsonws](http://localhost:8080/api/jsonws). 
On the page's upper left, there's a menu for selecting the context path. Select 
*gb*, which is the Guestbook portlet's context path. The UI updates to show only 
the remote services available in the selected context path. 

![Figure 1: The Guestbook Portlet's context path (gb) on the server.](../../../images/remote-services-context.png)

The Mobile SDK Builder needs this value so that it knows what remote services to 
generate classes and methods for. Return to the terminal and enter `gb` for the 
`Context` property. 

Next, you're asked for the build's `Package Name` property. This is the package 
path for the classes generated by the Mobile SDK Builder. Accept the default 
value of `com.liferay.mobile.android`. The last property the Mobile SDK Builder 
asks for is the `POM Description`. Technically, this is only needed if you're 
planning to publish your Mobile SDK to Maven. Since the Builder requires it, 
however, enter `Guestbook SDK`. The following screenshot shows these properties 
entered in the Mobile SDK Builder: 

![Figure 2: To build your Mobile SDK, you must enter values for the `Context`, `Package Name`, and `POM Description` properties. The blue values in square brackets are defaults.](../../../images/mobile-sdk-build-wizard.png)

Once you enter the final property, the Mobile SDK Builder runs and generates a 
`BUILD SUCCESSFUL` message. Great! You're probably wondering, however, what just
happened. Obviously the build completed successfully, but it doesn't tell you 
much else. What happened is this: the Mobile SDK Builder generated the source 
classes you'll use in your Android app to interact with the Guestbook portlet. 
You can find these source classes in the Mobile SDK Builder's following folder: 

    modules/gb/android/src/gen/java

Also note that the source classes are in the package path you specified during 
the build, with an additional folder that denotes the @product@ version. 
Therefore, the full path to the generated source classes is: 

    modules/gb/android/src/gen/java/com/liferay/mobile/android/v7

This folder has two subfolders that correspond to each entity in the Guestbook 
portlet: `guestbook` and `entry`. In them, you'll find the respective source 
class for each, `EntryService.java` and `GuestbookService.java`. There's one 
last thing to do before you can use these classes in your Android app: put them 
in a JAR file. 

To do this, navigate to the `modules/gb` folder on the command line and run 
`../../gradlew jar`. This command does two things: 

1.  Generates a JAR file with the Guestbook portlet's service classes. This is 
    in `modules/gb/build/libs`. This JAR file contains the Guestbook Mobile SDK. 

2.  Generates a JAR file that contains a custom-built version of Liferay's 
    pre-built Mobile SDK. This is in 
    `liferay-mobile-sdk-android-7.0.4/android/build/libs`. 

Congratulations! You just built the Guestbook Mobile SDK. Now that's an 
accomplishment worth writing in a guestbook. All you need now is an Android app 
in which to install this Mobile SDK. The next article shows you how to create 
this. 
