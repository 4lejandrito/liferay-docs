# Development Lifecycle for a Liferay Workspace

Liferay Workspaces provide an environment that supports all phases of a Liferay
module's development lifecycle:

- [Creating modules](/develop/tutorials/-/knowledge_base/7-0/development-lifecycle-for-liferay-workspaces#creating-modules)
- [Building modules](/develop/tutorials/-/knowledge_base/7-0/development-lifecycle-for-liferay-workspaces#building-modules)
- [Deploying modules](/develop/tutorials/-/knowledge_base/7-0/development-lifecycle-for-liferay-workspaces#deploying-modules)
- [Testing modules](/develop/tutorials/-/knowledge_base/7-0/development-lifecycle-for-liferay-workspaces#testing-modules)
- [Releasing modules](/develop/tutorials/-/knowledge_base/7-0/development-lifecycle-for-liferay-workspaces#releasing-modules)

Your workspace provides a flexible environment that can be used in many
different build tools and IDEs, such as Liferay @ide@. In this tutorial, you'll
explore the development lifecycle phases Liferay Workspace provides for you. In
addition, you'll be directed to other tutorials that go into further detail for
leveraging the workspace's particular lifecycle phase. Let's get started!

## Creating Modules

The first phase of Liferay Workspace's development phase is the module creation
process. Workspace provides a slew of templates that you can use to create many
different types of Liferay modules.

You can configure where your workspace creates modules by editing the
`liferay.workspace.modules.dir` property in the workspace's `gradle.properties`
file. By default, modules are created in the `[ROOT]/modules` folder.

You can also control where themes are generated by specifying the
`liferay.workspace.themes.dir` property in the `gradle.properties` file. Themes
are typically migrated to the `themes` folder after being created using the
[Themes Generator](/develop/tutorials/-/knowledge_base/7-0/themes-generator).

To learn more about creating modules in a workspace using Blade CLI or Liferay
@ide@, visit the
[Creating Modules with Blade CLI](/develop/tutorials/-/knowledge_base/7-0/creating-modules-with-blade-cli)
and
[Creating Modules with Liferay @ide@](/develop/tutorials/-/knowledge_base/7-0/creating-modules-with-liferay-ide)
tutorials, respectively.

## Building Modules

Liferay Workspace abstracts many build requirements so you can focus on
developing modules instead of worrying about how to build them. Liferay
Workspace is built using Gradle, so your modules leverage the Gradle build
lifecycle.

Workspace includes a Gradle wrapper in its ROOT folder (e.g., `gradlew`), which
you can leverage to execute Gradle commands. This means that you can run
familiar Gradle build commands (e.g., `build`, `clean`, `compile`, etc.) from a
Liferay Workspace without having Gradle installed on your machine.

+$$$

**Note:** You can use the workspace's Gradle wrapper by executing `blade gw`
followed by the Gradle command. This is an easier way to run the workspace's
Gradle wrapper without specifying its path. Since the workspace's Gradle wrapper
resides in its root folder, it can sometimes be a hassle running it for a deeply
nested module (e.g., `../../../../gradlew compileJava`). Running the Gradle
wrapper from Blade CLI automatically detects the Gradle wrapper and can run it
anywhere.

$$$

When using Liferay Workspace, the workspace plugin is automatically applied
which adds a multitude of subprojects for you, hiding some complexities of
Gradle. For example, a typical project's `settings.gradle` file could contain
many included subprojects like this:

    ...
    include images:base:oracle-jdk:oracle-jdk-6
    include images:base:oracle-jdk:oracle-jdk-7
    include images:base:oracle-jdk:oracle-jdk-8
    include images:base:liferay-portal:liferay-portal-ce-tomcat-7.0-ga1
    include images:source-bundles:glassfish
    include images:source-bundles:jboss-eap
    include images:source-bundles:tomcat
    include images:source-bundles:websphere
    include images:source-bundles:wildfly
    include compose:jboss-eap-mysql
    include compose:tomcat-mariadb
    include compose:tomcat-mysql
    include compose:tomcat-mysql-elastic
    include compose:tomcat-postgres
    include file-server
    ...

Likewise, if a folder in the `/themes` folder includes a `liferay-theme.json`
file, the `gulp` plugin is applied to it. If a folder in the `/modules` folder
includes a `bnd.bnd` file, the
[liferay-gradle](/develop/tutorials/-/knowledge_base/7-0/liferay-sample-modules)
plugin is applied to it. Therefore, Liferay Workspace provides many plugins and
build configurations behind the scenes.

Most of the Gradle build lifecycle in workspace is abstracted away from you to
provide a simple development experience. For instance, you can build/deploy your
modules from workspace without ever running a Gradle command. You'll learn how
to do this next.

## Deploying Modules

Liferay Workspace provides easy-to-use deployment mechanisms that let you deploy
your module to a Liferay server without any custom configuration. To learn more
about deploying modules from a workspace using Blade CLI or Liferay @ide@, visit
the
[Deploying Modules with Blade CLI](/develop/tutorials/-/knowledge_base/7-0/deploying-modules-with-blade-cli)
and
[Deploying Modules with Liferay @ide@](/develop/tutorials/-/knowledge_base/7-0/deploying-modules-with-liferay-ide)
tutorials, respectively.

## Testing Modules

Liferay provides many different configuration settings for @product-ver@. These
settings let you use @product@ in many different ways. Configuring several
different @product@ installations to simulate certain behaviors can become
cumbersome and time consuming.

Liferay Workspace provides you with the `configs` folder, which lets you run
several different environments in the same workspace and @product@ installation.
For example, you could have separate @product@ environments for development,
testing, and production in a single Liferay Workspace. So how does it work?

The `configs` folder offers five subfolders:

- `common`: holds a common configuration that you want applied to all
  environments.
- `dev`: holds the development configuration.
- `local`: holds the configuration intended for testing locally.
- `prod`: holds the configuration for a production site.
- `uat`: holds the configuration for a UAT site.

The files in each folder overlay your @product@ installation found in the
`bundles` folder. When @product@ is started in the workspace's `bundles` folder,
the following occurs:

1.  Configuration files found in the `configs/common` folder are applied to the
    `bundles` @product@ installation.

2.  One of the four configured workspace environments (`dev`, `local`, `prod`,
    or `uat`) are applied on top of any existing configurations from the
    `common` folder.

You can configure your workspace environment by opening your workspace's
`gradle.properties` file in the root folder and updating the
`liferay.workspace.environment` property to specify the environment to apply to
your @product@ installation. It's set to `local` by default.

Each environment folder can supply its own database, `portal-ext.properties`,
Elasticsearch, etc.

To get a feel for what you could simulate with the `configs` folder, let's
explore a typical scenario. Suppose you want a local @product@ instance for
testing and a UAT site for simulating a production site. Assume you want the
following configuration for the two environments:

**Local Environment**

- Use MySQL database
- Skip setup wizard

**UAT Environment**

- Use JBoss database
- Skip setup wizard

To configure these two environments in your workspace, follow the steps below:

1.  Open the `configs/common` folder and add the
    `portal-setup-wizard.properties` file with the `setup.wizard.enabled=false`
    property.
2.  Open the `configs/local` folder and configure the MySQL database settings in
    a `portal-ext.properties` file.
3.  Open the `configs/uat` folder and configure the JBoss database settings in
    a `portal-ext.properties` file.

Now your two environments are set. To switch between the two environments,
change the `gradle.properties` file's `liferay.workspace.environment` property
to either `local` or `uat`.

You can also generate a distributable Zip/Tar of an environment. Execute the
Gradle `distBundle[Zip|Tar]` command and specify the environment as a parameter:

    ./gradlew distBundle[Zip|Tar] -Pliferay.workspace.environment=<ENVIRONMENT>

Awesome! You can now test your workspace's @product@ installation in a variety
of different environments!

## Releasing Modules

Liferay Workspace does not provide a built in release mechanism, but there are
easy ways to use external release tools with workspace. The most popular choice
is uploading your modules into a Maven Nexus repository. You could also use
other release tools like [Artifactory](https://www.jfrog.com/artifactory/).

You may ask "Why would I want to upload my modules built with Gradle into a
Maven repository?" Gradle artifacts are not easily distributed between multiple
user environments. This is because Gradle artifacts stored in your local `.m2`
directory contain user specific data that can't be transferred to other
developers. Maven, however, stores no user-specific metadata in its artifacts,
meaning it's easily transferrable.

For more instructions on how to set up a Maven Nexus repository for your
workspace's modules, see the
[Creating a Maven Repository](/develop/tutorials/-/knowledge_base/7-0/creating-a-maven-repository)
and
[Deploying Liferay Maven Artifacts to a Repository](/develop/tutorials/-/knowledge_base/7-0/deploying-liferay-maven-artifacts-to-a-repository)
tutorials.
