# Development Lifecycle for a Liferay Workspace

Liferay Workspaces provide an environment that supports all phases of a Liferay
module's development lifecycle:

- [Creating modules](/develop/tutorials/-/knowledge_base/7-0/development-lifecycle-for-liferay-workspaces#creating-modules)
- [Building modules](/develop/tutorials/-/knowledge_base/7-0/development-lifecycle-for-liferay-workspaces#building-modules)
- [Deploying modules](/develop/tutorials/-/knowledge_base/7-0/development-lifecycle-for-liferay-workspaces#deploying-modules)
- [Testing modules](/develop/tutorials/-/knowledge_base/7-0/development-lifecycle-for-liferay-workspaces#testing-modules)
- [Releasing modules](/develop/tutorials/-/knowledge_base/7-0/development-lifecycle-for-liferay-workspaces#releasing-modules)

Your workspace provides a flexible environment that can be used in many
different build tools and IDEs, such as Liferay @ide@. In this tutorial, you'll
explore the development lifecycle phases Liferay Workspace provides for you. In
addition, you'll be directed to other tutorials that go into further detail for
leveraging the workspace's particular lifecycle phase. Let's get started!

## Creating Modules

The first phase of Liferay Workspace's development phase is the module creation
process. Workspace provides a slew of templates that you can use to create many
different types of Liferay modules.

You can configure where your workspace creates modules by editing the
`liferay.workspace.modules.dir` property in the workspace's `gradle.properties`
file. By default, modules are created in the `[ROOT]/modules` folder.

You can also control where themes are generated by specifying the
`liferay.workspace.themes.dir` property in the `gradle.properties` file. Themes
are typically migrated to the `themes` folder after being created using the
[Themes Generator](/develop/tutorials/-/knowledge_base/7-0/themes-generator).

To learn more about creating modules in a workspace using Blade CLI or Liferay
@ide@, visit the
[Creating Modules with Blade CLI](/develop/tutorials/-/knowledge_base/7-0/creating-modules-with-blade-cli)
and
[Creating Modules with Liferay @ide@](/develop/tutorials/-/knowledge_base/7-0/creating-modules-with-liferay-ide)
tutorials, respectively.

## Building Modules

Liferay Workspace abstracts many build requirements so you can focus on
developing modules instead of worrying about how to build them. Liferay
Workspace is built using Gradle, so your modules leverage the Gradle build
lifecycle.

Workspace includes a Gradle wrapper in its ROOT folder (e.g., `gradlew`) which
you can leverage to execute Gradle commands. This means that you can run
familiar Gradle build commands (e.g., `build`, `clean`, `compile`, etc.) from a
Liferay Workspace without having Gradle installed on your machine.

When using Liferay Workspace, the workspace plugin is automatically applied
which adds a multitude of subprojects for you, hiding some complexities of
Gradle. For example, a typical project's `settings.gradle` file could contain
many included subprojects like this:

    ...
    include images:base:oracle-jdk:oracle-jdk-6
    include images:base:oracle-jdk:oracle-jdk-7
    include images:base:oracle-jdk:oracle-jdk-8
    include images:base:liferay-portal:liferay-portal-ce-tomcat-7.0-ga1
    include images:source-bundles:glassfish
    include images:source-bundles:jboss-eap
    include images:source-bundles:tomcat
    include images:source-bundles:websphere
    include images:source-bundles:wildfly
    include compose:jboss-eap-mysql
    include compose:tomcat-mariadb
    include compose:tomcat-mysql
    include compose:tomcat-mysql-elastic
    include compose:tomcat-postgres
    include file-server
    ...

The workspace plugin provides these behind the scenes. Likewise, if a folder in
the `/themes` folder includes a `liferay-theme.json` file, the `gulp` plugin is
applied to it. If a folder in the `/modules` folder includes a `bnd.bnd` file,
the 
[liferay-gradle](/develop/tutorials/-/knowledge_base/7-0/liferay-sample-modules)
plugin is applied to it. Therefore, Liferay Workspace provides many plugins and
build configurations behind the scenes.

Most of the Gradle build lifecycle in workspace is abstracted away from you to
provide a simple development experience. For instance, you can build/deploy your
modules from workspace without ever running a Gradle command. You'll learn how
to do this next.

## Deploying Modules

## Testing Modules

## Releasing Modules
