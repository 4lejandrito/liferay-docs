<text:h text:style-name="Heading_20_1" text:outline-level="1">Installation
and Setup
<text:a xlink:type="simple" xlink:href="id=installation-and-setup" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay Portal is one of
the most flexible applications on the market today with regard to
application server environments. It supports a wide variety of
application servers, freeing you to use the Java application server you
think is best. Liferay also scales very well: you can install Liferay
Portal on everything from a shared hosting account to a multi-node
cluster running a commercial application server and on everything in
between. In fact, Liferay is used successfully in all of these scenarios
every day.</text:p>
<text:p text:style-name="Text_20_body">You'll find that because Liferay
is extremely flexible in its deployment options, it is also easy to
install. If you already have an application server, you can use the
tools for deployment that came with your application server. If you
don't have an application server, Liferay provides several application
server bundles from which to choose. These are pre-configured
application servers with Liferay already installed in them. They're very
easy to install and with a small amount of configuration can be made
into production-ready systems.</text:p>
<text:p text:style-name="Text_20_body">The installation steps vary
slightly according to your Liferay edition, so we'll be sure to let you
know when they are different.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Editions
of Liferay
<text:a xlink:type="simple" xlink:href="id=editions-of-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay ships in two
editions: one for the community and one for enterprise subscribers. The
community edition is the same Liferay Portal that has been available for
years: frequently updated and bursting with the latest features, the
Community Edition of Liferay Portal is offered for free under the Lesser
GNU public license, a free software license with one important
exception. This license gives you the flexibility to link Liferay with
your own code in your portlet, theme, hook, layout, Ext or web plugins,
no matter what license you use for your code. If, however, you modify
Liferay directly, those modifications need to be released as free
software under the terms of the license. The best way, of course, to do
this is to contribute it back to the Liferay community. This is really
the best of both worlds: you have the freedom use any license (or no
license) if you use plugins, but if you modify Liferay directly, the
community receives the benefits of any enhancements that you've
made.</text:p>
<text:p text:style-name="Text_20_body">Liferay for enterprise
subscribers is a supported version of Liferay Portal for the enterprise.
The subscription and support package allows organizations to build their
portals on a stable version of the product that is offered over an
extended period of time. It's the best wayfor you to develop, deploy,
and maintain your Liferay solution. It includes</text:p>
<text:list text:style-name="L1">
  <text:list-item>
    <text:p text:style-name="P1">Liferay support</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P1">Updates</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P1">Fix Packs</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P1">Cloud Services</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P1">Liferay Portal Enterprise
    Edition</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Now let's learn how to get
a copy of Liferay Portal.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Obtaining
Liferay Portal
<text:a xlink:type="simple" xlink:href="id=obtaining-liferay-portal" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The Liferay community can
download Liferay Portal from our web site at
<text:a xlink:type="simple" xlink:href="http://www.liferay.com" office:name=""><text:span text:style-name="Definition">http://www.liferay.com</text:span></text:a>.
Click the <text:span text:style-name="T1">Downloads</text:span> link at
the top of the page, and you'll see multiple options for getting a copy
of Liferay, including our convenient bundles or a
<text:span text:style-name="T2">.war</text:span> package for
installation on your application server of choice.</text:p>
<text:p text:style-name="Text_20_body">Liferay enterprise subscribers
can download Liferay from the Customer Portal. You have a choice of the
same open source app server bundles as community members, plus a few
commercial alternatives, in addition to the
<text:span text:style-name="T3">.war</text:span> package for manual
installation.</text:p>
<text:p text:style-name="Text_20_body">So what is a bundle anyway? A
bundle is an application server with Liferay preinstalled. This is the
most convenient way to install Liferay. Liferay is bundled with a number
of application servers; all you need to do is choose the one that best
fits your needs. If you don't currently have an application server, you
may want to start with the Tomcat bundle, as Tomcat is one of the
smallest and most straightforward bundles to configure. If you have an
open source application server preference, choose the server you prefer
from the available Liferay Portal bundles. All the bundles ship with a
Java Runtime Environment for Windows; if you are using a different
operating system, you must have a JDK (Java Development Kit) installed
prior to launching Liferay Portal.</text:p>
<text:p text:style-name="Text_20_body">Please note that Liferay is not
able to provide application server bundles for proprietary application
servers such as WebLogic or WebSphere, because the licenses for these
servers don't allow for redistribution. Liferay Portal, however, runs
just as well on these application servers as it does on the others. A
<text:span text:style-name="T4">.war</text:span> file and dependency
<text:span text:style-name="T5">.jar</text:span>s are provided for
proprietary application servers, and you'll need to follow a procedure
to install Liferay on them.</text:p>
<text:p text:style-name="Text_20_body">Once you have Liferay, you can
then plan out your installation. This is a two-step process: first,
determine if you need Liferay Portal Security turned on, and second,
install Liferay Portal, by using a bundle or by installing it manually
on your existing app server. Next, we'll go over the steps it takes to
install Liferay Portal.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Liferay
installation overview
<text:a xlink:type="simple" xlink:href="id=liferay-installation-overview" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Before we begin, it's
important to go over the various facets of the installation. They
are:</text:p>
<text:list text:style-name="L2">
  <text:list-item>
    <text:p text:style-name="P2">Create your database.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P2">Determine whether you want to use the
    Liferay managed data source or a data source managed by your
    application server. The Liferay managed data source is
    recommended.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P2">Gather credentials for sending email
    notifications to users. Liferay supports a JNDI mail session as well
    as its built-in mail session.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P2">Install a Liferay bundle or on an
    existing application server according to the instructions for your
    application server (see below).</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P2">Determine whether you'll use
    Marketplace or other third party applications. If you will, you
    should enable Liferay's Plugin Access Control List (PACL).</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">We'll go through the steps
in order, so first we'll look at the Liferay database.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Liferay's
database
<text:a xlink:type="simple" xlink:href="id=liferays-database" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The recommended way of
setting up your Liferay database also happens to be the simplest.
Liferay Portal takes care of just about everything. The only thing you
need to do is create a blank database encoded for character set UTF-8.
The reason for this is that Liferay is a multilingual application, and
needs UTF-8 encoding to display all the character sets it
supports.</text:p>
<text:p text:style-name="Text_20_body">Next, create an ID for accessing
this database and grant it all rights--including the rights to create
and drop tables--to the blank Liferay database. This is the ID you'll
use to connect to the Liferay database, and you'll configure it later
either in your application server or in Liferay's properties file so
that Liferay can connect to it.</text:p>
<text:p text:style-name="Text_20_body">One of the first things Liferay
Portal does when you bring it up for the first time is create the tables
it needs in the database you just created. It does this automatically,
complete with indexes.</text:p>
<text:p text:style-name="Text_20_body">If you create your database and
grant a user ID full access to it, Liferay can use that user ID to
create its indexes and tables automatically. This is the recommended way
to set up Liferay, as it allows you to take advantage of Liferay's
ability to maintain its database automatically during upgrades or
through various plugin installs that create tables of their own. It is
by far the best way to set up your Liferay installation.</text:p>
<text:p text:style-name="Text_20_body">If you'll be setting up Liferay's
database with the recommended permissions, you can skip to the next
section.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T6">Note:</text:span>
The below instructions are not the recommended set up for Liferay
installations, but the procedure is documented here so enterprises with
more restrictive standards can install Liferay with more strict--but
suboptimal--database settings. If it's at all possible, Liferay
recommends that you use the automatic method as documented above instead
of the procedure outlined below.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:p text:style-name="Text_20_body">Even though Liferay can create
its database automatically, some enterprises prefer
<text:span text:style-name="T7">not</text:span> to allow the user ID
configured in an application server to have the permissions over the
database necessary for Liferay and its plugins to maintain their tables.
For these organizations, Select, Insert, Update and Delete are the only
permissions allowed so we will go over how to set up the database
manually. If your organization
<text:span text:style-name="T8">is</text:span> willing to grant the
Liferay user ID permissions to create and drop tables in the
database--and this is the recommended configuration--by all means, use
the recommended configuration.</text:p>
<text:p text:style-name="Text_20_body">Creating the database is simple:
grant the ID Liferay uses to access the database full rights to do
anything to the database. Then install Liferay and have it create the
database. Once the database is created, remove the permissions for
creating tables and dropping tables from the user ID.</text:p>
<text:p text:style-name="Text_20_body">There are some caveats to running
Liferay like this. Many Liferay plugins create new tables when they're
deployed. In addition to this, Liferay has an automatic database upgrade
function that runs when Liferay is upgraded. If the user ID that
accesses the database doesn't have enough rights to create/modify/drop
tables in the database, you must grant those rights to the ID before you
deploy one of these plugins or start your upgraded Liferay for the first
time. Once the tables are created or the upgrade is complete, you can
remove those rights until the next deploy or upgrade. Additionally, your
developers may create plugins that need to create their own tables.
These are just like Liferay's plugins that do the same thing, and they
cannot be installed if Liferay can't create these tables automatically.
If you wish to install these plugins, you will need to grant rights to
create tables in the database before you attempt to install
them.</text:p>
<text:p text:style-name="Text_20_body">Once you have your database
ready, you can install Liferay on your server.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Liferay
Marketplace
<text:a xlink:type="simple" xlink:href="id=liferay-marketplace" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The Liferay Marketplace is
an integral part of the Liferay Portal experience. Starting with Liferay
Portal 6.2, the Marketplace plugin is required to be installed alongside
Liferay Portal. The Marketplace plugin enables a host of features that
extend beyond just access to the online Liferay Marketplace. Some of the
key features the Marketplace plugin enables are:</text:p>
<text:list text:style-name="L3">
  <text:list-item>
    <text:p text:style-name="P3">Liferay Marketplace: direct access to
    our online Marketplace</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P3">App Manager: ability to install,
    uninstall, and update apps</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P3">Bundled Apps: easily manage apps that
    may come bundled with your Liferay Portal</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P3">Developer Apps: ability to manage apps
    that you’re developing</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P3">License Manager: streamlined license
    management for your Liferay Portal and apps</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">The portal installation
process attempts to deploy and register the Marketplace plugin
automatically. If your environment supports/allows 1) hot deploy and 2)
full database rights, the automatic deploy process takes care of itself.
Many companies (especially in a production environment), however, limit
automated processes and/or database access. Additionally, certain
application servers (eg., WebSphere) do not support hot deploy, so you
may need to deploy the Marketplace plugin manually. Depending on your
environment’s restrictions, you may need to follow one or more of the
steps below to install the Marketplace plugin properly.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Server is
Firewalled without Access to the Internet
<text:a xlink:type="simple" xlink:href="id=server-is-firewalled-without-access-to-the-internet" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Your server may be behind a
firewall that prevents access to the Internet, or your security policy
may not allow direct download and installation from the Internet. In
these cases, you have 2 options:</text:p>
<text:list text:style-name="L4">
  <text:list-item>
    <text:p text:style-name="P4">From an Internet-enabled computer,
    download the Marketplace plugin from
    <text:a xlink:type="simple" xlink:href="https://www.liferay.com/marketplace/download" office:name=""><text:span text:style-name="Definition">here</text:span></text:a>.
    Then allow Liferay to auto deploy it by dropping the downloaded
    .lpkg file into the Liferay deploy folder.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P4">From an Internet-enabled computer,
    download the Marketplace plugin. Then use the Liferay App Manager to
    deploy the plugin.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Detailed instructions can
be found under
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/plugin-management-liferay-portal-6-2-user-guide-14-en" office:name=""><text:span text:style-name="Definition">Installing
Plugins Manually</text:span></text:a>.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Application
Server Does Not Support Hot Deploy
<text:a xlink:type="simple" xlink:href="id=application-server-does-not-support-hot-deploy" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If your application server
does not support hot deploy, you can't leverage Liferay’s auto deploy
feature. You can, however, manually deploy the plugin in two
steps:</text:p>
<text:list text:style-name="L5">
  <text:list-item>
    <text:p text:style-name="P5">Use Liferay's tools to pre-deploy the
    file.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P5">Then use your app server's tools to do
    the actual deployment.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">This is because Liferay
makes deployment-time modifications to the plugins right before they are
actually deployed to the application server. Detailed instructions can
be found under
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/plugin-management-liferay-portal-6-2-user-guide-14-en" office:name=""><text:span text:style-name="Definition">Deploy
Issues for Specific Containers</text:span></text:a>.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Limited
Database Access
<text:a xlink:type="simple" xlink:href="id=limited-database-access" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Some production
environments do not have the necessary database permissions for Liferay
and its plugins to maintain their tables. In these cases:</text:p>
<text:list text:style-name="L6">
  <text:list-item>
    <text:p text:style-name="P6">Grant the ID Liferay uses to access the
    database temporary full rights to the database.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P6">Install Liferay and have it create the
    database.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P6">Once the database is created, remove
    the permissions for creating tables and dropping tables from the
    user ID.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Detailed instructions are
available
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/liferays-database-liferay-portal-6-2-user-guide-15-en" office:name=""><text:span text:style-name="Definition">here</text:span></text:a>.
It should be noted that most sophisticated Liferay apps--not just the
Marketplace plugin--require new tables when deployed. If your
environment restricts database access, you may need to repeat the above
steps whenever you deploy a new app to the Liferay Portal.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Liferay
Home
<text:a xlink:type="simple" xlink:href="id=liferay-home" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay Portal uses a
special folder defined as
<text:span text:style-name="T9">Liferay</text:span><text:span text:style-name="T10">
</text:span><text:span text:style-name="T11">Home</text:span>. This
folder is usually one folder higher than the location of the application
server itself. This is why the bundles place the application server one
folder in from the bundle's root folder.</text:p>
<text:p text:style-name="Text_20_body">If Liferay is unable to create
the resources it needs in this folder or if it finds itself running on
certain application servers, it creates a folder called
<text:span text:style-name="T12">liferay</text:span> in the home folder
of the user ID that is running Liferay, and that becomes Liferay
Home.</text:p>
<text:p text:style-name="Text_20_body">The home folder is important to
the operation of Liferay. The aforementioned folders
(<text:span text:style-name="T13">data</text:span> and
<text:span text:style-name="T14">deploy</text:span>) are created there,
and Liferay's properties configuration files are also stored
there.</text:p>
<text:p text:style-name="Text_20_body">We recommend using the setup
wizard to configure your database and mail sessions when you first
configure Liferay. This creates a
<text:span text:style-name="T15">portal-setup-wizard.properties</text:span>
file where all the settings from the setup wizard are stored. When you
begin customizing your portal's configuration, we recommend you create a
separate properties file for that, called
<text:span text:style-name="T16">portal-ext.properties</text:span>. This
allows you to keep your server configuration properties separate from
core properties like your database and mail server configurations. All
the possible properties that can be placed in this file are documented
in
<text:a xlink:type="simple" xlink:href="http://docs.liferay.com/portal/6.2/propertiesdoc" office:name=""><text:span text:style-name="Definition">our
reference documentation</text:span></text:a>.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T17">Note:</text:span>
To avoid using the setup wizard so you can configure everything manually
from a
<text:span text:style-name="T18">portal-ext.properties</text:span> file,
you must disable the Setup Wizard by specifying
<text:span text:style-name="T19">setup.wizard.enabled=false</text:span>
in the
<text:span text:style-name="T20">portal-ext.properties</text:span>.
Also, note that property values in
<text:span text:style-name="T21">portal-setup-wizard.properties</text:span>
(the file created in Liferay Home by the Setup Wizard) override property
values in
<text:span text:style-name="T22">portal-ext.properties</text:span>.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:p text:style-name="Text_20_body">Let's move on and discuss Liferay
Portal security.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Configuring
Liferay Portal Security
<text:a xlink:type="simple" xlink:href="id=configuring-liferay-portal-security" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">As you probably know,
Liferay Marketplace is an online store for obtaining applications that
run on the Liferay Portal platform. These applications are provided not
only by Liferay, but also by partners and independent developers who
want you to install and use their applications on your server. Many of
these applications are excellent, and we recommend that you try them out
for yourself.</text:p>
<text:p text:style-name="Text_20_body">Because many of the applications
on Marketplace are <text:span text:style-name="T23">not</text:span>
provided by Liferay, however, there's an issue of trust: how do you know
these applications are doing what they're advertised to do? There is a
vetting process that they go through before they're allowed on
Marketplace, but if the source code is not provided, there's no way for
even Liferay to know if an app has been properly represented. For this
reason, Liferay Portal implements a security layer we call the Portal
Access Control List, or PACL.</text:p>
<text:p text:style-name="Text_20_body">PACL forces an application to
declare up front the functions from Liferay's APIs that it calls.
Anything that's not declared is not allowed to run. It's similar to what
you might see on your mobile phone when you install an app: you get to
see the Liferay API functions the app uses, and then you can decide if
you want to install that app based on the permissions it requires. This
way, you see right away what portal data that app can access, and the
app can do nothing else: you're protected--if you have PACL enabled. So
if you plan to use apps downloaded from Marketplace, it's important to
make sure PACL is enabled.</text:p>
<text:p text:style-name="Text_20_body">By default, Liferay's bundles
have PACL turned off. The reason for this is that there is a small
performance penalty for having PACL enabled. Since the only reason to
have PACL enabled is to install untrusted third party apps from
Marketplace (and not everybody does that), we decided to leave PACL
turned off by default, so that your portal performs as fast as
possible.</text:p>
<text:p text:style-name="Text_20_body">All of this is to say: if you
intend to use Marketplace apps, please enable PACL. Later in this
chapter, there are sections for all the app servers Liferay supports.
Each of those sections has a subsection that explains how to enable Java
security for that app server, which is a prerequisite for enabling PACL.
Once you have Java security enabled, PACL can be enabled by adding one
line to your
<text:span text:style-name="T24">portal-ext.properties</text:span> or
<text:span text:style-name="T25">portal-setup-wizard.properties</text:span>
file:</text:p>
<text:p text:style-name="P7">portal.security.manager.strategy=liferay</text:p>
<text:p text:style-name="First_20_paragraph">Save the file and if
Liferay is running, restart it. Your portal is now configured to check
PACL-enabled Marketplace apps against their declared
permissions.</text:p>
<text:p text:style-name="Text_20_body">Next, you'll make sure Liferay is
configured properly for your network.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Choosing
IPv4 or IPv6
<text:a xlink:type="simple" xlink:href="id=choosing-ipv4-or-ipv6" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay Portal supports
both the IPv4 and IPv6 address formats, though by default, Liferay uses
IPv4 addresses. If you're on an IPv6 network, you'll need to change the
configuration. If you'd like more information on the basics of these
protocols, you can check out the
<text:a xlink:type="simple" xlink:href="http://www.google.com/intl/en/ipv6/" office:name=""><text:span text:style-name="Definition">reason</text:span></text:a>
for using IPv6 addresses, and its
<text:a xlink:type="simple" xlink:href="http://en.wikipedia.org/wiki/IPv6" office:name=""><text:span text:style-name="Definition">technical
details</text:span></text:a>.</text:p>
<text:p text:style-name="Text_20_body">To configure your portal to
validate IPv6 addresses, you must complete a few simple steps. First,
assuming you're using the Tomcat app server for your portal, navigate to
the
<text:span text:style-name="T26">${TOMCAT_HOME}/bin/setenv.bat</text:span>
file and set
<text:span text:style-name="T27">-Djava.net.preferIPv4Stack=false</text:span>
in <text:span text:style-name="T28">CATALINA_OPTS</text:span>. Then,
create a
<text:span text:style-name="T29">portal-ext.properties</text:span> file
in your portal's home directory (if necessary) and set the
<text:span text:style-name="T30">tunnel.servlet.hosts.allowed</text:span>
property to the target hosts you want to allow (e.g.,
<text:span text:style-name="T31">0:0:0:0:0:0:0:1</text:span>).</text:p>
<text:p text:style-name="Text_20_body">Now that you understand all the
prerequisites for installing Liferay Portal, let's go ahead and get it
done! First we'll go over installing Liferay from a bundle, and after
this we'll provide instructions for installing Liferay manually on all
the application servers it supports.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Installing
a bundle
<text:a xlink:type="simple" xlink:href="id=installing-a-bundle" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay bundles contain the
same directory structure regardless of application server. The top-level
folder is named for the release of Liferay. This folder is called
<text:span text:style-name="T32">Liferay</text:span><text:span text:style-name="T33">
</text:span><text:span text:style-name="T34">Home</text:span>, and we
refer to it thoughout this documentation.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img1"><draw:image xlink:href="../../images/02-bundle-directory-structure.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Inside this folder, there are
folders for various purposes:</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T35">Data:</text:span>
This folder is used to store the embedded HSQL database the bundles use,
as well as the configuration and data for the Jackrabbit JSR-170 content
repository and the Lucene search index. It also contains the base
directory where the OSGi framework can persist any of its operating
files.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T36">Deploy:</text:span>
Plugins that can be copied into this folder, and Liferay then deploys
them. It is also used by Liferay Marketplace and Liferay's graphical
plugin installer utility.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T37">[Application</text:span><text:span text:style-name="T38">
</text:span><text:span text:style-name="T39">Server]:</text:span> The
name of this folder is different depending on the bundle you've
downloaded. This folder contains the application server in which Liferay
has been installed.</text:p>
<text:p text:style-name="Text_20_body">In addition to Liferay Portal
itself, bundles are shipped with a number of plugins already
installed:</text:p>
<text:list text:style-name="L7">
  <text:list-item>
    <text:p text:style-name="P8"><text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/using-workflow-liferay-portal-6-2-user-guide-11-en" office:name=""><text:span text:style-name="Definition">kaleo-web:</text:span></text:a>
    Liferay's workflow engine</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P8"><text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/leveraging-the-liferay-marketplace-liferay-portal-6-2-user-guide-14-en" office:name=""><text:span text:style-name="Definition">marketplace:</text:span></text:a>
    Interface to Liferay Marketplace</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P8"><text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/touring-liferay-portals-user-interface-liferay-portal-6-2-user-guide-02-en" office:name=""><text:span text:style-name="Definition">notifications:</text:span></text:a>
    App that provides in-browser notifications for users</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P8"><text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/development/-/ai/creating-and-integrating-with-opensocial-liferay-portal-6-2-dev-guide-08-en" office:name=""><text:span text:style-name="Definition">opensocial:</text:span></text:a>
    Allows deploying OpenSocial gadgets to Liferay Portal</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P8"><text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/development/-/ai/importing-resources-with-your-themes-liferay-portal-6-2-dev-guide-09-en" office:name=""><text:span text:style-name="Definition">resources-importer-web:</text:span></text:a>
    Imports theme resources with theme plugins</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P8"><text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/liferay-sync-liferay-portal-6-2-user-guide-05-en" office:name=""><text:span text:style-name="Definition">sync-web:</text:span></text:a>
    Allows Liferay Sync to connect to this installation to keep
    Documents and Media folders synchronized. You must have this plugin
    installed if you want to use Liferay Sync Mobile or
    Desktop.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P8">web-forms: App that allows users to
    create forms users can fill out. The results are then emailed to a
    specified email address.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P8">welcome-theme: A default website that
    gives new users a tour of what Liferay Portal has to offer.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P8"><text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/managing-events-and-calendar-resources-with-liferay-rsquo-s-calendar" office:name=""><text:span text:style-name="Definition">calendar:</text:span></text:a>
    Liferay's calendar application. This used to be built-in, and is now
    a plugin, so it's included by default.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">If you are an enterprise
subscriber, the welcome theme is not included, and you receive a few
more plugins:</text:p>
<text:list text:style-name="L8">
  <text:list-item>
    <text:p text:style-name="P9"><text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/kaleo-designer-liferay-portal-6-2-user-guide-12-en" office:name=""><text:span text:style-name="Definition">kaleo-designer-portlet:</text:span></text:a>
    Subscriber plugin that offers a graphical interface for creating
    Kaleo workflows.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P9"><text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/make-it-pretty-creating-custom-displays-liferay-portal-6-2-user-guide-10-en" office:name=""><text:span text:style-name="Definition">kaleo-forms-portlet:</text:span></text:a>
    Subscriber plugin that allows attaching forms to workflows.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Getting a Liferay bundle up
and running is as easy as uncompressing the archive, copying a JDBC
driver, and then starting the application server. Let's use the Tomcat
bundle as an example:</text:p>
<text:list text:style-name="L9">
  <text:list-item>
    <text:p text:style-name="P10">Unzip the bundle to a location of your
    choice.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P10">If you're setting up Liferay to be an
    actual server, copy your database's JDBC driver
    <text:span text:style-name="T40">.jar</text:span> to
    <text:span text:style-name="T41">[Tomcat]/lib/ext</text:span> (see
    the setup wizard section below). If you're setting up Liferay for
    demo purposes, you can skip this step.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P10">Start Tomcat in the same way you would
    if you had downloaded it manually. Tomcat is launched by way of a
    script which is found in its
    <text:span text:style-name="T42">bin</text:span> folder. If you drop
    to a command prompt and go to this folder, you can launch Tomcat via
    the following command on Windows:</text:p>
    <text:p text:style-name="P10">startup</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">or the following command on
Linux/Mac/Unix:</text:p>
<text:p text:style-name="P11">./startup.sh</text:p>
<text:p text:style-name="First_20_paragraph">The Liferay/Tomcat bundle
then launches. If you are on Windows, another command prompt window
appears with Tomcat's console in it. If you are on Linux, you can see
the Tomcat console by issuing the following command:</text:p>
<text:p text:style-name="P12">tail -f ../logs/catalina.out</text:p>
<text:p text:style-name="First_20_paragraph">Once Tomcat has started, it
automatically launches a web browser that displays Liferay's setup
wizard. If for some reason your browser doesn't load the wizard, launch
your web browser and then go to
<text:a xlink:type="simple" xlink:href="http://localhost:8080" office:name=""><text:span text:style-name="Definition">http://localhost:8080</text:span></text:a>.</text:p>
<text:p text:style-name="Text_20_body">Liferay CE ships with a sample
web site that showcases Liferay's features. It contains many links
describing the features of Liferay that we cover in detail throughout
this book.</text:p>
<text:p text:style-name="Text_20_body">If you're installing Liferay on
your own machine to explore its features, you likely want to leave the
sample site there so you can examine it. If, however, you're installing
Liferay on your server to run your own site, it's best to start with a
clean system. Before running the setup wizard, you should remove the
sample data from your Liferay installation. You must do this before
running the setup wizard to get a clean database, and it's as simple as
undeploying the application that installs the sample data.</text:p>
<text:p text:style-name="Text_20_body">There is one application included
in the bundle that you need to remove:</text:p>
<text:list text:style-name="L10">
  <text:list-item>
    <text:p text:style-name="P13">welcome-theme</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">To remove it, all you have
to do is undeploy it. The method for doing this differs by application
server and that, of course, depends on the bundle you have chosen. For
example, on Tomcat you delete the application folder from the
<text:span text:style-name="T43">[Tomcat Home]/webapps</text:span>
folder. On GlassFish, you use the administrative console.</text:p>
<text:p text:style-name="Text_20_body">If you forget to undeploy the
sample application before you run through the setup wizard and connect
Liferay to your real database, the sample data is created in your
database, and there isn't an easy way to clean it out. Make sure you get
the sample data undeployed before setting up your server, or you'll have
to drop your database and re-create it. That's not such a bad thing to
have to do, since it's a brand new database. If you don't have a brand
new database, you're working with an existing installation of Liferay,
and you should follow the instructions on upgrading in chapter 18
instead of what's described here.</text:p>
<text:p text:style-name="Text_20_body">If you're a Liferay Portal
Enterprise subscriber, you don't have the sample site, so you don't need
to worry about this. The next step is to run through the setup wizard,
which we'll cover below.</text:p>
<text:p text:style-name="Text_20_body">As you can see, bundles are the
easiest way to get started with Liferay. They come preconfigured with a
running Liferay instance that can be used immediately to explore all the
things that Liferay can do. Bundles are the fastest way to create full
production-ready Liferay installations. If you're using a bundle, skip
to the section on the setup wizard below to continue your
installation.</text:p>
<text:p text:style-name="Text_20_body">Of course, it's not always
possible to use a bundle. You may already have an application server
where Liferay should be installed. The bulk of this chapter describes
how to install Liferay on all the application servers it supports, both
open source and proprietary.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">App
Servers
<text:a xlink:type="simple" xlink:href="id=app-servers" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">When it comes time to
install Liferay Portal on your server, you'll find it's easiest to do
this by starting with a bundle. But many organizations can't do that.
There may be an existing infrastructure into which you're installing
Liferay, or you may have standardized on a particular application
server. You'll be happy to know that Liferay Portal has been designed to
work well with all the leading application servers and that it's easy
and straightforward to install. But before we get started, we need to go
over a few concepts; namely, data sources and mail sessions. These were
touched on in the section on bundles above but we'll look at them in
more detail now.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Using data
sources
<text:a xlink:type="simple" xlink:href="id=using-data-sources" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay comes bundled with
its own built-in data source. It's configured by a number of properties
that are set in a properties file. By default, the setup wizard asks you
for the necessary values and creates a configuration file that uses the
built-in data source to connect to the database.</text:p>
<text:p text:style-name="Text_20_body">Liferay always recommends that
you use the built-in data source. Sometimes, however, organizations
prefer to use the data source provided by their application server of
choice. In this instance, a JNDI lookup provides a handle to the data
source and the application server manages the connection pools. Liferay
supports using your application server's data source if you wish to do
that.</text:p>
<text:p text:style-name="Text_20_body">To do this, you'll need to create
your own configuration file and skip the setup wizard. Since you'd be
creating this file <text:span text:style-name="T44">after</text:span>
the wizard anyway, this isn't such a big deal. We show you how to do
that after all the sections on application servers.</text:p>
<text:p text:style-name="Text_20_body">Since mail sessions are
configured in a similar way to data sources, we'll look at them
next.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Using mail
sessions
<text:a xlink:type="simple" xlink:href="id=using-mail-sessions" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay's default
configuration looks for a mail server on the same machine on which
Liferay's running and it tries to send mail via SMTP to this server. If
this is not your configuration, you'll need to modify Liferay's
defaults. To do this, you'll use a
<text:span text:style-name="T45">portal-ext.properties</text:span> file
(see below).</text:p>
<text:p text:style-name="Text_20_body">In a similar fashion to
databases, you have two ways to configure your mail server:</text:p>
<text:list text:style-name="L11">
  <text:list-item>
    <text:p text:style-name="P14">Use your application server's mail
    session.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P14">Use the built-in mail
    session.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">To use your application
server's mail session, you must create it in your application server and
it should point to your mail server. Once you've done that, you're ready
to point Liferay to it. You can do this through the configuration file
or through Liferay's control panel after it's been installed.</text:p>
<text:p text:style-name="Text_20_body">You now have all the background
information you need. Next you need to make your decision: will you use
Liferay's built-in data source, or the one provided by your application
server? If you're planning to use the one provided by your server, you
can't use Liferay's installation wizard, and you'll have to follow the
instructions in the section below titled Manual Configuration.</text:p>
<text:p text:style-name="Text_20_body">In either case, your next step is
to install Liferay onto your application server. What follows are
sections for every application server that Liferay supports. Once you
have Liferay Portal installed, the first thing you see is the setup
wizard. To continue, follow the instructions for setting up Liferay on
your application server, and then skip down to the section on the setup
wizard.</text:p>
<text:p text:style-name="Text_20_body">Next, follow the instructions for
installing Liferay on your particular application server in the section
below.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Installing
Liferay on an existing application server
<text:a xlink:type="simple" xlink:href="id=installing-liferay-on-an-existing-application-server" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">This section contains
detailed instructions for installing Liferay Portal using its .war file
distribution. This allows system administrators to deploy Liferay in
existing application server installations. It is recommended that you
have a good understanding of how to deploy Java EE applications in your
application server of choice.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Installing
Liferay in five easy steps
<text:a xlink:type="simple" xlink:href="id=installing-liferay-in-five-easy-steps" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">There are five generic
steps to installing Liferay on an existing application server:</text:p>
<text:list text:style-name="L12">
  <text:list-item>
    <text:p text:style-name="P15">Obtain the Liferay
    <text:span text:style-name="T46">.war</text:span> file and the
    dependencies archive.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P15">Shut your application server
    down.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P15">Extract the dependencies to a location
    on your server's global classpath. This allows both Liferay and
    plugins to access these dependencies.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P15">Start your application
    server.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P15">Deploy the Liferay
    <text:span text:style-name="T47">.war</text:span> file.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">The instructions below are
specific for each application server that Liferay supports. Liferay
supports a wide combination of application servers and databases.
Because of this, this section assumes MySQL as the database, that the
database has already been created, and that you're using the setup
wizard. If you're not using the setup wizard, see the sections above for
information on how to set up Liferay manually.</text:p>
<text:p text:style-name="Text_20_body">We also assume your application
server is already installed and running successfully. If you still need
to install your application server, please follow your vendor's
instructions first.</text:p>
<text:p text:style-name="Text_20_body">Since Liferay uses the UTF-8
character encoding, make sure that your application server has the Java
<text:span text:style-name="T48">-Dfile.encoding=UTF-8</text:span>
parameter set before you proceed. Note that different application
servers provide different means for setting this parameter. For example,
in Tomcat this parameter goes in the
<text:span text:style-name="T49">setenv.sh</text:span> or
<text:span text:style-name="T50">setenv.bat</text:span> script. For
other application servers, this parameter might go in a different script
or might have to be set through an administration console.</text:p>
<text:p text:style-name="Text_20_body">The following instructions assume
an installation on a local machine. When installing to a remote server,
substitute <text:span text:style-name="T51">localhost</text:span> with
the host name or IP of the server.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T52">Tip:</text:span>
Note that Liferay <text:span text:style-name="T53">requires</text:span>
JDK 6 or greater. Do not attempt to install Liferay 6.2 on an
application server that runs under Java 5 or lower; it will not work. If
you are running an application server that ships with a JDK and that JDK
is version 5 or lower, you'll need to upgrade your application server to
run current versions of Liferay Portal.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:p text:style-name="Text_20_body">Without further ado, let's get to
the application servers. The first one we'll cover is Mule Tcat. If you
don't have an application server preference, and you want support all
the way down to the application server from Liferay, then Mule Tcat is
your solution. After we cover Mule Tcat, we'll look at all the supported
application servers in alphabetical order.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Installing
Liferay on Mulesoft Tcat
<text:a xlink:type="simple" xlink:href="id=installing-liferay-on-mulesoft-tcat" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">For this section, we will
refer to your Tcat server's installation location as
<text:span text:style-name="T54">[TCAT_HOME]</text:span>. If you don't
already have an existing Tcat server, we recommend you download a
Liferay/Tcat bundle from
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/downloads/liferay-portal/available-releases" office:name=""><text:span text:style-name="Definition">http://www.liferay.com/downloads/liferay-portal/available-releases</text:span></text:a>.
If you have an existing Tcat server on which you'd like to deploy
Liferay manually, please follow the steps below.</text:p>
<text:p text:style-name="Text_20_body">Your first step is to download
the latest Liferay <text:span text:style-name="T55">.war</text:span>
file and Liferay Portal dependencies from
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/downloads/liferay-portal/additional-files" office:name=""><text:span text:style-name="Definition">http://www.liferay.com/downloads/liferay-portal/additional-files</text:span></text:a>.
The Liferay <text:span text:style-name="T56">.war</text:span> file
should be called
<text:span text:style-name="T57">liferay-portal-6.2.x-[date].war</text:span>
and the dependencies file should be called
<text:span text:style-name="T58">liferay-portal-dependencies-6.2.x-[date].zip</text:span>.</text:p>
<text:p text:style-name="Text_20_body">Next, let's get started by
addressing Liferay's library dependencies.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Dependency
Jars
<text:a xlink:type="simple" xlink:href="id=dependency-jars" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">To run Liferay Portal on
your Tcat server, you first need to make some JAR files available on
Tcat's global classpath. These include the Liferay Dependency JARs, a
JDBC driver for your database, and some other dependencies that Liferay
Portal requires.</text:p>
<text:list text:style-name="L13">
  <text:list-item>
    <text:p text:style-name="P16">Create the folder
    <text:span text:style-name="T59">[TCAT_HOME]/lib/ext</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P16">Extract the Liferay dependencies file
    and copy the <text:span text:style-name="T60">.jars</text:span> to
    <text:span text:style-name="T61">[TCAT_HOME]/lib/ext</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P16">Next, you need a few
    <text:span text:style-name="T62">.jar</text:span> files that are
    included as part of the Liferay Tcat bundle, but are not included
    with Tcat. You'll have to download them yourself, so let's get
    started. Place these
    <text:span text:style-name="T63">.jar</text:span> files into
    <text:span text:style-name="T64">$TCAT_HOME/lib/ext</text:span>:</text:p>
  </text:list-item>
</text:list>
<text:list text:style-name="L14">
  <text:list-item>
    <text:p text:style-name="P17"><text:span text:style-name="T65">jta.jar</text:span>:
    Support for Java transactions. You can get this
    <text:span text:style-name="T66">.jar</text:span>, which manages
    transactions, from
    <text:a xlink:type="simple" xlink:href="http://www.oracle.com/technetwork/java/javaee/jta/index.html" office:name=""><text:span text:style-name="Definition">http://www.oracle.com/technetwork/java/javaee/jta/index.html</text:span></text:a></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P17"><text:span text:style-name="T67">mail.jar</text:span>:
    Support for the Java Mail API. You can get this
    <text:span text:style-name="T68">.jar</text:span> from
    <text:a xlink:type="simple" xlink:href="http://www.oracle.com/technetwork/java/index-138643.html" office:name=""><text:span text:style-name="Definition">http://www.oracle.com/technetwork/java/index-138643.html</text:span></text:a></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P17"><text:span text:style-name="T69">persistence.jar</text:span>:
    Support for the Java Persistence API. You can get this
    <text:span text:style-name="T70">.jar</text:span> from
    <text:a xlink:type="simple" xlink:href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html" office:name=""><text:span text:style-name="Definition">http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html</text:span></text:a></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P17"><text:span text:style-name="T71">activation.jar</text:span>:
    This is an implementation of the Java Activation Framework. You can
    get this <text:span text:style-name="T72">.jar</text:span> from
    <text:a xlink:type="simple" xlink:href="http://www.oracle.com/technetwork/java/jaf11-139815.html" office:name=""><text:span text:style-name="Definition">http://www.oracle.com/technetwork/java/jaf11-139815.html</text:span></text:a></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P17"><text:span text:style-name="T73">ccpp.jar</text:span>:
    Enables Composite Capability/Preference Profiles. You can get this
    <text:span text:style-name="T74">.jar</text:span> from
    <text:a xlink:type="simple" xlink:href="http://mvnrepository.com/artifact/javax.ccpp/ccpp/1.0" office:name=""><text:span text:style-name="Definition">http://mvnrepository.com/artifact/javax.ccpp/ccpp/1.0</text:span></text:a></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P17"><text:span text:style-name="T75">jms.jar</text:span>:
    The Java Messaging Service. You can get this
    <text:span text:style-name="T76">.jar</text:span> from
    <text:a xlink:type="simple" xlink:href="http://www.oracle.com/technetwork/java/docs-136352.html" office:name=""><text:span text:style-name="Definition">http://www.oracle.com/technetwork/java/docs-136352.html</text:span></text:a></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P17"><text:span text:style-name="T77">jutf7.jar</text:span>:
    Provides UTF-7 and Modified UTF-7 charsets for Java. You can get
    this <text:span text:style-name="T78">.jar</text:span> from
    <text:a xlink:type="simple" xlink:href="http://sourceforge.net/projects/jutf7/" office:name=""><text:span text:style-name="Definition">http://sourceforge.net/projects/jutf7/</text:span></text:a></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P17"><text:span text:style-name="T79">junit.jar</text:span>:
    Optional: lets you run unit tests. You can get this
    <text:span text:style-name="T80">.jar</text:span> from
    <text:a xlink:type="simple" xlink:href="http://sourceforge.net/projects/junit/" office:name=""><text:span text:style-name="Definition">http://sourceforge.net/projects/junit/</text:span></text:a></text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Although you can get each
<text:span text:style-name="T81">.jar</text:span> listed above
separately, it may be more convenient to get them by downloading the
Liferay source code and copying them from there. Once you have
downloaded the Liferay source, unzip the source into a temporary folder.
You can find the <text:span text:style-name="T82">.jar</text:span> files
in
<text:span text:style-name="T83">[LIFERAY_SOURCE]/lib/development</text:span>.</text:p>
<text:list text:style-name="L15">
  <text:list-item>
    <text:p text:style-name="P18">Make sure the JDBC driver for your
    database is accessible by Tomcat. Obtain the JDBC driver for your
    version of the database server. In the case of MySQL, use
    <text:span text:style-name="T84">mysql-connector-java-[version]-bin.jar</text:span>.
    You can download the latest MySQL JDBC driver from
    <text:a xlink:type="simple" xlink:href="http://dev.mysql.com/downloads/connector/j/" office:name=""><text:span text:style-name="Definition">http://dev.mysql.com/downloads/connector/j/</text:span></text:a>.
    Extract the JAR file and copy it to
    <text:span text:style-name="T85">[TCAT_HOME]/lib/ext</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Now that you have the
necessary libraries in place, we'll move on to configuring your
domain.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Tcat
Configuration
<text:a xlink:type="simple" xlink:href="id=tcat-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you're installing
Liferay Portal onto an existing Tcat server, you should be familiar with
the Tcat Administration Console. The following instructions assume you
have a Tcat server with the Administration Console and a separate,
managed Tcat server instance where you'll deploy Liferay. To find
information specific to Tcat server installation and management, see
<text:a xlink:type="simple" xlink:href="http://www.mulesoft.org/documentation/display/TCAT/Home" office:name=""><text:span text:style-name="Definition">Mulesoft's
Tcat Documentation</text:span></text:a>. You have to do a few things to
configure your managed Tcat server instance:</text:p>
<text:list text:style-name="L16">
  <text:list-item>
    <text:p text:style-name="P19">Set environment variables</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P19">Create a context for your web
    application</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P19">Modify the list of classes/JARs to be
    loaded</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P19">Specify URI encoding</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img2"><draw:image xlink:href="../../images/15-tcat-sign-in.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Next, you'll configure your
managed Tcat instance.</text:p>
<text:list text:style-name="L17">
  <text:list-item>
    <text:p text:style-name="P20">To set the
    <text:span text:style-name="T86">CATALINA_OPTS</text:span>
    environment variable, you need to add a server profile. In the Tcat
    Administration Console, navigate to the
    <text:span text:style-name="T87">Administration</text:span> tab and
    click
    <text:span text:style-name="T88">Server</text:span><text:span text:style-name="T89">
    </text:span><text:span text:style-name="T90">Profiles</text:span>.
    Name the profile appropriately
    (<text:span text:style-name="T91">Liferay</text:span><text:span text:style-name="T92">
    </text:span><text:span text:style-name="T93">6.2</text:span>,
    perhaps), provide a description if you wish, select the workspace
    where you'll keep your profile
    (<text:span text:style-name="T94">/Profiles</text:span> is a logical
    choice), and click the
    <text:span text:style-name="T95">Add</text:span><text:span text:style-name="T96">
    </text:span><text:span text:style-name="T97">Variable</text:span>
    button. Name it
    <text:span text:style-name="T98">CATALINA_OPTS</text:span> and give
    it the following value:</text:p>
<text:p text:style-name="P21">-Dfile.encoding=UTF8 -Dorg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES=false -Duser.timezone=GMT -Xmx1024m -XX:MaxPermSize=256m&quot;</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">This sets the character
encoding to UTF-8, sets the time zone to Greenwich Mean Time and
allocates memory to the Java virtual machine.</text:p>
<text:p text:style-name="Text_20_body">Apply the profile to the Tcat
server where you're deploying Liferay. To do so, go to the
<text:span text:style-name="T99">Servers</text:span> tab, select the
desired server, and select your profile from the
<text:span text:style-name="T100">Set</text:span><text:span text:style-name="T101">
</text:span><text:span text:style-name="T102">Profile</text:span>
dropdown menu.</text:p>
<text:list text:style-name="L18">
  <text:list-item>
    <text:p text:style-name="P22">Create a file locally called
    <text:span text:style-name="T103">ROOT.xml</text:span>:</text:p>
    <text:p text:style-name="P22"></text:p>
    <text:p text:style-name="P22"></text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Click your server's name to
edit its configuration. Using the
<text:span text:style-name="T104">Files</text:span> tab, navigate to the
directory
<text:span text:style-name="T105">[TCAT_HOME]/conf/Catalina/localhost</text:span>
and upload your ROOT.xml file. Setting
<text:span text:style-name="T106">crossContext=&quot;true&quot;</text:span>
allows multiple web apps to use the same class loader. In the content
above you will also find commented instructions and tags for configuring
a JAAS realm, disabling persistent sessions and disabling sessions in
general.</text:p>
<text:list text:style-name="L19">
  <text:list-item>
    <text:p text:style-name="P23">Still in your server's
    <text:span text:style-name="T107">Files</text:span> tab, open
    <text:span text:style-name="T108">[TCAT_HOME]/conf/catalina.properties</text:span>,
    click the
    <text:span text:style-name="T109">Edit</text:span><text:span text:style-name="T110">
    </text:span><text:span text:style-name="T111">catalina.properties</text:span>
    link, and replace the line:</text:p>
<text:p text:style-name="P24">common.loader=${catalina.base}/lib,${catalina.base}/lib/*.jar,${catalina.home}/lib,${catalina.home}/lib/*.jar</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">with:</text:p>
<text:p text:style-name="P25"><text:s text:c="4" />common.loader=${catalina.base}/lib,${catalina.base}/lib/*.jar,${catalina.home}/lib,${catalina.home}/lib/*.jar,${catalina.home}/lib/ext,${catalina.home}/lib/ext/*.jar</text:p>
<text:p text:style-name="First_20_paragraph">This allows Catalina to
access the dependency jars you extracted to
<text:span text:style-name="T112">[TCAT_HOME]/lib/ext</text:span>.</text:p>
<text:list text:style-name="L20">
  <text:list-item>
    <text:p text:style-name="P26">To ensure consistent use of UTF-8 URI
    Encoding, edit
    <text:span text:style-name="T113">[TCAT_HOME]/conf/server.xml</text:span>
    and add the attribute
    <text:span text:style-name="T114">URIEncoding=&quot;UTF-8&quot;</text:span>
    where you see
    <text:span text:style-name="T115">redirectPort=8443</text:span>, in
    the definition of your connectors (HTTP and AJP). For
    example:</text:p>
    <text:p text:style-name="P26"></text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img3"><draw:image xlink:href="../../images/15-tcat-server-files.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Excellent work! Now it's time to
configure your database.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Database
Configuration
<text:a xlink:type="simple" xlink:href="id=database-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want Tcat to manage
your data source, use the following procedure. If you want to use
Liferay's built-in data source, you can skip this section.</text:p>
<text:list text:style-name="L21">
  <text:list-item>
    <text:p text:style-name="P27">Make sure your database server is
    installed and working. If it's installed on a different machine,
    make sure it's accessible from your Liferay machine.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P27">Using the Tcat Administration Console,
    add your data source as a resource in the context of your web
    application specified in
    <text:span text:style-name="T116">[TCAT_HOME]/conf/Catalina/localhost/ROOT.xml</text:span>:</text:p>
<text:p text:style-name="P28">&lt;Context...&gt;</text:p>
<text:p text:style-name="P29"><text:s text:c="4" />&lt;Resource</text:p>
<text:p text:style-name="P30"><text:s text:c="8" />name=&quot;jdbc/LiferayPool&quot;</text:p>
<text:p text:style-name="P31"><text:s text:c="8" />auth=&quot;Container&quot;</text:p>
<text:p text:style-name="P32"><text:s text:c="8" />type=&quot;javax.sql.DataSource&quot;</text:p>
<text:p text:style-name="P33"><text:s text:c="8" />driverClassName=&quot;com.mysql.jdbc.Driver&quot;</text:p>
<text:p text:style-name="P34"><text:s text:c="8" />url=&quot;jdbc:mysql://localhost/lportal?useUnicode=true&amp;amp;characterEncoding=UTF-8&quot;</text:p>
<text:p text:style-name="P35"><text:s text:c="8" />username=&quot;root&quot;</text:p>
<text:p text:style-name="P36"><text:s text:c="8" />password=&quot;root&quot;</text:p>
<text:p text:style-name="P37"><text:s text:c="8" />maxActive=&quot;100&quot;</text:p>
<text:p text:style-name="P38"><text:s text:c="8" />maxIdle=&quot;30&quot;</text:p>
<text:p text:style-name="P39"><text:s text:c="8" />maxWait=&quot;10000&quot;</text:p>
<text:p text:style-name="P40"><text:s text:c="4" />/&gt;</text:p>
<text:p text:style-name="P41">&lt;/Context&gt;</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Note the above resource
definition assumes your database name is
<text:span text:style-name="T117">lportal</text:span> and your MySQL
username and password are both
<text:span text:style-name="T118">root</text:span>. You'll have to
update these values with your own database name and
credentials.</text:p>
<text:p text:style-name="Text_20_body">Your Tcat managed data source is
now configured. Let's move on to your mail session.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Mail
Configuration
<text:a xlink:type="simple" xlink:href="id=mail-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want to manage your
mail session within Tomcat, use the following instructions. If you want
to use the built-in Liferay mail session, you can skip this
section.</text:p>
<text:p text:style-name="Text_20_body">Create a mail session bound to
<text:span text:style-name="T119">mail/MailSession</text:span>. In the
Tcat Administration Console, edit
<text:span text:style-name="T120">[TCAT_ HOME]/conf/Catalina/localhost/ROOT.xml</text:span>
and configure a mail session. Be sure to replace the mail session values
with your own.</text:p>
<text:p text:style-name="P42">&lt;Context...&gt;</text:p>
<text:p text:style-name="P43"><text:s text:c="4" />&lt;Resource</text:p>
<text:p text:style-name="P44"><text:s text:c="8" />name=&quot;mail/MailSession&quot;</text:p>
<text:p text:style-name="P45"><text:s text:c="8" />auth=&quot;Container&quot;</text:p>
<text:p text:style-name="P46"><text:s text:c="8" />type=&quot;javax.mail.Session&quot;</text:p>
<text:p text:style-name="P47"><text:s text:c="8" />mail.pop3.host=&quot;pop.gmail.com&quot;</text:p>
<text:p text:style-name="P48"><text:s text:c="8" />mail.pop3.port=&quot;110&quot;</text:p>
<text:p text:style-name="P49"><text:s text:c="8" />mail.smtp.host=&quot;smtp.gmail.com&quot;</text:p>
<text:p text:style-name="P50"><text:s text:c="8" />mail.smtp.port=&quot;465&quot;</text:p>
<text:p text:style-name="P51"><text:s text:c="8" />mail.smtp.user=&quot;user&quot;</text:p>
<text:p text:style-name="P52"><text:s text:c="8" />mail.smtp.password=&quot;password&quot;</text:p>
<text:p text:style-name="P53"><text:s text:c="8" />mail.smtp.auth=&quot;true&quot;</text:p>
<text:p text:style-name="P54"><text:s text:c="8" />mail.smtp.starttls.enable=&quot;true&quot;</text:p>
<text:p text:style-name="P55"><text:s text:c="8" />mail.smtp.socketFactory.class=&quot;javax.net.ssl.SSLSocketFactory&quot;</text:p>
<text:p text:style-name="P56"><text:s text:c="8" />mail.imap.host=&quot;imap.gmail.com&quot;</text:p>
<text:p text:style-name="P57"><text:s text:c="8" />mail.imap.port=&quot;993&quot;</text:p>
<text:p text:style-name="P58"><text:s text:c="8" />mail.transport.protocol=&quot;smtp&quot;</text:p>
<text:p text:style-name="P59"><text:s text:c="8" />mail.store.protocol=&quot;imap&quot;</text:p>
<text:p text:style-name="P60"><text:s text:c="4" />/&gt;</text:p>
<text:p text:style-name="P61">&lt;/Context&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Super! Your mail session is
configured. Next, you need to connect Liferay to the mail session and
database connections you just created.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Configuring
your Database and Mail Session
<text:a xlink:type="simple" xlink:href="id=configuring-your-database-and-mail-session" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">In this section you'll
specify appropriate properties for Liferay to use in connecting to your
database and mail session.</text:p>
<text:list text:style-name="L22">
  <text:list-item>
    <text:p text:style-name="P62">If you are using Tcat to manage your
    data source, add the following line to the
    <text:span text:style-name="T121">portal-ext.properties</text:span>
    file in your
    <text:span text:style-name="T122">Liferay</text:span><text:span text:style-name="T123">
    </text:span><text:span text:style-name="T124">Home</text:span>. This
    points Liferay Portal to your data source:</text:p>
    <text:p text:style-name="P62">jdbc.default.jndi.name=jdbc/LiferayPool</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Otherwise, if you are using
<text:span text:style-name="T125">Liferay</text:span><text:span text:style-name="T126">
</text:span><text:span text:style-name="T127">Portal</text:span> to
manage your data source, follow the instructions in the
<text:span text:style-name="T128">Deploy</text:span><text:span text:style-name="T129">
</text:span><text:span text:style-name="T130">Liferay</text:span>
section for using the setup wizard.</text:p>
<text:list text:style-name="L23">
  <text:list-item>
    <text:p text:style-name="P63">If you want to use Liferay Portal to
    manage your mail session, you can configure the mail session in
    Liferay Portal. After starting your portal as described in the
    <text:span text:style-name="T131">Deploy</text:span><text:span text:style-name="T132">
    </text:span><text:span text:style-name="T133">Liferay</text:span>
    section, go to
    <text:span text:style-name="T134">Control</text:span><text:span text:style-name="T135">
    </text:span><text:span text:style-name="T136">Panel</text:span><text:span text:style-name="T137">
    </text:span><text:span text:style-name="T138">→</text:span><text:span text:style-name="T139">
    </text:span><text:span text:style-name="T140">Server</text:span><text:span text:style-name="T141">
    </text:span><text:span text:style-name="T142">Administration</text:span><text:span text:style-name="T143">
    </text:span><text:span text:style-name="T144">→</text:span><text:span text:style-name="T145">
    </text:span><text:span text:style-name="T146">Mail</text:span> and
    enter the settings for your mail session.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">If you are using Tcat to
manage your mail session, add the following to your
<text:span text:style-name="T147">portal-ext.properties</text:span> file
to reference that mail session:</text:p>
<text:p text:style-name="P64">mail.session.jndi.name=mail/MailSession</text:p>
<text:p text:style-name="First_20_paragraph">Before you deploy Liferay
Portal, let's look at configuring Portal Access Control Lists (PACL)
with Liferay on Tomcat.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Enabling
PACL
<text:a xlink:type="simple" xlink:href="id=enabling-pacl" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">To enable PACL, you need to
enable the security manager and add some required permissions to the
server policy configuration file. This entails editing the
<text:span text:style-name="T148">CATALINA_OPTS</text:span> variable and
editing the
<text:span text:style-name="T149">catalina.policy</text:span>
file:</text:p>
<text:p text:style-name="Text_20_body">In the
<text:span text:style-name="T150">Administration</text:span> tab of the
Tcat Administration Console, click
<text:span text:style-name="T151">Server</text:span><text:span text:style-name="T152">
</text:span><text:span text:style-name="T153">Profiles</text:span> and
click the profile applied to your Liferay Tcat server. Click the
<text:span text:style-name="T154">Value</text:span> field of the
<text:span text:style-name="T155">CATALINA_OPTS</text:span> variable
created earlier, and add the following parameter to it:</text:p>
<text:p text:style-name="P65">`-Djava.security.manager -Djava.security.policy==$CATALINA_BASE/conf/catalina.policy`</text:p>
<text:p text:style-name="First_20_paragraph">The double equals sign
tells the app server to use this policy file on top of any existing
security policies.</text:p>
<text:p text:style-name="Text_20_body">Edit
<text:span text:style-name="T156">$TCAT_HOME/conf/catalina.policy</text:span>
and add the required permissions:</text:p>
<text:p text:style-name="P66"><text:s text:c="4" />grant {</text:p>
<text:p text:style-name="P67"><text:s text:c="8" />permission java.security.AllPermission;</text:p>
<text:p text:style-name="P68"><text:s text:c="4" />};</text:p>
<text:p text:style-name="First_20_paragraph">Now you have PACL enabled
and configured for your portal. Let's deploy Liferay!</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Deploying
Liferay
<text:a xlink:type="simple" xlink:href="id=deploying-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">It's time to deploy Liferay
as an exploded web archive in your
<text:span text:style-name="T157">$TCAT_HOME/webapps</text:span> folder.
The first step is to make sure your Tcat server is running; then follow
these steps to deploy and start Liferay.</text:p>
<text:list text:style-name="L24">
  <text:list-item>
    <text:p text:style-name="P69">If you are manually installing Liferay
    on a clean Tcat server, delete the contents of the
    <text:span text:style-name="T158">[TCAT_HOME]/webapps/ROOT</text:span>
    directory. This removes the default home page.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P69">In the Tcat Administration Console,
    click the <text:span text:style-name="T159">Deployments</text:span>
    tab and select
    <text:span text:style-name="T160">New</text:span><text:span text:style-name="T161">
    </text:span><text:span text:style-name="T162">Deployment</text:span>.
    Select the server where you're deploying Liferay and click
    <text:span text:style-name="T163">Upload</text:span><text:span text:style-name="T164">
    </text:span><text:span text:style-name="T165">New</text:span><text:span text:style-name="T166">
    </text:span><text:span text:style-name="T167">Webapp</text:span>.
    Browse to the
    <text:span text:style-name="T168">liferay-portal-6.2.x-[date].war</text:span>
    file you downloaded. Make sure you select
    <text:span text:style-name="T169">Advanced</text:span><text:span text:style-name="T170">
    </text:span><text:span text:style-name="T171">Options</text:span>
    while uploading Liferay, and under the
    <text:span text:style-name="T172">Name</text:span> field, type
    <text:span text:style-name="T173">/</text:span> to put the extracted
    Liferay into
    <text:span text:style-name="T174">[TCAT_HOME]/webapps/ROOT</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img4"><draw:image xlink:href="../../images/15-tcat-upload-webapp.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:list text:style-name="L25">
  <text:list-item>
    <text:p text:style-name="P70">Once you've entered all the deployment
    details, you can select
    <text:span text:style-name="T175">Deploy</text:span>. Once you see a
    <text:span text:style-name="T176">Successful</text:span> message in
    the Tcat Administration Console, you're ready to launch Liferay
    Portal on Tcat!</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Now you can navigate to
Liferay and follow the setup wizard. Congratulations on successfully
installing and deploying Liferay on Mule Tcat!</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Installing
Liferay on GlassFish 4
<text:a xlink:type="simple" xlink:href="id=installing-liferay-on-glassfish-4" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph"><text:span text:style-name="T177">Liferay</text:span><text:span text:style-name="T178">
</text:span><text:span text:style-name="T179">Home</text:span> is three
folders above your GlassFish domain folder.</text:p>
<text:p text:style-name="Text_20_body">For example, if your domain
location is
<text:span text:style-name="T180">/glassfish-4.0-web/glassfish4/glassfish/domains/domain1</text:span>,
Liferay Home is
<text:span text:style-name="T181">/glassfish-4.0-web/glassfish4/</text:span>.</text:p>
<text:p text:style-name="Text_20_body">If you don't already have an
existing GlassFish server, we recommend that you download a
Liferay/GlassFish bundle from
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/downloads/liferay-portal/available-releases" office:name=""><text:span text:style-name="Definition">http://www.liferay.com/downloads/liferay-portal/available-releases</text:span></text:a>.
If you have an existing GlassFish server or would like to install
Liferay on GlassFish manually, please follow the steps below.</text:p>
<text:p text:style-name="Text_20_body">Before you begin, make sure you
have downloaded the latest Liferay
<text:span text:style-name="T182">.war</text:span> file and Liferay
Portal dependencies from
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/downloads/liferay-portal/additional-files" office:name=""><text:span text:style-name="Definition">http://www.liferay.com/downloads/liferay-portal/additional-files</text:span></text:a>.
The Liferay <text:span text:style-name="T183">.war</text:span> file
should be called
<text:span text:style-name="T184">liferay-portal-6.2.x-&lt;date&gt;.war</text:span>
and the dependencies file should be called
<text:span text:style-name="T185">liferay-portal-dependencies-6.2.x-&lt;date&gt;.zip</text:span>.</text:p>
<text:p text:style-name="Text_20_body">These instructions assume that
you are running the latest supported version of Glassfish (currently
4.0), have already configured a domain and server, and that you have
access to the GlassFish administrative console.</text:p>
<text:p text:style-name="Text_20_body">Let's start out by installing the
JAR files you will need.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Dependency
Jars
<text:a xlink:type="simple" xlink:href="id=dependency-jars" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay depends on jar
files found in the Liferay Dependencies Archive. You should also have
installed your database driver.</text:p>
<text:list text:style-name="L26">
  <text:list-item>
    <text:p text:style-name="P71">Navigate to the folder that
    corresponds to the domain in which you'll be installing Liferay.
    Inside this folder is a sub-folder named
    <text:span text:style-name="T186">lib</text:span> (e.g.
    <text:span text:style-name="T187">/glassfish-3.1-web/glassfish3/glassfish/domains/domain1/lib</text:span>).</text:p>
    <text:p text:style-name="P71">Unzip the Liferay dependencies archive
    so that its <text:span text:style-name="T188">.jar</text:span> files
    are extracted into this
    <text:span text:style-name="T189">lib</text:span> folder.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P71">Make sure the JDBC driver for your
    database is accessible to GlassFish as well. Obtain the JDBC driver
    for your version of the database server. In the case of MySQL, use
    <text:span text:style-name="T190">mysql-connector-java-{$version}-bin.jar</text:span>.
    You can download the latest MySQL JDBC driver from
    <text:a xlink:type="simple" xlink:href="http://www.mysql.com/products/connector/" office:name=""><text:span text:style-name="Definition">http://www.mysql.com/products/connector/</text:span></text:a>.
    Extract the JAR file and copy it to
    <text:span text:style-name="T191">lib</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Terrific, you have your JAR
files just where you need them. Next, we'll configure your
domain.</text:p>
<text:h text:style-name="Heading_20_4" text:outline-level="4">Domain
Configuration
<text:a xlink:type="simple" xlink:href="id=domain-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">There are a couple of
modifications you need to make in your domain to use Liferay
Portal.</text:p>
<text:p text:style-name="Text_20_body">Before starting GlassFish, modify
your domain's configuration to do the following:</text:p>
<text:list text:style-name="L27">
  <text:list-item>
    <text:p text:style-name="P72">Set the file encoding</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P72">Set the user time-zone</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P72">Set the preferred protocol
    stack</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P72">Prevent the application server from
    setting static fields (final or non-final) to
    <text:span text:style-name="T192">null</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P72">Increase the default amount of memory
    available.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Modify
<text:span text:style-name="T193">glassfish4/glassfish/domains/domain1/config/domain.xml</text:span>,
merging in the following JVM options into the current lists of JVM
options within any
<text:span text:style-name="T194">&lt;java-config&gt;</text:span>
element in the file:</text:p>
<text:p text:style-name="P73">&lt;jvm-options&gt;-Dfile.encoding=UTF8&lt;/jvm-options&gt; </text:p>
<text:p text:style-name="P74">&lt;jvm-options&gt;-Djava.net.preferIPv4Stack=true&lt;/jvm-options&gt;</text:p>
<text:p text:style-name="P75">&lt;jvm-options&gt;-Dorg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES=false&lt;/jvm-options&gt;</text:p>
<text:p text:style-name="P76">&lt;jvm-options&gt;-Duser.timezone=GMT&lt;/jvm-options&gt;</text:p>
<text:p text:style-name="P77">&lt;jvm-options&gt;-Xmx1024m&lt;/jvm-options&gt;</text:p>
<text:p text:style-name="P78">&lt;jvm-options&gt;-XX:MaxPermSize=512m&lt;/jvm-options&gt;</text:p>
<text:p text:style-name="First_20_paragraph">There may be multiple lists
of JVM options in your
<text:span text:style-name="T195">domain.xml</text:span> file. For
example, by default, GlassFish's
<text:span text:style-name="T196">glassfish4/glassfish/domains/domain1/config/domain.xml</text:span>
file contains two lists of JVM options. There's one list inside of the
<text:span text:style-name="T197">&lt;config name=&quot;server-config&quot;&gt;</text:span>
element's
<text:span text:style-name="T198">&lt;java-config&gt;</text:span>
element and another inside of the
<text:span text:style-name="T199">&lt;config name=&quot;default-config&quot;&gt;</text:span>
element's
<text:span text:style-name="T200">&lt;java-config&gt;</text:span>
element. In both lists of JVM options, make sure that any existing
options with values such as
<text:span text:style-name="T201">-Dfile.encoding</text:span>,
<text:span text:style-name="T202">-Djava.net.preferIPv4Stack</text:span>,
<text:span text:style-name="T203">-Dorg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES</text:span>,
<text:span text:style-name="T204">-Duser.timezone</text:span>, or
<text:span text:style-name="T205">-XX:MaxPermSize</text:span> are
replaced with the new values listed above.</text:p>
<text:p text:style-name="Text_20_body">For example, replace:</text:p>
<text:p text:style-name="P79">&lt;jvm-options&gt;-Xmx256m&lt;/jvm-options&gt;</text:p>
<text:p text:style-name="First_20_paragraph">with this:</text:p>
<text:p text:style-name="P80">&lt;jvm-options&gt;-Xmx1024m&lt;/jvm-options&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Edit your
<text:span text:style-name="T206">domain1/config/config/server-policy.xml</text:span>
and append the following lines to the end of the file:</text:p>
<text:p text:style-name="P81">grant {</text:p>
<text:p text:style-name="P82"><text:s text:c="4" />permission java.security.AllPermission;</text:p>
<text:p text:style-name="P83">};</text:p>
<text:p text:style-name="First_20_paragraph">Delete, rename, or move the
<text:span text:style-name="T207">domain1/docroot/index.html</text:span>
file to another location to allow your Liferay Portal default page to be
displayed.</text:p>
<text:p text:style-name="Text_20_body">Next, let's get your database
configured.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Database
Configuration
<text:a xlink:type="simple" xlink:href="id=database-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want to use
GlassFish to manage your domain's data source, follow the instructions
found in this section. If you want to use Liferay Portal to manage your
data source, you can skip this section.</text:p>
<text:list text:style-name="L28">
  <text:list-item>
    <text:p text:style-name="P84">Start your domain's application server
    if it is not already running.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Go to the GlassFish console URL:
    <text:a xlink:type="simple" xlink:href="http://localhost:4848/" office:name=""><text:span text:style-name="Definition">http://localhost:4848</text:span></text:a>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Under
    <text:span text:style-name="T208">Common</text:span><text:span text:style-name="T209">
    </text:span><text:span text:style-name="T210">Tasks</text:span>,
    navigate to <text:span text:style-name="T211">Resources</text:span>
    → <text:span text:style-name="T212">JDBC</text:span> →
    <text:span text:style-name="T213">JDBC</text:span><text:span text:style-name="T214">
    </text:span><text:span text:style-name="T215">Connection</text:span><text:span text:style-name="T216">
    </text:span><text:span text:style-name="T217">Pools</text:span></text:p>
    <text:p text:style-name="P84"><draw:frame draw:name="img5"><draw:image xlink:href="../../images/11-glassfish31-connection-pools.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Click
    <text:span text:style-name="T218">New...</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">On the first screen (Step 1 of 2),
    enter the name
    <text:span text:style-name="T219">LiferayPool</text:span> for your
    connection pool, select the
    <text:span text:style-name="T220">javax.sql.ConnectionPoolDataSource</text:span>
    resource type, and select your database driver vendor (e.g.
    <text:span text:style-name="T221">MySQL</text:span>). See the
    following figure:</text:p>
    <text:p text:style-name="P84"><draw:frame draw:name="img6"><draw:image xlink:href="../../images/11-glassfish-31-jdbc-connection-pool.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Click
    <text:span text:style-name="T222">Next</text:span> to advance to the
    next step in creating your JDBC connection pool.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">From the top of this screen (Step 2 of
    2), scroll down to the
    <text:span text:style-name="T223">Additional</text:span><text:span text:style-name="T224">
    </text:span><text:span text:style-name="T225">Properties</text:span>
    section.</text:p>
    <text:p text:style-name="P84"><draw:frame draw:name="img7"><draw:image xlink:href="../../images/11-glassfish-31-jdbc-connection-pool-props.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Replace or add the following
    properties ...</text:p>
    <text:p text:style-name="P84"><text:span text:style-name="T226">Url:</text:span>
    the URL of your connection pool.</text:p>
    <text:p text:style-name="P84">For example,</text:p>
<text:p text:style-name="P85">jdbc:mysql://localhost:3306/lportal?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;emulateLocators=true</text:p>
    <text:p text:style-name="P84">Note, if you are using the above
    example, you should specify the name of your database in place of
    <text:span text:style-name="T227">lportal</text:span>. Likewise, if
    your database is not on the same host as GlassFish, specify your the
    database server's host name in place of
    <text:span text:style-name="T228">localhost</text:span>. Lastly,
    specify your database type in place of
    <text:span text:style-name="T229">jdbc:mysql</text:span> and use the
    correct port (3306 is for MySQL).</text:p>
    <text:p text:style-name="P84"><text:span text:style-name="T230">User:</text:span>
    the name of your database user.</text:p>
    <text:p text:style-name="P84"><text:span text:style-name="T231">Password:</text:span>
    your database user's password.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Click
    <text:span text:style-name="T232">Finish</text:span>.</text:p>
    <text:p text:style-name="P84">You should now see your
    <text:span text:style-name="T233">LiferayPool</text:span> connection
    pool listed under
    <text:span text:style-name="T234">Resources</text:span> →
    <text:span text:style-name="T235">JDBC</text:span> →
    <text:span text:style-name="T236">JDBC</text:span><text:span text:style-name="T237">
    </text:span><text:span text:style-name="T238">Connection</text:span><text:span text:style-name="T239">
    </text:span><text:span text:style-name="T240">Pools</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Test your connection by selecting your
    <text:span text:style-name="T241">LiferayPool</text:span> connection
    pool and clicking
    <text:span text:style-name="T242">Ping</text:span>.</text:p>
    <text:p text:style-name="P84">If you get a message stating
    <text:span text:style-name="T243">Ping</text:span><text:span text:style-name="T244">
    </text:span><text:span text:style-name="T245">Succeeded</text:span>,
    you've succeeded in setting up a connection pool of your data
    source!</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Now, you'll setup a JDBC resource to
    refer to the
    <text:span text:style-name="T246">LiferayPool</text:span> connection
    pool you just created.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Navigate to
    <text:span text:style-name="T247">Resources</text:span> →
    <text:span text:style-name="T248">JDBC</text:span> →
    <text:span text:style-name="T249">JDBC</text:span><text:span text:style-name="T250">
    </text:span><text:span text:style-name="T251">Resources</text:span>
    to show the current JDBC resources listed by their JNDI
    names.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Click
    <text:span text:style-name="T252">New...</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Set the JNDI name to
    <text:span text:style-name="T253">jdbc/LiferayPool</text:span> and
    select <text:span text:style-name="T254">LiferayPool</text:span> as
    the pool name.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P84">Click
    <text:span text:style-name="T255">OK</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Congratulations! You've now
configured your domain's data source on GlassFish!</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Mail
Configuration
<text:a xlink:type="simple" xlink:href="id=mail-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want to use
GlassFish to manage your mail session, follow GlassFish's documentation
on configuring a JavaMail session with a JNDI name of
<text:span text:style-name="T256">mail/MailSession</text:span>. If you
want to use Liferay Portal to manage your mail session, you can skip
this step.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Domain
Configuration - Continued
<text:a xlink:type="simple" xlink:href="id=domain-configuration-continued" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Let's tie up some loose
ends with regards to Liferay being able to access your database and mail
session.</text:p>
<text:list text:style-name="L29">
  <text:list-item>
    <text:p text:style-name="P86">Shutdown your domain's application
    server if it is currently running.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P86">If you are using
    <text:span text:style-name="T257">Glassfish</text:span> to manage
    your data source, create a
    <text:span text:style-name="T258">portal-ext.properties</text:span>
    file in the
    <text:span text:style-name="T259">Liferay</text:span><text:span text:style-name="T260">
    </text:span><text:span text:style-name="T261">Home</text:span>
    folder mentioned at the beginning of this GlassFish installation
    section and add the following to your
    <text:span text:style-name="T262">portal-ext.properties</text:span>
    file in your
    <text:span text:style-name="T263">Liferay</text:span><text:span text:style-name="T264">
    </text:span><text:span text:style-name="T265">Home</text:span> to
    refer to your data source:</text:p>
<text:p text:style-name="P87">jdbc.default.jndi.name=jdbc/LiferayPool</text:p>
    <text:p text:style-name="P86">Otherwise, if you are using
    <text:span text:style-name="T266">Liferay</text:span><text:span text:style-name="T267">
    </text:span><text:span text:style-name="T268">Portal</text:span> to
    manage your data source, follow the instructions in the
    <text:span text:style-name="T269">Deploy</text:span><text:span text:style-name="T270">
    </text:span><text:span text:style-name="T271">Liferay</text:span>
    section for using the setup wizard.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P86">If want to use
    <text:span text:style-name="T272">Liferay</text:span><text:span text:style-name="T273">
    </text:span><text:span text:style-name="T274">Portal</text:span> to
    manage your mail session, you can configure the mail session within
    Liferay Portal. That is, after starting your portal as described in
    the
    <text:span text:style-name="T275">Deploy</text:span><text:span text:style-name="T276">
    </text:span><text:span text:style-name="T277">Liferay</text:span>
    section, go to
    <text:span text:style-name="T278">Control</text:span><text:span text:style-name="T279">
    </text:span><text:span text:style-name="T280">Panel</text:span><text:span text:style-name="T281">
    </text:span><text:span text:style-name="T282">→</text:span><text:span text:style-name="T283">
    </text:span><text:span text:style-name="T284">Server</text:span><text:span text:style-name="T285">
    </text:span><text:span text:style-name="T286">Administration</text:span><text:span text:style-name="T287">
    </text:span><text:span text:style-name="T288">→</text:span><text:span text:style-name="T289">
    </text:span><text:span text:style-name="T290">Mail</text:span> and
    enter the settings for your mail session.</text:p>
    <text:p text:style-name="P86">Otherwise, if you are using
    <text:span text:style-name="T291">GlassFish</text:span> to manage
    your mail session, add the following to your
    <text:span text:style-name="T292">portal-ext.properties</text:span>
    file to reference that mail session:</text:p>
<text:p text:style-name="P88">mail.session.jndi.name=mail/MailSession</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Liferay will now be able to
communicate with your database and mail session.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">PACL
Configuration
<text:a xlink:type="simple" xlink:href="id=pacl-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">To enable PACL on
GlassFish, you need to make some security configurations. First, enable
the security manager by editing
<text:span text:style-name="T293">glassfish/domains/domain1/config/domain.xml</text:span>
and make sure it contains the following:</text:p>
<text:p text:style-name="P89">&lt;java-config ...&gt;</text:p>
<text:p text:style-name="P90"><text:s text:c="4" />...</text:p>
<text:p text:style-name="P91"><text:s text:c="4" />&lt;jvm-options&gt;-Djava.security.manager&lt;/jvm-options&gt;</text:p>
<text:p text:style-name="P92"><text:s text:c="4" />...</text:p>
<text:p text:style-name="P93">&lt;/java-config&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Next, add the required
permissions to the server policy configuration file:
<text:span text:style-name="T294">glassfish/domains/domain1/config/server.policy</text:span>.
These include the following:</text:p>
<text:p text:style-name="P94">grant {</text:p>
<text:p text:style-name="P95"><text:s text:c="4" />permission java.security.AllPermission;</text:p>
<text:p text:style-name="P96">};</text:p>
<text:p text:style-name="First_20_paragraph">Now let's go ahead and
deploy Liferay.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Deploy
Liferay
<text:a xlink:type="simple" xlink:href="id=deploy-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:list text:style-name="L30">
  <text:list-item>
    <text:p text:style-name="P97">Start your domain's application
    server.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P97">Go to the GlassFish console URL:
    <text:a xlink:type="simple" xlink:href="http://localhost:4848/" office:name=""><text:span text:style-name="Definition">http://localhost:4848</text:span></text:a></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P97">Click
    <text:span text:style-name="T295">Applications</text:span> in the
    tree on the left.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P97">Click
    <text:span text:style-name="T296">Deploy</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P97">Under
    <text:span text:style-name="T297">Packaged</text:span><text:span text:style-name="T298">
    </text:span><text:span text:style-name="T299">File</text:span><text:span text:style-name="T300">
    </text:span><text:span text:style-name="T301">to</text:span><text:span text:style-name="T302">
    </text:span><text:span text:style-name="T303">Be</text:span><text:span text:style-name="T304">
    </text:span><text:span text:style-name="T305">Uploaded</text:span><text:span text:style-name="T306">
    </text:span><text:span text:style-name="T307">to</text:span><text:span text:style-name="T308">
    </text:span><text:span text:style-name="T309">the</text:span><text:span text:style-name="T310">
    </text:span><text:span text:style-name="T311">Server</text:span>,
    click
    <text:span text:style-name="T312">Choose</text:span><text:span text:style-name="T313">
    </text:span><text:span text:style-name="T314">File</text:span> and
    browse to the location of the Liferay Portal
    <text:span text:style-name="T315">.war</text:span> file. Enter
    <text:span text:style-name="T316">Context</text:span><text:span text:style-name="T317">
    </text:span><text:span text:style-name="T318">Root:</text:span>
    <text:span text:style-name="T319">/</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P97">Enter
    <text:span text:style-name="T320">Application</text:span><text:span text:style-name="T321">
    </text:span><text:span text:style-name="T322">Name:</text:span>
    <text:span text:style-name="T323">liferay-portal</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P97">Click
    <text:span text:style-name="T324">OK</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img8"><draw:image xlink:href="../../images/11-deploying-liferay-in-glassfish-4.0.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Once you have deployed Liferay
via GlassFish's administrative console, restart GlassFish.</text:p>
<text:p text:style-name="Text_20_body">Your installation of Liferay
Portal on GlassFish is complete!</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Installing
Liferay on JBoss 7.1
<text:a xlink:type="simple" xlink:href="id=installing-liferay-on-jboss-7-1" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph"><text:span text:style-name="T325">Liferay</text:span><text:span text:style-name="T326">
</text:span><text:span text:style-name="T327">Home</text:span> is one
folder above JBoss's install location.</text:p>
<text:list text:style-name="L31">
  <text:list-item>
    <text:p text:style-name="P98">Download and install JBoss AS 7.1.x
    into your preferred directory. This directory is referred to as
    <text:span text:style-name="T328">$JBOSS_HOME</text:span> throughout
    this section.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P98">Download the latest version of the
    Liferay Portal <text:span text:style-name="T329">.war</text:span>
    file.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P98">Download Liferay's Portal
    Dependencies.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Now that you have all of
your installation files, you are ready to start installing and
configuring Liferay on JBoss.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Dependency
Jars
<text:a xlink:type="simple" xlink:href="id=dependency-jars" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Let's work with the
dependency jar files first.</text:p>
<text:list text:style-name="L32">
  <text:list-item>
    <text:p text:style-name="P99">Create folder
    <text:span text:style-name="T330">$JBOSS_HOME/modules/com/liferay/portal/main</text:span>
    and unzip the jar files found in the Liferay Portal Dependencies zip
    file to this folder. Make sure the zip file's jar files are
    extracted into the
    <text:span text:style-name="T331">$JBOSS_HOME/modules/com/liferay/portal/main</text:span>
    folder.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P99">Download your database driver
    <text:span text:style-name="T332">.jar</text:span> file and put it
    into the
    <text:span text:style-name="T333">$JBOSS_HOME/modules/com/liferay/portal/main</text:span>
    folder as well. To use MySQL, we'll download the MySQL Connector/J
    driver from
    <text:a xlink:type="simple" xlink:href="http://dev.mysql.com/downloads/connector/j/" office:name=""><text:span text:style-name="Definition">http://dev.mysql.com/downloads/connector/j/</text:span></text:a>
    and put its <text:span text:style-name="T334">.jar</text:span> file
    into the
    <text:span text:style-name="T335">$JBOSS_HOME/modules/com/liferay/portal/main</text:span>
    folder.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P99">Create the file
    <text:span text:style-name="T336">module.xml</text:span> in the
    <text:span text:style-name="T337">$JBOSS_HOME/modules/com/liferay/portal/main</text:span>
    folder and insert the following contents.</text:p>
<text:p text:style-name="P100">&lt;?xml version=&quot;1.0&quot;?&gt;</text:p>
<text:p text:style-name="P101"></text:p>
<text:p text:style-name="P102">&lt;module xmlns=&quot;urn:jboss:module:1.0&quot; name=&quot;com.liferay.portal&quot;&gt;</text:p>
<text:p text:style-name="P103"><text:s text:c="4" />&lt;resources&gt;</text:p>
<text:p text:style-name="P104"><text:s text:c="8" />&lt;resource-root path=&quot;mysql-connector-java-[version]-bin.jar&quot; /&gt;</text:p>
<text:p text:style-name="P105"><text:s text:c="8" />&lt;resource-root path=&quot;portal-service.jar&quot; /&gt;</text:p>
<text:p text:style-name="P106"><text:s text:c="8" />&lt;resource-root path=&quot;portlet.jar&quot; /&gt;</text:p>
<text:p text:style-name="P107"><text:s text:c="4" />&lt;/resources&gt;</text:p>
<text:p text:style-name="P108"><text:s text:c="4" />&lt;dependencies&gt;</text:p>
<text:p text:style-name="P109"><text:s text:c="8" />&lt;module name=&quot;ibm.jdk&quot; /&gt;</text:p>
<text:p text:style-name="P110"><text:s text:c="8" />&lt;module name=&quot;javax.api&quot; /&gt;</text:p>
<text:p text:style-name="P111"><text:s text:c="8" />&lt;module name=&quot;javax.mail.api&quot; /&gt;</text:p>
<text:p text:style-name="P112"><text:s text:c="8" />&lt;module name=&quot;javax.servlet.api&quot; /&gt;</text:p>
<text:p text:style-name="P113"><text:s text:c="8" />&lt;module name=&quot;javax.servlet.jsp.api&quot; /&gt;</text:p>
<text:p text:style-name="P114"><text:s text:c="8" />&lt;module name=&quot;javax.transaction.api&quot; /&gt;</text:p>
<text:p text:style-name="P115"><text:s text:c="4" />&lt;/dependencies&gt;</text:p>
<text:p text:style-name="P116">&lt;/module&gt;</text:p>
    <text:p text:style-name="P99">Make sure to replace
    <text:span text:style-name="T338">[version]</text:span> with the
    correct version of the MySQL JDBC driver. If you are using a
    different database, replace the MySQL jar with the driver jar for
    your database.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P99">Next, you'll need to include a patch
    from Liferay's source code for one of JBoss' default
    <text:span text:style-name="T339">.jar</text:span> files. Once
    you've downloaded the Liferay source, unzip the source into a
    temporary folder. We'll refer to the location of the Liferay source
    as
    <text:span text:style-name="T340">$LIFERAY_SOURCE</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P99">Currently, there are bugs in the
    <text:span text:style-name="T341">$JBOSS_HOME/modules/org/jboss/as/server/main/jboss-as-&lt;$JBOSS_VERSION&gt;.Final.jar</text:span>
    file regarding the IBM JVM
    (<text:a xlink:type="simple" xlink:href="http://issues.liferay.com/browse/LPS-39705" office:name=""><text:span text:style-name="Definition">LPS-39705</text:span></text:a>
    and
    <text:a xlink:type="simple" xlink:href="http://issues.jboss.org/browse/JBPAPP-9353" office:name=""><text:span text:style-name="Definition">JBPAPP-9353</text:span></text:a>)
    which requires additional steps to ensure a successful deployment
    with Liferay. In summary, you'll need to update the
    <text:span text:style-name="T342">ServerDependenciesProcessor.class</text:span>
    file in the
    <text:span text:style-name="T343">jboss-as-&lt;$JBOSS_VERSION&gt;.Final.jar</text:span>
    file to specify the IBM JDK. The steps to insert the patch can be
    referenced below.</text:p>
    <text:list>
      <text:list-item>
        <text:p text:style-name="P116">Cut and paste the
        <text:span text:style-name="T344">jboss-as-[$JBOSS_VERSION].Final.jar</text:span>
        file from
        <text:span text:style-name="T345">$JBOSS_HOME/modules/org/jboss/as/server/main</text:span>
        to the
        <text:span text:style-name="T346">$LIFERAY_SOURCE/tools/servers/jboss/patches/JBPAPP-9353/classes</text:span>
        folder.</text:p>
      </text:list-item>
      <text:list-item>
        <text:p text:style-name="P116">Navigate to the
        <text:span text:style-name="T347">$LIFERAY_SOURCE/tools/servers/jboss/patches/JBPAPP-9353/classes</text:span>
        directory in a command prompt and enter the following
        statement:</text:p>
<text:p text:style-name="P117">jar uf jboss-as-server-[$JBOSS_VERSION].Final.jar org/jboss/as/server/deployment/module/ServerDependenciesProcessor.class</text:p>
        <text:p text:style-name="P116">This command inserts the
        <text:span text:style-name="T348">ServerDependenciesProcessor.class</text:span>
        file into the
        <text:span text:style-name="T349">jboss-as-[$JBOSS_VERSION].Final.jar</text:span>
        file's
        <text:span text:style-name="T350">org/jboss/as/server/deployment/module</text:span>
        folder. You can reference the official documentation for
        updating a JAR file at
        <text:a xlink:type="simple" xlink:href="http://docs.oracle.com/javase/tutorial/deployment/jar/update.html" office:name=""><text:span text:style-name="Definition">http://docs.oracle.com/javase/tutorial/deployment/jar/update.html</text:span></text:a>.</text:p>
      </text:list-item>
      <text:list-item>
        <text:p text:style-name="P116">Cut and paste the
        <text:span text:style-name="T351">jboss-as-[$JBOSS_VERSION].Final.jar</text:span>
        file back to its original
        <text:span text:style-name="T352">$JBOSS_HOME/modules/org/jboss/as/server/main</text:span>
        folder.</text:p>
      </text:list-item>
    </text:list>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Great! You have your
<text:span text:style-name="T353">.jar</text:span> files ready for your
domain.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Running
Liferay on JBoss 7.1 in Standalone Mode vs. Domain Mode
<text:a xlink:type="simple" xlink:href="id=running-liferay-on-jboss-7-1-in-standalone-mode-vs-domain-mode" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">JBoss 7.1 can be launched
in either <text:span text:style-name="T354">standalone</text:span> mode
or <text:span text:style-name="T355">domain</text:span> mode. Domain
mode allows multiple application server instances to be managed from a
single control point. A collection of such application servers is known
as a <text:span text:style-name="T356">domain</text:span>. For more
information on standalone mode vs. domain mode, please refer to the
section on this topic in the
<text:a xlink:type="simple" xlink:href="https://docs.jboss.org/author/display/AS71/Admin+Guide#AdminGuide-Operatingmodes" office:name=""><text:span text:style-name="Definition">JBoss
7.1 Admin Guide</text:span></text:a>. Liferay fully supports JBoss 7.1
when it runs in standalone mode but not when it runs in domain
mode.</text:p>
<text:p text:style-name="Text_20_body">You can run Liferay on JBoss 7.1
in domain mode, but this method is not fully supported. In particular,
Liferay's hot-deploy does not work since JBoss 7.1 cannot deploy
non-exploded <text:span text:style-name="T357">.war</text:span> files in
domain mode. The <text:span text:style-name="T358">.war</text:span>
files are located in the
<text:span text:style-name="T359">domain/data/content</text:span>
directory. Deployments are only possible using the command line
interface. This prevents many Liferay plugins from working as intended.
For example, JSP hooks don't work on JBoss 7.1 running in domain mode
since Liferay's JSP override mechanism relies on the application server
reloading customized JSP files from the exploded plugin
<text:span text:style-name="T360">.war</text:span> file location. Other
plugins, such as service or action hooks, should still work properly
since they don't require JBoss to access anything (such as JSP files)
from an exploded <text:span text:style-name="T361">.war</text:span> file
on the file system.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T362">Note:</text:span>
This does not prevent Liferay from running in a clustered environment on
multiple JBoss servers. You can set up a cluster of Liferay instances
running on JBoss 7.1 servers running in standalone mode. Please refer to
the chapter of this guide on
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/configuring-liferay-for-high-availabili-liferay-portal-6-2-user-guide-20-en" office:name=""><text:span text:style-name="Definition">Configuring
Liferay for High Availability</text:span></text:a> for information on
setting up a Liferay cluster.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:p text:style-name="Text_20_body">For multi-server production
environments, the choice of running a managed domain versus standalone
servers comes down to whether you want to use the centralized management
capabilities a managed domain provides. Running a standalone server is
better suited for most development scenarios. Any individual server
configuration that can be achieved in a managed domain can also be
achieved in a standalone server. Even if the application being developed
will eventually run in production on a managed domain installation, most
development can be done using a standalone server. Therefore, the best
practice when running Liferay on JBoss 7.1 is to use standalone
mode.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Configuring
JBoss
<text:a xlink:type="simple" xlink:href="id=configuring-jboss" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Let's make some adjustments
in your configuration to support using Liferay.</text:p>
<text:p text:style-name="Text_20_body">You can specify the JBoss server
instance's configuration in the XML file
<text:span text:style-name="T363">$JBOSS_HOME/standalone/configuration/standalone.xml</text:span>.
We'll refer to this file simply as
<text:span text:style-name="T364">standalone.xml</text:span>. You must
also make some modifications to your configuration and startup scripts
found in the
<text:span text:style-name="T365">$JBOSS_HOME/bin/</text:span> folder.
Lastly, you'll need to make some modifications in your
<text:span text:style-name="T366">$JBOSS_HOME/modules/</text:span>.
Let's start with the changes to
<text:span text:style-name="T367">standalone.xml</text:span>.</text:p>
<text:p text:style-name="Text_20_body">Make the following modifications
to
<text:span text:style-name="T368">standalone.xml</text:span>:</text:p>
<text:list text:style-name="L33">
  <text:list-item>
    <text:p text:style-name="P118">Add the following system properties
    between the
    <text:span text:style-name="T369">&lt;/extensions&gt;</text:span>
    and <text:span text:style-name="T370">&lt;management&gt;</text:span>
    tags:</text:p>
<text:p text:style-name="P119">&lt;system-properties&gt;</text:p>
<text:p text:style-name="P120"><text:s text:c="4" />&lt;property name=&quot;org.apache.catalina.connector.URI_ENCODING&quot; value=&quot;UTF-8&quot; /&gt;</text:p>
<text:p text:style-name="P121"><text:s text:c="4" />&lt;property name=&quot;org.apache.catalina.connector.USE_BODY_ENCODING_FOR_QUERY_STRING&quot; value=&quot;true&quot; /&gt;</text:p>
<text:p text:style-name="P122">&lt;/system-properties&gt;</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P118">Add a timeout for the deployment
    scanner by setting
    <text:span text:style-name="T371">deployment-timeout=&quot;240&quot;</text:span>
    as seen in the excerpt below.</text:p>
<text:p text:style-name="P123">&lt;subsystem xmlns=&quot;urn:jboss:domain:deployment-scanner:1.1&quot;&gt;</text:p>
<text:p text:style-name="P124"><text:s text:c="4" />&lt;deployment-scanner deployment-timeout=&quot;240&quot; path=&quot;deployments&quot; relative-to=&quot;jboss.server.base.dir&quot; scan-interval=&quot;5000&quot;/&gt;</text:p>
<text:p text:style-name="P125">&lt;/subsystem&gt;</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P118">Add the following JAAS security
    domain to the security subsystem
    <text:span text:style-name="T372">&lt;security-domains&gt;</text:span>
    defined in element
    <text:span text:style-name="T373">&lt;subsystem xmlns=&quot;urn:jboss:domain:security:1.1&quot;&gt;</text:span>.</text:p>
<text:p text:style-name="P126">&lt;security-domain name=&quot;PortalRealm&quot;&gt;</text:p>
<text:p text:style-name="P127"><text:s text:c="4" />&lt;authentication&gt;</text:p>
<text:p text:style-name="P128"><text:s text:c="8" />&lt;login-module code=&quot;com.liferay.portal.security.jaas.PortalLoginModule&quot; flag=&quot;required&quot; /&gt;</text:p>
<text:p text:style-name="P129"><text:s text:c="4" />&lt;/authentication&gt;</text:p>
<text:p text:style-name="P130">&lt;/security-domain&gt;</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P118">Disable the welcome root of the web
    subsystem's virtual server default host by specifying
    <text:span text:style-name="T374">enable-welcome-root=&quot;false&quot;</text:span>.</text:p>
<text:p text:style-name="P131">&lt;subsystem xmlns=&quot;urn:jboss:domain:web:1.1&quot; default-virtual-server=&quot;default-host&quot;&gt;</text:p>
<text:p text:style-name="P132"><text:s text:c="4" />&lt;connector name=&quot;http&quot; protocol=&quot;HTTP/1.1&quot; scheme=&quot;http&quot; socket-binding=&quot;http&quot;/&gt;</text:p>
<text:p text:style-name="P133"><text:s text:c="4" />&lt;virtual-server name=&quot;default-host&quot; enable-welcome-root=&quot;false&quot;&gt;</text:p>
<text:p text:style-name="P134"><text:s text:c="7" />&lt;alias name=&quot;localhost&quot; /&gt;</text:p>
<text:p text:style-name="P135"><text:s text:c="7" />&lt;alias name=&quot;example.com&quot; /&gt;</text:p>
<text:p text:style-name="P136"><text:s text:c="4" />&lt;/virtual-server&gt;</text:p>
<text:p text:style-name="P137">&lt;/subsystem&gt; <text:s text:c="7" /></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P118">Insert the following
    <text:span text:style-name="T375">&lt;configuration&gt;</text:span>
    element within the web subsystem element
    <text:span text:style-name="T376">&lt;subsystem xmlns=&quot;urn:jboss:domain:web:1.1&quot; default-virtual-server=&quot;default-host&quot; native=&quot;false&quot;&gt;</text:span>.</text:p>
<text:p text:style-name="P138">&lt;configuration&gt;</text:p>
<text:p text:style-name="P139"><text:s text:c="4" />&lt;jsp-configuration development=&quot;true&quot; /&gt;</text:p>
<text:p text:style-name="P140">&lt;/configuration&gt;</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Now it's time for some
changes to your configuration and startup scripts.</text:p>
<text:p text:style-name="Text_20_body">Make the following modifications
to your standalone domain's configuration script file
<text:span text:style-name="T377">standalone.conf</text:span>
(<text:span text:style-name="T378">standalone.conf.bat</text:span> on
Windows) found in your
<text:span text:style-name="T379">$JBOSS_HOME/bin/</text:span>
folder.</text:p>
<text:p text:style-name="Text_20_body">These modifications change the
following options: - Set the file encoding - Set the user time-zone -
Set the preferred protocol stack - Increase the default amount of memory
available.</text:p>
<text:p text:style-name="Text_20_body">Make the following edits as
applicable to your operating system:</text:p>
<text:list text:style-name="L34">
  <text:list-item>
    <text:p text:style-name="P141">On Windows, comment out the initial
    <text:span text:style-name="T380">JAVA_OPTS</text:span> assignment
    as demonstrated in the following line:</text:p><text:p text:style-name="P142">rem set &quot;JAVA_OPTS=-Xms64M -Xmx512M -XX:MaxPermSize=256M&quot;</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Then add the following
<text:span text:style-name="T381">JAVA_OPTS</text:span> assignment one
line above the
<text:span text:style-name="T382">:JAVA_OPTS_SET</text:span> line found
at end of the file:</text:p>
<text:p text:style-name="P143"><text:s text:c="4" />set &quot;JAVA_OPTS=%JAVA_OPTS% -Dfile.encoding=UTF-8 -Djava.net.preferIPv4Stack=true -Djava.security.manager -Djava.security.policy=$JBOSS_HOME/bin/server.policy -Djboss.home.dir=$JBOSS_HOME -Duser.timezone=GMT -Xmx1024m -XX:MaxPermSize=256m&quot;</text:p>
<text:list text:style-name="L35">
  <text:list-item>
    <text:p text:style-name="P144">On Unix, merge the following values
    into your settings for
    <text:span text:style-name="T383">JAVA_OPTS</text:span> replacing
    any matching attributes with the ones found in the assignment
    below:</text:p><text:p text:style-name="P145">JAVA_OPTS=&quot;$JAVA_OPTS -Dfile.encoding=UTF-8 -Djava.net.preferIPv4Stack=true -Djava.security.manager -Djava.security.policy=$JBOSS_HOME/bin/server.policy -Djboss.home.dir=$JBOSS_HOME -Duser.timezone=GMT -Xmx1024m -XX:MaxPermSize=256m</text:p><text:p text:style-name="P144">Make
    sure you replace the
    <text:span text:style-name="T384">$JBOSS_HOME</text:span> references
    with the appropriate directory. You'll notice we've added some Java
    security options. We'll finish configuring the Java security options
    in the
    <text:span text:style-name="T385">Security</text:span><text:span text:style-name="T386">
    </text:span><text:span text:style-name="T387">Configuration</text:span>
    section.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">The prescribed script
modifications are now complete for your Liferay installation on
JBoss.</text:p>
<text:p text:style-name="Text_20_body">Lastly, let's make the necessary
changes in your
<text:span text:style-name="T388">$JBOSS_HOME/modules</text:span>
directory.</text:p>
<text:list text:style-name="L36">
  <text:list-item>
    <text:p text:style-name="P146">Create folder
    <text:span text:style-name="T389">$JBOSS_HOME/modules/ibm/jdk/main</text:span>
    and create and insert a new
    <text:span text:style-name="T390">module.xml</text:span> file into
    that folder.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P146">Insert the following contents into
    the
    <text:span text:style-name="T391">$JBOSS_HOME/modules/ibm/jdk/main/module.xml</text:span>
    file:</text:p>
<text:p text:style-name="P147">&lt;?xml version=&quot;1.0&quot;?&gt;</text:p>
<text:p text:style-name="P148"></text:p>
<text:p text:style-name="P149">&lt;module xmlns=&quot;urn:jboss:module:1.1&quot; name=&quot;ibm.jdk&quot;&gt;</text:p>
<text:p text:style-name="P150"><text:s text:c="4" />&lt;dependencies&gt;</text:p>
<text:p text:style-name="P151"><text:s text:c="8" />&lt;system export=&quot;true&quot;&gt;</text:p>
<text:p text:style-name="P152"><text:s text:c="12" />&lt;paths&gt;</text:p>
<text:p text:style-name="P153"><text:s text:c="16" />&lt;path name=&quot;com/ibm&quot; /&gt;</text:p>
<text:p text:style-name="P154"><text:s text:c="16" />&lt;path name=&quot;com/ibm/crypto/provider&quot; /&gt;</text:p>
<text:p text:style-name="P155"><text:s text:c="16" />&lt;path name=&quot;com/ibm/jvm&quot; /&gt;</text:p>
<text:p text:style-name="P156"><text:s text:c="16" />&lt;path name=&quot;com/ibm/jvm/io&quot; /&gt;</text:p>
<text:p text:style-name="P157"><text:s text:c="16" />&lt;path name=&quot;com/ibm/jvm/util&quot; /&gt;</text:p>
<text:p text:style-name="P158"><text:s text:c="16" />&lt;path name=&quot;com/ibm/match&quot; /&gt;</text:p>
<text:p text:style-name="P159"><text:s text:c="16" />&lt;path name=&quot;com/ibm/misc&quot; /&gt;</text:p>
<text:p text:style-name="P160"><text:s text:c="16" />&lt;path name=&quot;com/ibm/net&quot; /&gt;</text:p>
<text:p text:style-name="P161"><text:s text:c="16" />&lt;path name=&quot;com/ibm/nio&quot; /&gt;</text:p>
<text:p text:style-name="P162"><text:s text:c="16" />&lt;path name=&quot;com/ibm/nio/ch&quot; /&gt;</text:p>
<text:p text:style-name="P163"><text:s text:c="16" />&lt;path name=&quot;com/ibm/security/auth&quot; /&gt;</text:p>
<text:p text:style-name="P164"><text:s text:c="16" />&lt;path name=&quot;com/ibm/security/bootstrap&quot; /&gt;</text:p>
<text:p text:style-name="P165"><text:s text:c="16" />&lt;path name=&quot;com/ibm/security/auth/module&quot; /&gt;</text:p>
<text:p text:style-name="P166"><text:s text:c="16" />&lt;path name=&quot;com/ibm/security/util&quot; /&gt;</text:p>
<text:p text:style-name="P167"><text:s text:c="16" />&lt;path name=&quot;META-INF/services&quot; /&gt;</text:p>
<text:p text:style-name="P168"><text:s text:c="12" />&lt;/paths&gt;</text:p>
<text:p text:style-name="P169"><text:s text:c="8" />&lt;/system&gt;</text:p>
<text:p text:style-name="P170"><text:s text:c="4" />&lt;/dependencies&gt;</text:p>
<text:p text:style-name="P171">&lt;/module&gt;</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P146">Navigate to the
    <text:span text:style-name="T392">$JBOSS_HOME/modules/sun/jdk/main/module.xml</text:span>
    file and insert the following path names inside the
    &lt;paths&gt;...&lt;/paths&gt; element:</text:p>
<text:p text:style-name="P172">&lt;path name=&quot;com/sun/crypto&quot; /&gt;</text:p>
<text:p text:style-name="P173">&lt;path name=&quot;com/sun/crypto/provider&quot; /&gt;</text:p>
<text:p text:style-name="P174">&lt;path name=&quot;com/sun/image/codec/jpeg&quot; /&gt;</text:p>
<text:p text:style-name="P175">&lt;path name=&quot;com/sun/org/apache/xml/internal/resolver&quot; /&gt;</text:p>
<text:p text:style-name="P176">&lt;path name=&quot;com/sun/org/apache/xml/internal/resolver/tools&quot; /&gt;</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Next we'll consider the
database and mail configuration.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Database
Configuration
<text:a xlink:type="simple" xlink:href="id=database-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want JBoss to manage
your data source, follow the instructions in this section. If you want
to use the built-in Liferay data source, you can skip this
section.</text:p>
<text:p text:style-name="Text_20_body">Modify
<text:span text:style-name="T393">standalone.xml</text:span> adding your
data source and driver within the
<text:span text:style-name="T394">&lt;datasources&gt;</text:span>
element of your data sources subsystem.</text:p>
<text:list text:style-name="L37">
  <text:list-item>
    <text:p text:style-name="P177">First, add your data source within
    the
    <text:span text:style-name="T395">&lt;datasources&gt;</text:span>
    element.</text:p>
<text:p text:style-name="P178">&lt;datasource jndi-name=&quot;java:/jdbc/LiferayPool&quot; pool-name=&quot;LiferayPool&quot; enabled=&quot;true&quot; jta=&quot;true&quot; use-java-context=&quot;true&quot; use-ccm=&quot;true&quot;&gt;</text:p>
<text:p text:style-name="P179"><text:s text:c="4" />&lt;connection-url&gt;jdbc:mysql://localhost/lportal&lt;/connection-url&gt;</text:p>
<text:p text:style-name="P180"><text:s text:c="4" />&lt;driver&gt;mysql&lt;/driver&gt;</text:p>
<text:p text:style-name="P181"><text:s text:c="4" />&lt;security&gt;</text:p>
<text:p text:style-name="P182"><text:s text:c="8" />&lt;user-name&gt;root&lt;/user-name&gt;</text:p>
<text:p text:style-name="P183"><text:s text:c="8" />&lt;password&gt;root&lt;/password&gt;</text:p>
<text:p text:style-name="P184"><text:s text:c="4" />&lt;/security&gt;</text:p>
<text:p text:style-name="P185">&lt;/datasource&gt;</text:p>
    <text:p text:style-name="P177">Be sure to replace the URL database
    value (i.e. <text:span text:style-name="T396">lportal</text:span>),
    user value and password value with values specific to your
    database.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P177">Then add your driver to the
    <text:span text:style-name="T397">&lt;drivers&gt;</text:span>
    element also found within the
    <text:span text:style-name="T398">&lt;datasources&gt;</text:span>
    element.</text:p>
<text:p text:style-name="P186">&lt;drivers&gt;</text:p>
<text:p text:style-name="P187"><text:s text:c="4" />&lt;driver name=&quot;mysql&quot; module=&quot;com.liferay.portal&quot;/&gt;</text:p>
<text:p text:style-name="P188">&lt;/drivers&gt;</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Your final data sources
subsystem should look like this:</text:p>
<text:p text:style-name="P189"><text:s text:c="4" />&lt;subsystem xmlns=&quot;urn:jboss:domain:datasources:1.0&quot;&gt;</text:p>
<text:p text:style-name="P190"><text:s text:c="8" />&lt;datasources&gt;</text:p>
<text:p text:style-name="P191"><text:s text:c="12" />&lt;datasource jndi-name=&quot;java:/jdbc/LiferayPool&quot; pool-name=&quot;LiferayPool&quot; enabled=&quot;true&quot; jta=&quot;true&quot; use-java-context=&quot;true&quot; use-ccm=&quot;true&quot;&gt;</text:p>
<text:p text:style-name="P192"><text:s text:c="16" />&lt;connection-url&gt;jdbc:mysql://localhost/lportal&lt;/connection-url&gt;</text:p>
<text:p text:style-name="P193"><text:s text:c="16" />&lt;driver&gt;mysql&lt;/driver&gt;</text:p>
<text:p text:style-name="P194"><text:s text:c="16" />&lt;security&gt;</text:p>
<text:p text:style-name="P195"><text:s text:c="20" />&lt;user-name&gt;root&lt;/user-name&gt;</text:p>
<text:p text:style-name="P196"><text:s text:c="20" />&lt;password&gt;root&lt;/password&gt;</text:p>
<text:p text:style-name="P197"><text:s text:c="16" />&lt;/security&gt;</text:p>
<text:p text:style-name="P198"><text:s text:c="12" />&lt;/datasource&gt;</text:p>
<text:p text:style-name="P199"><text:s text:c="12" />&lt;drivers&gt;</text:p>
<text:p text:style-name="P200"><text:s text:c="16" />&lt;driver name=&quot;mysql&quot; module=&quot;com.liferay.portal&quot;/&gt;</text:p>
<text:p text:style-name="P201"><text:s text:c="12" />&lt;/drivers&gt;</text:p>
<text:p text:style-name="P202"><text:s text:c="8" />&lt;/datasources&gt;</text:p>
<text:p text:style-name="P203"><text:s text:c="4" />&lt;/subsystem&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Now that you've configured
your data source, let's go over how to configure your mail session
within JBoss.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Mail
Configuration
<text:a xlink:type="simple" xlink:href="id=mail-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want JBoss to manage
your mail session, use the following instructions. If you want to use
the built-in Liferay mail session, you can skip this section.</text:p>
<text:p text:style-name="Text_20_body">Specify your mail subsystem in
<text:span text:style-name="T399">standalone.xml</text:span> as in the
following example:</text:p>
<text:p text:style-name="P204">&lt;subsystem xmlns=&quot;urn:jboss:domain:mail:1.0&quot;&gt;</text:p>
<text:p text:style-name="P205"><text:s text:c="4" />&lt;mail-session jndi-name=&quot;java:/mail/MailSession&quot; &gt;</text:p>
<text:p text:style-name="P206"><text:s text:c="8" />&lt;smtp-server ssl=&quot;true&quot; outbound-socket-binding-ref=&quot;mail-smtp&quot;&gt;</text:p>
<text:p text:style-name="P207"><text:s text:c="15" />&lt;login name=&quot;username&quot; password=&quot;password&quot;/&gt;</text:p>
<text:p text:style-name="P208"><text:s text:c="8" />&lt;/smtp-server&gt;</text:p>
<text:p text:style-name="P209"><text:s text:c="8" />&lt;pop3-server outbound-socket-binding-ref=&quot;mail-pop&quot;&gt;</text:p>
<text:p text:style-name="P210"><text:s text:c="12" />&lt;login name=&quot;username&quot; password=&quot;password&quot;/&gt;</text:p>
<text:p text:style-name="P211"><text:s text:c="8" />&lt;/pop3-server&gt;</text:p>
<text:p text:style-name="P212"><text:s text:c="3" />&lt;/mail-session&gt;</text:p>
<text:p text:style-name="P213">&lt;/subsystem&gt;</text:p>
<text:p text:style-name="P214">...</text:p>
<text:p text:style-name="P215">&lt;socket-binding-group name=&quot;standard-sockets&quot; default-interface=&quot;public&quot; port-offset=&quot;${jboss.socket.binding.port-offset:0}&quot;&gt;</text:p>
<text:p text:style-name="P216">...</text:p>
<text:p text:style-name="P217">&lt;outbound-socket-binding name=&quot;mail-smtp&quot;&gt;</text:p>
<text:p text:style-name="P218"><text:s text:c="8" />&lt;remote-destination host=&quot;smtp.gmail.com&quot; port=&quot;465&quot;/&gt;</text:p>
<text:p text:style-name="P219"><text:s text:c="4" />&lt;/outbound-socket-binding&gt;</text:p>
<text:p text:style-name="P220"><text:s text:c="4" />&lt;outbound-socket-binding name=&quot;mail-pop&quot;&gt;</text:p>
<text:p text:style-name="P221"><text:s text:c="8" />&lt;remote-destination host=&quot;pop.gmail.com&quot; port=&quot;110&quot;/&gt;</text:p>
<text:p text:style-name="P222"><text:s text:c="4" />&lt;/outbound-socket-binding&gt;</text:p>
<text:p text:style-name="P223">&lt;/socket-binding-group&gt;</text:p>
<text:p text:style-name="First_20_paragraph">You've got mail! Next,
we'll make sure Liferay is configured to properly connect with your new
mail session and database.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Configuring
data sources and mail sessions
<text:a xlink:type="simple" xlink:href="id=configuring-data-sources-and-mail-sessions" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Now that your data source
and mail session are set up, you need to ensure Liferay Portal can
access them.</text:p>
<text:list text:style-name="L38">
  <text:list-item>
    <text:p text:style-name="P224">First, navigate to the Liferay Home
    folder, which is one folder above JBoss's install location (i.e.
    <text:span text:style-name="T400">$JBOSS_HOME/..</text:span>).</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P224">If you're using
    <text:span text:style-name="T401">JBoss</text:span> to manage your
    data source, add the following to your
    <text:span text:style-name="T402">portal-ext.properties</text:span>
    file in your
    <text:span text:style-name="T403">Liferay</text:span><text:span text:style-name="T404">
    </text:span><text:span text:style-name="T405">Home</text:span> to
    refer to your data source:</text:p>
<text:p text:style-name="P225">jdbc.default.jndi.name=java:jdbc/LiferayPool</text:p>
    <text:p text:style-name="P224">If you're using
    <text:span text:style-name="T406">Liferay</text:span><text:span text:style-name="T407">
    </text:span><text:span text:style-name="T408">Portal</text:span> to
    manage your data source, follow the instructions in the
    <text:span text:style-name="T409">Deploy</text:span><text:span text:style-name="T410">
    </text:span><text:span text:style-name="T411">Liferay</text:span>
    section for using the setup wizard.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P224">If you're using
    <text:span text:style-name="T412">Liferay</text:span><text:span text:style-name="T413">
    </text:span><text:span text:style-name="T414">Portal</text:span> to
    manage your mail session, this configuration is done within Liferay
    Portal. That is, after starting your portal as described in the
    <text:span text:style-name="T415">Deploy</text:span><text:span text:style-name="T416">
    </text:span><text:span text:style-name="T417">Liferay</text:span>
    section, go to
    <text:span text:style-name="T418">Control</text:span><text:span text:style-name="T419">
    </text:span><text:span text:style-name="T420">Panel</text:span><text:span text:style-name="T421">
    </text:span><text:span text:style-name="T422">→</text:span><text:span text:style-name="T423">
    </text:span><text:span text:style-name="T424">Server</text:span><text:span text:style-name="T425">
    </text:span><text:span text:style-name="T426">Administration</text:span><text:span text:style-name="T427">
    </text:span><text:span text:style-name="T428">→</text:span><text:span text:style-name="T429">
    </text:span><text:span text:style-name="T430">Mail</text:span> and
    enter the settings for your mail session.</text:p>
    <text:p text:style-name="P224">If you're using
    <text:span text:style-name="T431">JBoss</text:span> to manage your
    mail session, add the following to your
    <text:span text:style-name="T432">portal-ext.properties</text:span>
    file to reference that mail session:</text:p>
<text:p text:style-name="P226">mail.session.jndi.name=java:mail/MailSession</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">You've completed the steps
necessary for your deployment of Liferay so Liferay Portal can now
communicate with your data source and mail session--way to go! Before we
deploy Liferay Portal on your JBoss app server, we'll teach you how to
enable and configure Java security so you can begin using Liferay's
plugin security manager with your downloaded Liferay
applications.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Security
Configuration
<text:a xlink:type="simple" xlink:href="id=security-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">When you're ready to begin
using other people's apps from Marketplace, you'll want to protect your
portal and your JBoss server from security threats. To do so, you can
enable Java Security on your JBoss server and specify a security policy
to grant your portal access to your server.</text:p>
<text:p text:style-name="Text_20_body">Remember, we set the
<text:span text:style-name="T433">-Djava.security.manager</text:span>
and <text:span text:style-name="T434">-Djava.security.policy</text:span>
Java options in the
<text:span text:style-name="T435">standalone.conf.bat</text:span> file
earlier in the
<text:span text:style-name="T436">Configuring</text:span><text:span text:style-name="T437">
</text:span><text:span text:style-name="T438">JBoss</text:span> section.
The
<text:span text:style-name="T439">-Djava.security.manager</text:span>
Java option enables security on your JBoss server. Likewise, the
<text:span text:style-name="T440">-Djava.security.policy</text:span>
Java option lists the permissions for your server's Java security
policy. If you have not set these options, you'll need to do so before
using Java security.</text:p>
<text:p text:style-name="Text_20_body">For now, in order to grant
Liferay access to your server let's open up all permissions. You can
tune the permissions in your policy later. Create the
<text:span text:style-name="T441">$JBOSS_HOME/bin/server.policy</text:span>
file and add the following contents:</text:p>
<text:p text:style-name="P227">grant {</text:p>
<text:p text:style-name="P228"><text:s text:c="4" />permission java.security.AllPermission;</text:p>
<text:p text:style-name="P229">};</text:p>
<text:p text:style-name="First_20_paragraph">For extensive information
on Java SE Security Architecture, see its specification documents at
<text:a xlink:type="simple" xlink:href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/spec/security-spec.doc.html" office:name=""><text:span text:style-name="Definition">http://docs.oracle.com/javase/7/docs/technotes/guides/security/spec/security-spec.doc.html</text:span></text:a>.
Also, see section
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/development/-/ai/understanding-plugin-security-management-liferay-portal-6-2-dev-guide-11-en" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T442">Understanding</text:span><text:span text:style-name="T443">
</text:span><text:span text:style-name="T444">Plugin</text:span><text:span text:style-name="T445">
</text:span><text:span text:style-name="T446">Security</text:span><text:span text:style-name="T447">
</text:span><text:span text:style-name="T448">Management</text:span></text:span></text:a>
in Chapter 12 of the Developer's Guide to learn how to configure Liferay
plugin access to resources.</text:p>
<text:p text:style-name="Text_20_body">Now you're ready to deploy
Liferay Portal.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Deploy
Liferay
<text:a xlink:type="simple" xlink:href="id=deploy-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:list text:style-name="L39">
  <text:list-item>
    <text:p text:style-name="P230">If the folder
    <text:span text:style-name="T449">$JBOSS_HOME/standalone/deployments/ROOT.war</text:span>
    already exists in your JBoss installation, delete all of its
    subfolders and files. Otherwise, create a new folder
    <text:span text:style-name="T450">$JBOSS_HOME/standalone/deployments/ROOT.war</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P230">Unzip the Liferay
    <text:span text:style-name="T451">.war</text:span> file into the
    <text:span text:style-name="T452">ROOT.war</text:span>
    folder.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P230">In the
    <text:span text:style-name="T453">ROOT.war</text:span> file, open
    the
    <text:span text:style-name="T454">WEB-INF/jboss-deployment-structure.xml</text:span>
    file. In this file, replace the
    <text:span text:style-name="T455">&lt;module name=&quot;com.liferay.portal&quot; /&gt;</text:span>
    dependency with the following:</text:p>
<text:p text:style-name="P231">&lt;module meta-inf=&quot;export&quot; name=&quot;com.liferay.portal&quot;&gt;</text:p>
<text:p text:style-name="P232"><text:s text:c="4" />&lt;imports&gt;</text:p>
<text:p text:style-name="P233"><text:s text:c="8" />&lt;include path=&quot;META-INF&quot; /&gt;</text:p>
<text:p text:style-name="P234"><text:s text:c="4" />&lt;/imports&gt;</text:p>
<text:p text:style-name="P235">&lt;/module&gt;</text:p>
    <text:p text:style-name="P230">This allows OSGi plugins like
    Audience Targeting to work properly by exposing the Portal API
    through the OSGi container.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P230">In the same
    <text:span text:style-name="T456">jboss-deployment-structure.xml</text:span>
    file, find the
    <text:span text:style-name="T457">&lt;jboss-deployment-structure&gt;</text:span>
    tag and update the <text:span text:style-name="T458">1.0</text:span>
    number within the
    <text:span text:style-name="T459">xmlns</text:span> attribute to
    <text:span text:style-name="T460">1.1</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P230">To trigger deployment of
    <text:span text:style-name="T461">ROOT.war</text:span>, create an
    empty file named
    <text:span text:style-name="T462">ROOT.war.dodeploy</text:span> in
    your
    <text:span text:style-name="T463">$JBOSS_HOME/standalone/deployments/</text:span>
    folder. On startup, JBoss detects the presence of this file and
    deploys it as a web application.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P230">Remove
    <text:span text:style-name="T464">eclipselink.jar</text:span> from
    <text:span text:style-name="T465">$JBOSS_HOME/standalone/deployments/ROOT.war/WEB-INF/lib</text:span>
    to assure the Hibernate persistence provider is used instead of the
    one provided in the
    <text:span text:style-name="T466">eclipselink.jar</text:span>.</text:p>
    <text:p text:style-name="P230">Now it's time to start Liferay Portal
    on JBoss!</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P230">Start the JBoss application
    server.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Now you are truly
<text:span text:style-name="T467">the</text:span><text:span text:style-name="T468">
</text:span><text:span text:style-name="T469">boss</text:span> when it
comes to deploying Liferay Portal on JBoss!</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Installing
Liferay on Tomcat 7
<text:a xlink:type="simple" xlink:href="id=installing-liferay-on-tomcat-7" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph"><text:span text:style-name="T470">Liferay</text:span><text:span text:style-name="T471">
</text:span><text:span text:style-name="T472">Home</text:span> is one
folder above Tomcat's install location.</text:p>
<text:p text:style-name="Text_20_body">For this section, we will refer
to your Tomcat server's installation location as
<text:span text:style-name="T473">$TOMCAT_HOME</text:span>. If you do
not already have an existing Tomcat server, we recommend you download a
Liferay/Tomcat bundle from
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/downloads/liferay-portal/available-releases" office:name=""><text:span text:style-name="Definition">http://www.liferay.com/downloads/liferay-portal/available-releases</text:span></text:a>.
If you have an existing Tomcat server or would like to install Liferay
on Tomcat manually, please follow the steps below.</text:p>
<text:p text:style-name="Text_20_body">Before you begin, make sure you
have downloaded the latest Liferay
<text:span text:style-name="T474">.war</text:span> file and Liferay
Portal dependencies from
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/downloads/liferay-portal/additional-files" office:name=""><text:span text:style-name="Definition">http://www.liferay.com/downloads/liferay-portal/additional-files</text:span></text:a>.
The Liferay <text:span text:style-name="T475">.war</text:span> file
should be called
<text:span text:style-name="T476">liferay-portal-6.2.x-[date].war</text:span>
and the dependencies file should be called
<text:span text:style-name="T477">liferay-portal-dependencies-6.2.x-[date].zip</text:span>.</text:p>
<text:p text:style-name="Text_20_body">Next, let's get started by
addressing Liferay's library dependencies.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Dependency
Jars
<text:a xlink:type="simple" xlink:href="id=dependency-jars" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay Portal depends on
several <text:span text:style-name="T478">JAR</text:span> files found in
the Liferay Dependencies Archive. In addition to these, you need the
proper driver for your database. You can get the necessary dependencies
by following these steps:</text:p>
<text:list text:style-name="L40">
  <text:list-item>
    <text:p text:style-name="P236">Create a folder named
    <text:span text:style-name="T479">ext</text:span> in
    <text:span text:style-name="T480">$TOMCAT_HOME/lib</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P236">Unzip the Liferay Dependencies file
    to
    <text:span text:style-name="T481">$TOMCAT_HOME/lib/ext</text:span>
    so that its <text:span text:style-name="T482">.jar</text:span> files
    reside there. If the
    <text:span text:style-name="T483">.jar</text:span> files are nested
    in a
    <text:span text:style-name="T484">liferay-portal-dependencies-6.2</text:span>
    directory after you extract them, copy them into
    <text:span text:style-name="T485">$TOMCAT_HOME/lib/ext</text:span>
    and delete the empty folder.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P236">Next, you need a few third party
    <text:span text:style-name="T486">.jar</text:span> files which are
    included as part of the Liferay source distribution, but are not
    automatically included with Tomcat. You'll have to download them
    yourself, so let's get started. Place these
    <text:span text:style-name="T487">.jar</text:span> files into
    <text:span text:style-name="T488">$TOMCAT_HOME/lib/ext</text:span>:</text:p>
    <text:list text:style-name="L41">
      <text:list-item>
        <text:p text:style-name="P237"><text:span text:style-name="T489">jta.jar</text:span>:
        You can get this
        <text:span text:style-name="T490">.jar</text:span>, which
        manages transactions, from
        <text:a xlink:type="simple" xlink:href="http://www.oracle.com/technetwork/java/javaee/jta/index.html" office:name=""><text:span text:style-name="Definition">http://www.oracle.com/technetwork/java/javaee/jta/index.html</text:span></text:a></text:p>
      </text:list-item>
      <text:list-item>
        <text:p text:style-name="P237"><text:span text:style-name="T491">mail.jar</text:span>:
        You can get this
        <text:span text:style-name="T492">.jar</text:span> from
        <text:a xlink:type="simple" xlink:href="http://www.oracle.com/technetwork/java/index-138643.html" office:name=""><text:span text:style-name="Definition">http://www.oracle.com/technetwork/java/index-138643.html</text:span></text:a></text:p>
      </text:list-item>
      <text:list-item>
        <text:p text:style-name="P237"><text:span text:style-name="T493">persistence.jar</text:span>:
        You can learn about the Java Persistence API and how to download
        it from
        <text:a xlink:type="simple" xlink:href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html" office:name=""><text:span text:style-name="Definition">http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html</text:span></text:a></text:p>
      </text:list-item>
    </text:list>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P236">Make sure the JDBC driver for your
    database is accessible by Tomcat. In the case of MySQL, use
    <text:span text:style-name="T494">mysql-connector-java-{$version}-bin.jar</text:span>.
    You can download the latest MySQL JDBC driver from
    <text:a xlink:type="simple" xlink:href="http://dev.mysql.com/downloads/connector/j/" office:name=""><text:span text:style-name="Definition">http://dev.mysql.com/downloads/connector/j/</text:span></text:a>.
    Extract the JAR file and copy it to
    <text:span text:style-name="T495">$TOMCAT_HOME/lib/ext</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P236">There are a few other JARs that come
    with a typical Liferay bundle that you might want to download and
    place in your
    <text:span text:style-name="T496">$TOMCAT_HOME/lib/ext</text:span>
    folder. They include the following:</text:p>
    <text:list text:style-name="L42">
      <text:list-item>
        <text:p text:style-name="P238"><text:span text:style-name="T497">activation.jar</text:span>:
        You can get this
        <text:span text:style-name="T498">.jar</text:span> from
        <text:a xlink:type="simple" xlink:href="http://www.oracle.com/technetwork/java/jaf11-139815.html" office:name=""><text:span text:style-name="Definition">http://www.oracle.com/technetwork/java/jaf11-139815.html</text:span></text:a></text:p>
      </text:list-item>
      <text:list-item>
        <text:p text:style-name="P238"><text:span text:style-name="T499">ccpp.jar</text:span>:
        You can get this
        <text:span text:style-name="T500">.jar</text:span> from
        <text:a xlink:type="simple" xlink:href="http://mvnrepository.com/artifact/javax.ccpp/ccpp/1.0" office:name=""><text:span text:style-name="Definition">http://mvnrepository.com/artifact/javax.ccpp/ccpp/1.0</text:span></text:a></text:p>
      </text:list-item>
      <text:list-item>
        <text:p text:style-name="P238"><text:span text:style-name="T501">jms.jar</text:span>:
        You can get this
        <text:span text:style-name="T502">.jar</text:span> from
        <text:a xlink:type="simple" xlink:href="http://www.oracle.com/technetwork/java/docs-136352.html" office:name=""><text:span text:style-name="Definition">http://www.oracle.com/technetwork/java/docs-136352.html</text:span></text:a></text:p>
      </text:list-item>
      <text:list-item>
        <text:p text:style-name="P238"><text:span text:style-name="T503">jutf7.jar</text:span>:
        You can get this
        <text:span text:style-name="T504">.jar</text:span> from
        <text:a xlink:type="simple" xlink:href="http://sourceforge.net/projects/jutf7/" office:name=""><text:span text:style-name="Definition">http://sourceforge.net/projects/jutf7/</text:span></text:a></text:p>
      </text:list-item>
      <text:list-item>
        <text:p text:style-name="P238"><text:span text:style-name="T505">junit.jar</text:span>:
        You can get this
        <text:span text:style-name="T506">.jar</text:span> from
        <text:a xlink:type="simple" xlink:href="http://sourceforge.net/projects/junit/" office:name=""><text:span text:style-name="Definition">http://sourceforge.net/projects/junit/</text:span></text:a></text:p>
      </text:list-item>
    </text:list>
    <text:p text:style-name="P236">You can download each third partry
    <text:span text:style-name="T507">.jar</text:span> listed above from
    the provided websites, then place them into your
    <text:span text:style-name="T508">%TOMCAT_HOME/lib/ext</text:span>
    directory. However, they're also available in the Liferay source
    code, so if you have access to the Liferay source or would like to
    download it for this purpose, feel free to copy the
    <text:span text:style-name="T509">.jar</text:span> files from there.
    If we refer to your local Liferay source directory as
    <text:span text:style-name="T510">$LIFERAY_SOURCE</text:span>, you
    can get all of the third party
    <text:span text:style-name="T511">.jar</text:span> files listed
    above from
    <text:span text:style-name="T512">$LIFERAY_SOURCE/lib/development</text:span>,
    with the exception of
    <text:span text:style-name="T513">ccpp.jar</text:span>, which is
    found in
    <text:span text:style-name="T514">$LIFERAY_SOURCE/lib/portal</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Now that you have the
necessary libraries in place, we'll move on to configuring your
domain.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Tomcat
Configuration
<text:a xlink:type="simple" xlink:href="id=tomcat-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">There are several
configuration steps you need to complete before Tomcat can run Liferay.
Let's get started.</text:p>
<text:list text:style-name="L43">
  <text:list-item>
    <text:p text:style-name="P239">First we'll need to set the
    <text:span text:style-name="T515">CATALINA_OPTS</text:span>
    environment variable. Create a
    <text:span text:style-name="T516">setenv.bat</text:span> (Windows)
    or <text:span text:style-name="T517">setenv.sh</text:span> file
    (Unix, Linux, Mac OS) in the
    <text:span text:style-name="T518">$TOMCAT_HOME/bin</text:span>
    directory. Populate it with following contents:</text:p>
    <text:list text:style-name="L44">
      <text:list-item>
        <text:p text:style-name="P240"><text:span text:style-name="T519">setenv.bat</text:span>:</text:p><text:p text:style-name="P241">if exist &quot;%CATALINA_HOME%/jre@java.version@/win&quot; (</text:p>
<text:p text:style-name="P242"><text:s text:c="4" />if not &quot;%JAVA_HOME%&quot; == &quot;&quot; (</text:p>
<text:p text:style-name="P243"><text:s text:c="8" />set JAVA_HOME=</text:p>
<text:p text:style-name="P244"><text:s text:c="4" />)</text:p>
<text:p text:style-name="P245"></text:p>
<text:p text:style-name="P246"><text:s text:c="4" />set &quot;JRE_HOME=%CATALINA_HOME%/jre@java.version@/win&quot;</text:p>
<text:p text:style-name="P247">)</text:p>
<text:p text:style-name="P248"></text:p>
<text:p text:style-name="P249">set &quot;CATALINA_OPTS=%CATALINA_OPTS% -Dfile.encoding=UTF8 -Djava.net.preferIPv4Stack=true -Dorg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES=false -Duser.timezone=GMT -Xmx1024m -XX:MaxPermSize=256m&quot;</text:p>
      </text:list-item>
      <text:list-item>
        <text:p text:style-name="P240"><text:span text:style-name="T520">setenv.sh</text:span>:</text:p><text:p text:style-name="P250">CATALINA_OPTS=&quot;$CATALINA_OPTS -Dfile.encoding=UTF8 -Dorg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES=false -Duser.timezone=GMT -Xmx1024m -XX:MaxPermSize=256m&quot;</text:p>
      </text:list-item>
    </text:list>
    <text:p text:style-name="P239">This sets the character encoding to
    UTF-8, sets the time zone to Greenwich Mean Time, and allocates
    memory to the Java Virtual Machine.</text:p>
  </text:list-item>
</text:list>
<text:list text:style-name="L45">
  <text:list-item>
    <text:p text:style-name="P251">Let's create a context for Liferay.
    Create a <text:span text:style-name="T521">ROOT.xml</text:span> file
    in
    <text:span text:style-name="T522">$TOMCAT_HOME/conf/Catalina/localhost</text:span>.
    Populate it with the following contents to set up a portal web
    application:</text:p>
<text:p text:style-name="P252">&lt;Context path=&quot;&quot; crossContext=&quot;true&quot;&gt;</text:p>
<text:p text:style-name="P253"></text:p>
<text:p text:style-name="P254"><text:s text:c="4" />&lt;!-- JAAS --&gt;</text:p>
<text:p text:style-name="P255"></text:p>
<text:p text:style-name="P256"><text:s text:c="4" />&lt;!--&lt;Realm</text:p>
<text:p text:style-name="P257"><text:s text:c="8" />classNjame=&quot;org.apache.catalina.realm.JAASRealm&quot;</text:p>
<text:p text:style-name="P258"><text:s text:c="8" />appName=&quot;PortalRealm&quot;</text:p>
<text:p text:style-name="P259"><text:s text:c="8" />userClassNames=&quot;com.liferay.portal.kernel.security.jaas.PortalPrincipal&quot;</text:p>
<text:p text:style-name="P260"><text:s text:c="8" />roleClassNames=&quot;com.liferay.portal.kernel.security.jaas.PortalRole&quot;</text:p>
<text:p text:style-name="P261"><text:s text:c="4" />/&gt;--&gt;</text:p>
<text:p text:style-name="P262"></text:p>
<text:p text:style-name="P263"><text:s text:c="4" />&lt;!--</text:p>
<text:p text:style-name="P264"><text:s text:c="4" />Uncomment the following to disable persistent sessions across reboots.</text:p>
<text:p text:style-name="P265"><text:s text:c="4" />--&gt;</text:p>
<text:p text:style-name="P266"></text:p>
<text:p text:style-name="P267"><text:s text:c="4" />&lt;!--&lt;Manager pathname=&quot;&quot; /&gt;--&gt;</text:p>
<text:p text:style-name="P268"></text:p>
<text:p text:style-name="P269"><text:s text:c="4" />&lt;!--</text:p>
<text:p text:style-name="P270"><text:s text:c="4" />Uncomment the following to not use sessions. See the property</text:p>
<text:p text:style-name="P271"><text:s text:c="4" />&quot;session.disabled&quot; in portal.properties.</text:p>
<text:p text:style-name="P272"><text:s text:c="4" />--&gt;</text:p>
<text:p text:style-name="P273"></text:p>
<text:p text:style-name="P274"><text:s text:c="4" />&lt;!--&lt;Manager className=&quot;com.liferay.support.tomcat.session.SessionLessManagerBase&quot; /&gt;--&gt;</text:p>
<text:p text:style-name="P275">&lt;/Context&gt;</text:p>
    <text:p text:style-name="P251">Setting
    <text:span text:style-name="T523">crossContext=&quot;true&quot;</text:span>
    allows multiple web apps to use the same class loader. In the
    content above you will also find commented instructions and tags for
    configuring a JAAS realm, disabling persistent sessions and
    disabling sessions in general.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P251">Let's make sure the libraries we
    added to
    <text:span text:style-name="T524">$TOMCAT_HOME/lib/ext</text:span>
    are loaded when we start the server. Open
    <text:span text:style-name="T525">$TOMCAT_HOME/conf/catalina.properties</text:span>
    and replace the line:</text:p>
<text:p text:style-name="P276">common.loader=${catalina.base}/lib,${catalina.base}/lib/*.jar,${catalina.home}/lib,${catalina.home}/lib/*.jar</text:p>
    <text:p text:style-name="P251">with:</text:p>
<text:p text:style-name="P277">common.loader=${catalina.base}/lib,${catalina.base}/lib/*.jar,${catalina.home}/lib,${catalina.home}/lib/*.jar,${catalina.home}/lib/ext,${catalina.home}/lib/ext/*.jar</text:p>
    <text:p text:style-name="P251">This allows Catalina to access the
    dependency jars you extracted to
    <text:span text:style-name="T526">$TOMCAT_HOME/lib/ext</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P251">We also need to ensure consistent use
    of UTF-8 URI Encoding. Edit
    <text:span text:style-name="T527">$TOMCAT_HOME/conf/server.xml</text:span>
    and add the attribute
    <text:span text:style-name="T528">URIEncoding=&quot;UTF-8&quot;</text:span>
    where you see
    <text:span text:style-name="T529">redirectPort=8443</text:span>, in
    the definition of your connectors (HTTP and AJP). For
    example:</text:p>
<text:p text:style-name="P278">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot; /&gt;</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P251">Lastly, if you see a
    <text:span text:style-name="T530">support-catalina.jar</text:span>
    in your
    <text:span text:style-name="T531">$TOMCAT_HOME/webapps</text:span>
    directory, delete it.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Now Tomcat is configured to
run Liferay! If you want to use Liferay to manage your database and mail
session (and we recommend you do), you can skip the next sections and
move to the section titled
<text:span text:style-name="T532">Enabling</text:span><text:span text:style-name="T533">
</text:span><text:span text:style-name="T534">PACL</text:span>. Next
we'll look at configuring your database with Tomcat.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Database
Configuration
<text:a xlink:type="simple" xlink:href="id=database-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want Tomcat to
manage your data source, use the following procedure. If you want to use
Liferay's built-in data source, you can skip this section.</text:p>
<text:list text:style-name="L46">
  <text:list-item>
    <text:p text:style-name="P279">Make sure your database server is
    installed and working. If it's installed on a different machine,
    make sure it's accessible from the machine with Liferay.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P279">Add your data source as a resource in
    the context of your web application specified in
    <text:span text:style-name="T535">$TOMCAT_HOME/conf/Catalina/localhost/ROOT.xml</text:span>:</text:p>
<text:p text:style-name="P280">&lt;Context...&gt;</text:p>
<text:p text:style-name="P281"><text:s text:c="4" />&lt;Resource</text:p>
<text:p text:style-name="P282"><text:s text:c="8" />name=&quot;jdbc/LiferayPool&quot;</text:p>
<text:p text:style-name="P283"><text:s text:c="8" />auth=&quot;Container&quot;</text:p>
<text:p text:style-name="P284"><text:s text:c="8" />type=&quot;javax.sql.DataSource&quot;</text:p>
<text:p text:style-name="P285"><text:s text:c="8" />driverClassName=&quot;com.mysql.jdbc.Driver&quot;</text:p>
<text:p text:style-name="P286"><text:s text:c="8" />url=&quot;jdbc:mysql://localhost/lportal?useUnicode=true&amp;amp;characterEncoding=UTF-8&quot;</text:p>
<text:p text:style-name="P287"><text:s text:c="8" />username=&quot;root&quot;</text:p>
<text:p text:style-name="P288"><text:s text:c="8" />password=&quot;root&quot;</text:p>
<text:p text:style-name="P289"><text:s text:c="8" />maxActive=&quot;100&quot;</text:p>
<text:p text:style-name="P290"><text:s text:c="8" />maxIdle=&quot;30&quot;</text:p>
<text:p text:style-name="P291"><text:s text:c="8" />maxWait=&quot;10000&quot;</text:p>
<text:p text:style-name="P292"><text:s text:c="4" />/&gt;</text:p>
<text:p text:style-name="P293">&lt;/Context&gt;</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T536">Note:</text:span>
The above resource definition assumes your database name is
<text:span text:style-name="T537">lportal</text:span> and your MySQL
username and password are both
<text:span text:style-name="T538">root</text:span>. You'll have to
update these values with your own database name and
credentials.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:p text:style-name="Text_20_body">Your Tomcat managed data source
is now configured. Let's move on to your mail session.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Mail
Configuration
<text:a xlink:type="simple" xlink:href="id=mail-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want to manage your
mail session with Tomcat, use the following instructions. If you want to
use the built-in Liferay mail session, you can skip this
section.</text:p>
<text:p text:style-name="Text_20_body">Create a mail session bound to
<text:span text:style-name="T539">mail/MailSession</text:span>. Edit
<text:span text:style-name="T540">$TOMCAT_ HOME/conf/Catalina/localhost/ROOT.xml</text:span>
and configure a mail session. Be sure to replace the example mail
session values with your own.</text:p>
<text:p text:style-name="P294">&lt;Context...&gt;</text:p>
<text:p text:style-name="P295"><text:s text:c="4" />&lt;Resource</text:p>
<text:p text:style-name="P296"><text:s text:c="8" />name=&quot;mail/MailSession&quot;</text:p>
<text:p text:style-name="P297"><text:s text:c="8" />auth=&quot;Container&quot;</text:p>
<text:p text:style-name="P298"><text:s text:c="8" />type=&quot;javax.mail.Session&quot;</text:p>
<text:p text:style-name="P299"><text:s text:c="8" />mail.pop3.host=&quot;pop.gmail.com&quot;</text:p>
<text:p text:style-name="P300"><text:s text:c="8" />mail.pop3.port=&quot;110&quot;</text:p>
<text:p text:style-name="P301"><text:s text:c="8" />mail.smtp.host=&quot;smtp.gmail.com&quot;</text:p>
<text:p text:style-name="P302"><text:s text:c="8" />mail.smtp.port=&quot;465&quot;</text:p>
<text:p text:style-name="P303"><text:s text:c="8" />mail.smtp.user=&quot;user&quot;</text:p>
<text:p text:style-name="P304"><text:s text:c="8" />mail.smtp.password=&quot;password&quot;</text:p>
<text:p text:style-name="P305"><text:s text:c="8" />mail.smtp.auth=&quot;true&quot;</text:p>
<text:p text:style-name="P306"><text:s text:c="8" />mail.smtp.starttls.enable=&quot;true&quot;</text:p>
<text:p text:style-name="P307"><text:s text:c="8" />mail.smtp.socketFactory.class=&quot;javax.net.ssl.SSLSocketFactory&quot;</text:p>
<text:p text:style-name="P308"><text:s text:c="8" />mail.imap.host=&quot;imap.gmail.com&quot;</text:p>
<text:p text:style-name="P309"><text:s text:c="8" />mail.imap.port=&quot;993&quot;</text:p>
<text:p text:style-name="P310"><text:s text:c="8" />mail.transport.protocol=&quot;smtp&quot;</text:p>
<text:p text:style-name="P311"><text:s text:c="8" />mail.store.protocol=&quot;imap&quot;</text:p>
<text:p text:style-name="P312"><text:s text:c="4" />/&gt;</text:p>
<text:p text:style-name="P313">&lt;/Context&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Your mail session is
configured. Next, we'll make sure Liferay will be able to access your
mail session and database.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Configuring
your database and mail session
<text:a xlink:type="simple" xlink:href="id=configuring-your-database-and-mail-session" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">In this section we'll
specify appropriate properties for Liferay to use in connecting to your
database and mail session.</text:p>
<text:list text:style-name="L47">
  <text:list-item>
    <text:p text:style-name="P314">If you are using
    <text:span text:style-name="T541">Tomcat</text:span> to manage your
    data source, add the following to your
    <text:span text:style-name="T542">portal-ext.properties</text:span>
    file in your
    <text:span text:style-name="T543">Liferay</text:span><text:span text:style-name="T544">
    </text:span><text:span text:style-name="T545">Home</text:span> to
    refer to your data source:</text:p>
<text:p text:style-name="P315">jdbc.default.jndi.name=jdbc/LiferayPool</text:p>
    <text:p text:style-name="P314">Otherwise, if you are using
    <text:span text:style-name="T546">Liferay</text:span><text:span text:style-name="T547">
    </text:span><text:span text:style-name="T548">Portal</text:span> to
    manage your data source, follow the instructions in the
    <text:span text:style-name="T549">Deploy</text:span><text:span text:style-name="T550">
    </text:span><text:span text:style-name="T551">Liferay</text:span>
    section for using the setup wizard.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P314">If want to use
    <text:span text:style-name="T552">Liferay</text:span><text:span text:style-name="T553">
    </text:span><text:span text:style-name="T554">Portal</text:span> to
    manage your mail session, you can configure the mail session within
    Liferay Portal. That is, after starting your portal as described in
    the
    <text:span text:style-name="T555">Deploy</text:span><text:span text:style-name="T556">
    </text:span><text:span text:style-name="T557">Liferay</text:span>
    section, go to
    <text:span text:style-name="T558">Control</text:span><text:span text:style-name="T559">
    </text:span><text:span text:style-name="T560">Panel</text:span><text:span text:style-name="T561">
    </text:span><text:span text:style-name="T562">→</text:span><text:span text:style-name="T563">
    </text:span><text:span text:style-name="T564">Server</text:span><text:span text:style-name="T565">
    </text:span><text:span text:style-name="T566">Administration</text:span><text:span text:style-name="T567">
    </text:span><text:span text:style-name="T568">→</text:span><text:span text:style-name="T569">
    </text:span><text:span text:style-name="T570">Mail</text:span> and
    enter the settings for your mail session.</text:p>
    <text:p text:style-name="P314">Otherwise, if you are using
    <text:span text:style-name="T571">Tomcat</text:span> to manage your
    mail session, add the following to your
    <text:span text:style-name="T572">portal-ext.properties</text:span>
    file to reference that mail session:</text:p>
<text:p text:style-name="P316">mail.session.jndi.name=mail/MailSession</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">It's just that easy! Before
we deploy Liferay Portal on your Tomcat server, let's look at
configuring Portal Access Control Language (PACL) with Liferay on
Tomcat.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Enabling
PACL
<text:a xlink:type="simple" xlink:href="id=enabling-pacl" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">To enable PACL for use with
your Liferay Portal when running on Tomcat, you need to enable the
security manager and add some required permissions to the server policy
configuration file. This simply entails editing two files in
<text:span text:style-name="T573">$TOMCAT_HOME</text:span> you're
already familiar with if you've been following along in setting up
Liferay with a Tomcat Application Server:</text:p>
<text:list text:style-name="L48">
  <text:list-item>
    <text:p text:style-name="P317">In
    <text:span text:style-name="T574">$TOMCAT_HOME/bin/setenv.sh</text:span>
    (if on Linux, Unix, or Mac OS) or
    <text:span text:style-name="T575">setenv.bat</text:span> (if on
    Windows) enable the security manager by inserting the following code
    into the <text:span text:style-name="T576">CATALINA_OPTS</text:span>
    variable (inside the quotation
    marks):</text:p><text:p text:style-name="P317"><text:span text:style-name="T577">-Djava.security.manager -Djava.security.policy=$CATALINA_BASE/conf/catalina.policy</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P317">In
    <text:span text:style-name="T578">$TOMCAT_HOME/conf/catalina.policy</text:span>,
    add the required permissions:</text:p><text:p text:style-name="P318">grant {</text:p>
<text:p text:style-name="P319"><text:s text:c="4" />permission java.security.AllPermission;</text:p>
<text:p text:style-name="P320">};</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">To enable the security
manager on Tomcat, the server must be started with the
<text:span text:style-name="T579">-security</text:span> commandline
options. Shutdown your Tomcat instance and restart it with the following
command:</text:p>
<text:p text:style-name="P321">./startup.sh -security</text:p>
<text:p text:style-name="First_20_paragraph">Tomcat reports the message
<text:span text:style-name="T580">Using Security Manager</text:span> to
your terminal.</text:p>
<text:p text:style-name="Text_20_body">Now you have PACL enabled and
configured for your portal. Let's deploy Liferay!</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Deploy
Liferay
<text:a xlink:type="simple" xlink:href="id=deploy-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">It's time to deploy Liferay
as an exploded web archive within your
<text:span text:style-name="T581">$TOMCAT_HOME/webapps</text:span>
folder, configure our setup wizard behavior, and start Liferay!</text:p>
<text:list text:style-name="L49">
  <text:list-item>
    <text:p text:style-name="P322">If you are manually installing
    Liferay on a clean Tomcat server, delete the contents of the
    <text:span text:style-name="T582">$TOMCAT_HOME/webapps/ROOT</text:span>
    directory. This undeploys the default Tomcat home page. Extract the
    Liferay <text:span text:style-name="T583">.war</text:span> file to
    <text:span text:style-name="T584">$TOMCAT_HOME/webapps/ROOT</text:span>.</text:p>
    <text:p text:style-name="P322">Now its time to launch Liferay Portal
    on Tomcat!</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P322">Start Tomcat by executing
    <text:span text:style-name="T585">$TOMCAT_HOME/bin/startup.bat</text:span>
    or
    <text:span text:style-name="T586">$TOMCAT_HOME/bin/startup.sh</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Congratulations on
successfully installing and deploying Liferay on Tomcat!</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Installing
Liferay on Oracle WebLogic 12c (12.1.2 and higher)
<text:a xlink:type="simple" xlink:href="id=installing-liferay-on-oracle-weblogic-12c-12-1-2-and-h" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">In this section, you'll
learn how to install Liferay on Oracle WebLogic 12c. Since you're using
Oracle WebLogic, you may be curious of Liferay's support of XA
transactions. Liferay doesn't require XA transactions, but it supports
XA. Let's get acquainted with how Liferay fits in with your current
WebLogic domain.</text:p>
<text:p text:style-name="Text_20_body">For demonstration purposes, we'll
assume
<text:span text:style-name="T587">Liferay</text:span><text:span text:style-name="T588">
</text:span><text:span text:style-name="T589">Home</text:span> is one
folder above the domain to which you will be installing
Liferay.</text:p>
<text:p text:style-name="Text_20_body">For example, if your domain
location is
<text:span text:style-name="T590">/Oracle/Middleware/user_projects/domains/base_domain</text:span>,
then your Liferay Home is
<text:span text:style-name="T591">/Oracle/Middleware/user_projects/domains</text:span>.</text:p>
<text:p text:style-name="Text_20_body">For this section, we will use
<text:span text:style-name="T592">$WEBLOGIC_HOME</text:span> to refer to
your WebLogic server's installation
<text:span text:style-name="T593">/Oracle/Middleware</text:span>.</text:p>
<text:p text:style-name="Text_20_body">Before you begin, make sure you
have downloaded the latest Liferay
<text:span text:style-name="T594">.war</text:span> file and Liferay
Portal dependencies from
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/downloads/liferay-portal/additional-files" office:name=""><text:span text:style-name="Definition">http://www.liferay.com/downloads/liferay-portal/additional-files</text:span></text:a>.
The Liferay <text:span text:style-name="T595">.war</text:span> file is
called
<text:span text:style-name="T596">liferay-portal-[version].war</text:span>
and the dependencies file is called
<text:span text:style-name="T597">liferay-portal-dependencies-[version].zip</text:span>.</text:p>
<text:p text:style-name="Text_20_body">These instructions assume you
have already configured a domain and server and that you have access to
the WebLogic console.</text:p>
<text:p text:style-name="Text_20_body">If you still have the
<text:span text:style-name="T598">mainWebApp</text:span> module
installed, remove it first.</text:p>
<text:p text:style-name="Text_20_body">Let's get started by installing
the <text:span text:style-name="T599">.jar</text:span> files Liferay
needs.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Dependency
Jars
<text:a xlink:type="simple" xlink:href="id=dependency-jars" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay needs the
<text:span text:style-name="T600">.jar</text:span> files contained in
the Liferay Dependencies Archive and the driver
<text:span text:style-name="T601">.jar</text:span> file applicable for
your database. We'll put them on your domain's global
classpath.</text:p>
<text:list text:style-name="L50">
  <text:list-item>
    <text:p text:style-name="P323">Navigate to the folder that
    corresponds to the domain to which you will be installing Liferay.
    Inside this folder is a
    <text:span text:style-name="T602">lib</text:span> folder. Unzip the
    Liferay Dependencies Archive to this folder so the dependency
    <text:span text:style-name="T603">.jar</text:span> files reside in
    the <text:span text:style-name="T604">lib</text:span>
    folder.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P323">If WebLogic does not already have
    access to the JDBC driver for your database, copy the driver to your
    domain's <text:span text:style-name="T605">lib</text:span> folder as
    well.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">So far so good. Your
<text:span text:style-name="T606">.jar</text:span> files are in place
and ready for Liferay.</text:p>
<text:p text:style-name="Text_20_body">Let's proceed with configuring
WebLogic.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Configuring
WebLogic
<text:a xlink:type="simple" xlink:href="id=configuring-weblogic" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Let's make the following
adjustments in your configuration to support using Liferay: - Set
WebLogic Server's memory arguments. - Set the maximum size for Java's
permanent generation space. - Set the file encoding. - Enable Lucene
support. - Enable AspectJ support.</text:p>
<text:p text:style-name="Text_20_body">You can set WebLogic Server's
memory arguments in your
<text:span text:style-name="T607">setDomainEnv.[cmd|sh]</text:span>
environment script file found in your domain's
<text:span text:style-name="T608">bin</text:span> folder. For the Sun
JVM, we'll set the WLS memory arguments for 64 bit and 32 bit
architectures to
<text:span text:style-name="T609">-Xms256m -Xmx1024m</text:span> at a
minimum. For all other JVMs, we'll set the 64 bit and 32 bit WLS memory
arguments to
<text:span text:style-name="T610">-Xms512m -Xmx512m</text:span>
respectively.</text:p>
<text:p text:style-name="Text_20_body">We'll set the permanent
generation space for 64 bit and 32 bit architectures to
<text:span text:style-name="T611">-XX:PermSize=256m</text:span>.</text:p>
<text:p text:style-name="Text_20_body">Lastly, we'll make sure to
specify UTF-8 for Java's file encoding, by including
<text:span text:style-name="T612">-Dfile.encoding=UTF8</text:span> as a
Java property.</text:p>
<text:p text:style-name="Text_20_body">If you're on Windows, for
example, you'd edit your
<text:span text:style-name="T613">setDomainEnv.cmd</text:span> file and
find the call to the
<text:span text:style-name="T614">commEnv.cmd</text:span> script. After
this call, you'd update your memory arguments and permanent generation
space settings to be like the following code:</text:p>
<text:p text:style-name="P324">...</text:p>
<text:p text:style-name="P325">if &quot;%JAVA_VENDOR&quot;==&quot;Sun&quot; (</text:p>
<text:p text:style-name="P326"><text:s text:c="4" />set WLS_MEM_ARGS_64BIT=-Xms256m -Xmx1024m</text:p>
<text:p text:style-name="P327"><text:s text:c="4" />set WLS_MEM_ARGS_32BIT=-Xms256m -Xmx1024m</text:p>
<text:p text:style-name="P328">) else (</text:p>
<text:p text:style-name="P329"><text:s text:c="4" />set WLS_MEM_ARGS_64BIT=-Xms512m -Xmx512m</text:p>
<text:p text:style-name="P330"><text:s text:c="4" />set WLS_MEM_ARGS_32BIT=-Xms512m -Xmx512m</text:p>
<text:p text:style-name="P331">)</text:p>
<text:p text:style-name="P332">...</text:p>
<text:p text:style-name="P333">set MEM_PERM_SIZE_64BIT=-XX:PermSize=256m</text:p>
<text:p text:style-name="P334">set MEM_PERM_SIZE_32BIT=-XX:PermSize=256m</text:p>
<text:p text:style-name="First_20_paragraph">Later in the
<text:span text:style-name="T615">setDomainEnv.cmd</text:span> file's
clustering support section, you'd set the UTF-8 file encoding by
appending
<text:span text:style-name="T616">-Dfile.encoding=UTF8</text:span> to
the front of the list of Java property values, as done in the following
line of code:</text:p>
<text:p text:style-name="P335">set JAVA_PROPERTIES=-Dfile.encoding=utf8 %JAVA_PROPERTIES% %CLUSTER_PROPERTIES%</text:p>
<text:p text:style-name="First_20_paragraph">Next, we'll need to specify
some local environment settings to support Liferay's memory
requirements, its use of the
<text:a xlink:type="simple" xlink:href="http://en.wikipedia.org/wiki/Lucene" office:name=""><text:span text:style-name="Definition">Apache
Lucene</text:span></text:a> search engine library, and its use of Aspect
Oriented Programming (AOP) with
<text:a xlink:type="simple" xlink:href="http://en.wikipedia.org/wiki/AspectJ" office:name=""><text:span text:style-name="Definition">AspectJ</text:span></text:a>.</text:p>
<text:p text:style-name="Text_20_body">Open the
<text:span text:style-name="T617">startWebLogic.[cmd|sh]</text:span>
file from within your domain's folder--NOT your server's
<text:span text:style-name="T618">bin</text:span> folder. If you're on
Windows, you'd add directives similar to those listed below, after the
<text:span text:style-name="T619">SETLOCAL</text:span> command:</text:p>
<text:p text:style-name="P336">set &quot;USER_MEM_ARGS=-Xmx1024m -XX:PermSize=512m&quot;</text:p>
<text:p text:style-name="P337"></text:p>
<text:p text:style-name="P338">set &quot;MW_HOME=D:\Oracle\Middleware\wlserver_12.1&quot;</text:p>
<text:p text:style-name="P339"></text:p>
<text:p text:style-name="P340">set &quot;JAVA_OPTIONS=%JAVA_OPTIONS% -da:org.apache.lucene... -da:org.aspectj...&quot;</text:p>
<text:p text:style-name="First_20_paragraph">Make sure to set your
<text:span text:style-name="T620">MW_HOME</text:span> value to your
WebLogic server's location. On Linux, you'd make similar changes
replacing <text:span text:style-name="T621">%JAVA_OPTIONS%</text:span>
with
<text:span text:style-name="T622">$JAVA_OPTIONS</text:span>.</text:p>
<text:p text:style-name="Text_20_body">Next, if you want to configure
your database and/or mail session within WebLogic, start your WebLogic
server.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Database
Configuration
<text:a xlink:type="simple" xlink:href="id=database-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want WebLogic to
manage your data source, use the following procedure. If you want to use
Liferay's built-in data source, you can skip this section.</text:p>
<text:list text:style-name="L51">
  <text:list-item>
    <text:p text:style-name="P341">Select
    <text:span text:style-name="T623">Services</text:span><text:span text:style-name="T624">
    </text:span><text:span text:style-name="T625">→</text:span><text:span text:style-name="T626">
    </text:span><text:span text:style-name="T627">Data</text:span><text:span text:style-name="T628">
    </text:span><text:span text:style-name="T629">Sources.</text:span>
    Click
    <text:span text:style-name="T630">New</text:span><text:span text:style-name="T631">
    </text:span><text:span text:style-name="T632">→</text:span><text:span text:style-name="T633">
    </text:span><text:span text:style-name="T634">Generic</text:span><text:span text:style-name="T635">
    </text:span><text:span text:style-name="T636">Data</text:span><text:span text:style-name="T637">
    </text:span><text:span text:style-name="T638">Source</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P341">Give your data source a name, such as
    <text:span text:style-name="T639">Liferay</text:span><text:span text:style-name="T640">
    </text:span><text:span text:style-name="T641">Data</text:span><text:span text:style-name="T642">
    </text:span><text:span text:style-name="T643">Source</text:span>.
    The JNDI name should be
    <text:span text:style-name="T644">jdbc/LiferayPool</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P341">Choose the type of database and click
    <text:span text:style-name="T645">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P341">Click
    <text:span text:style-name="T646">Next</text:span> three times. You
    should be on the
    <text:span text:style-name="T647">Connection</text:span><text:span text:style-name="T648">
    </text:span><text:span text:style-name="T649">Properties</text:span>
    screen. Enter the database name, the host name, the port, the
    database user name and the password. WebLogic uses this information
    to construct the appropriate JDBC URL to connect to your database.
    Click <text:span text:style-name="T650">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P341">WebLogic prompts you to confirm the
    information you've specified for your data source.</text:p>
    <text:p text:style-name="P341">Depending on the database you are
    using, you may need to specify additional parameters. For example,
    you may need to modify your JDBC URL to include additional
    parameters. If you need to access previous wizard pages to modify
    information, click
    <text:span text:style-name="T651">Back</text:span> to revisit those
    pages.</text:p>
    <text:p text:style-name="P341">When you're done specifying your
    configuration, click
    <text:span text:style-name="T652">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P341">Click
    <text:span text:style-name="T653">Test</text:span><text:span text:style-name="T654">
    </text:span><text:span text:style-name="T655">Configuration</text:span>
    to make sure WebLogic can connect to your database successfully.
    When it does, click
    <text:span text:style-name="T656">Finish</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P341">You will be back to the list of data
    sources. Notice your new data source has no value in the
    <text:span text:style-name="T657">Target</text:span> column. Click
    on your data source to edit it.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P341">Click the
    <text:span text:style-name="T658">Targets</text:span> tab and check
    off the server instance(s) to which you wish to deploy your data
    source. Then click
    <text:span text:style-name="T659">Save</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Next, let's configure a
mail session in WebLogic.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Mail
Configuration
<text:a xlink:type="simple" xlink:href="id=mail-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want WebLogic to
manage your mail sessions, use the following procedure. If you want to
use Liferay's built-in mail sessions, you can skip this
section.</text:p>
<text:list text:style-name="L52">
  <text:list-item>
    <text:p text:style-name="P342">Select
    <text:span text:style-name="T660">Mail</text:span><text:span text:style-name="T661">
    </text:span><text:span text:style-name="T662">Sessions</text:span>
    and create a new mail session which points to your mail
    server.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P342">Give it the name
    <text:span text:style-name="T663">Liferay</text:span><text:span text:style-name="T664">
    </text:span><text:span text:style-name="T665">Mail</text:span> and
    give it the JNDI name of
    <text:span text:style-name="T666">mail/MailSession</text:span> and
    click <text:span text:style-name="T667">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P342">Choose your server and then click
    <text:span text:style-name="T668">Finish</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Now let's make sure Liferay
can access this mail session.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Domain
Configuration - Continued
<text:a xlink:type="simple" xlink:href="id=domain-configuration-continued" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Let's revisit domain
configuration to make sure we'll be able to access your data source and
mail session from Liferay Portal.</text:p>
<text:list text:style-name="L53">
  <text:list-item>
    <text:p text:style-name="P343">Create a
    <text:span text:style-name="T669">portal-ext.properties</text:span>
    file in your Liferay Home folder.</text:p>
    <text:p text:style-name="P343">If you are using
    <text:span text:style-name="T670">WebLogic</text:span> to manage
    your data source, add the following to your
    <text:span text:style-name="T671">portal-ext.properties</text:span>
    file to refer to your data source:</text:p>
<text:p text:style-name="P344">jdbc.default.jndi.name=jdbc/LiferayPool</text:p>
    <text:p text:style-name="P343">If you are using
    <text:span text:style-name="T672">Liferay</text:span><text:span text:style-name="T673">
    </text:span><text:span text:style-name="T674">Portal</text:span> to
    manage your data source, follow the instructions in the
    <text:span text:style-name="T675">Deploy</text:span><text:span text:style-name="T676">
    </text:span><text:span text:style-name="T677">Liferay</text:span>
    section for using the setup wizard.</text:p>
    <text:p text:style-name="P343">If want to use
    <text:span text:style-name="T678">Liferay</text:span><text:span text:style-name="T679">
    </text:span><text:span text:style-name="T680">Portal</text:span> to
    manage your mail session, you can configure the mail session in the
    Control Panel. After starting your portal as described in the
    <text:span text:style-name="T681">Deploy</text:span><text:span text:style-name="T682">
    </text:span><text:span text:style-name="T683">Liferay</text:span>
    section, go to
    <text:span text:style-name="T684">Control</text:span><text:span text:style-name="T685">
    </text:span><text:span text:style-name="T686">Panel</text:span><text:span text:style-name="T687">
    </text:span><text:span text:style-name="T688">→</text:span><text:span text:style-name="T689">
    </text:span><text:span text:style-name="T690">Server</text:span><text:span text:style-name="T691">
    </text:span><text:span text:style-name="T692">Administration</text:span><text:span text:style-name="T693">
    </text:span><text:span text:style-name="T694">→</text:span><text:span text:style-name="T695">
    </text:span><text:span text:style-name="T696">Mail</text:span> and
    enter the settings for your mail session.</text:p>
    <text:p text:style-name="P343">If you are using
    <text:span text:style-name="T697">WebLogic</text:span> to manage
    your mail session, add the following to your
    <text:span text:style-name="T698">portal-ext.properties</text:span>
    file to reference that mail session:</text:p>
<text:p text:style-name="P345">mail.session.jndi.name=mail/MailSession</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P343">Lastly, you must provide WebLogic a
    reference to a version of Java Server Faces (JSF)--either version
    1.2 or 2.0--to use that library. Open the
    <text:span text:style-name="T699">WEB-INF/weblogic.xml</text:span>
    found in your Liferay Portal
    <text:span text:style-name="T700">.war</text:span> file. Insert the
    following deployment descriptor after the
    <text:span text:style-name="T701">&lt;context-root&gt;</text:span>
    element within the
    <text:span text:style-name="T702">&lt;weblogic-web-app&gt;</text:span>
    element. Make sure to specify the applicable JSF version:</text:p>
<text:p text:style-name="P346">&lt;library-ref&gt;</text:p>
<text:p text:style-name="P347"><text:s text:c="4" />&lt;library-name&gt;jsf&lt;/library-name&gt;</text:p>
<text:p text:style-name="P348"><text:s text:c="4" />&lt;specification-version&gt;1.2&lt;/specification-version&gt;</text:p>
<text:p text:style-name="P349"><text:s text:c="4" />&lt;implementation-version&gt;1.2&lt;/implementation-version&gt;</text:p>
<text:p text:style-name="P350"><text:s text:c="4" />&lt;exact-match&gt;false&lt;/exact-match&gt;</text:p>
<text:p text:style-name="P351">&lt;/library-ref&gt;</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Before we deploy Liferay,
we'll teach you how to enable and configure Java Security so that you
can start using Liferay's plugin security manager with the Liferay apps
you download and install.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Security
Configuration
<text:a xlink:type="simple" xlink:href="id=security-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">When you are ready to start
using other people's apps from Marketplace, you'll want to protect your
portal and your WebLogic server from security threats. To do so, you can
enable Java Security on your WebLogic server and specify a security
policy to grant your Liferay Portal access to your server.</text:p>
<text:p text:style-name="Text_20_body">First, let's grant Liferay access
to your server. For now, we'll open up all permissions--you can
fine-tune your policy's permissions later. Create a policy file named
<text:span text:style-name="T703">weblogic.policy</text:span> in your
<text:span text:style-name="T704">$WEBLOGIC_HOME/wlserver/server/lib</text:span>
folder and add the following contents:</text:p>
<text:p text:style-name="P352">grant {</text:p>
<text:p text:style-name="P353"><text:s text:c="4" />permission java.security.AllPermission;</text:p>
<text:p text:style-name="P354">};</text:p>
<text:p text:style-name="First_20_paragraph">To enable security on your
WebLogic server and direct the server to your policy file, open the
<text:span text:style-name="T705">setDomainEnv.[cmd|sh]</text:span> file
in your domain's folder. Then set the
<text:span text:style-name="T706">-Djava.security.manager</text:span>
Java option and set the property
<text:span text:style-name="T707">-Djava.security.policy==</text:span>
to the location of your
<text:span text:style-name="T708">weblogic.policy</text:span> file. You
can specify both settings on the same line like this:</text:p>
<text:p text:style-name="P355">-Djava.security.manager -Djava.security.policy==$WEBLOGIC_HOME/wlserver/ser\</text:p>
<text:p text:style-name="P356">ver/lib</text:p>
<text:p text:style-name="First_20_paragraph">The double equals sign
tells the app server to use this policy file on top of any existing
security policies.</text:p>
<text:p text:style-name="Text_20_body">For extensive information on Java
SE Security Architecture see its specification documents at
<text:a xlink:type="simple" xlink:href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/spec/security-spec.doc.html" office:name=""><text:span text:style-name="Definition">http://docs.oracle.com/javase/7/docs/technotes/guides/security/spec/security-spec.doc.html</text:span></text:a>.
Also, see section
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/development/-/ai/understanding-plugin-security-management-liferay-portal-6-2-dev-guide-11-en" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T709">Understanding</text:span><text:span text:style-name="T710">
</text:span><text:span text:style-name="T711">Plugin</text:span><text:span text:style-name="T712">
</text:span><text:span text:style-name="T713">Security</text:span><text:span text:style-name="T714">
</text:span><text:span text:style-name="T715">Management</text:span></text:span></text:a>
in Chapter 12 of the Developer's Guide to learn how to configure Liferay
plugin access to resources.</text:p>
<text:p text:style-name="Text_20_body">Now its the moment you've been
waiting for: Liferay deployment!</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Deploy
Liferay
<text:a xlink:type="simple" xlink:href="id=deploy-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">This section provides
instructions for deploying Liferay to your application server
domain.</text:p>
<text:p text:style-name="Text_20_body">Now, let's deploy Liferay
Portal.</text:p>
<text:list text:style-name="L54">
  <text:list-item>
    <text:p text:style-name="P357">Start your WebLogic server if it's
    not already started.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P357">Select
    <text:span text:style-name="T716">Deployments</text:span> and click
    the <text:span text:style-name="T717">Install</text:span> button.
    Upload the desired JSF
    <text:span text:style-name="T718">.war</text:span>
    file--<text:span text:style-name="T719">jsf-1.2.war</text:span> or
    <text:span text:style-name="T720">jsf-2.0.war</text:span>--from
    WebLogic's common deployable libraries folder and select
    <text:span text:style-name="T721">Install</text:span><text:span text:style-name="T722">
    </text:span><text:span text:style-name="T723">this</text:span><text:span text:style-name="T724">
    </text:span><text:span text:style-name="T725">deployment</text:span><text:span text:style-name="T726">
    </text:span><text:span text:style-name="T727">as</text:span><text:span text:style-name="T728">
    </text:span><text:span text:style-name="T729">a</text:span><text:span text:style-name="T730">
    </text:span><text:span text:style-name="T731">library</text:span> to
    your domain's server that will be running Liferay.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P357">After installing the JSF libraries,
    go back to deployments and select the Liferay
    <text:span text:style-name="T732">.war</text:span> file from the
    file system or click the
    <text:span text:style-name="T733">Upload</text:span><text:span text:style-name="T734">
    </text:span><text:span text:style-name="T735">Your</text:span><text:span text:style-name="T736">
    </text:span><text:span text:style-name="T737">File(s)</text:span>
    link to upload it and then click
    <text:span text:style-name="T738">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P357">Select
    <text:span text:style-name="T739">Install</text:span><text:span text:style-name="T740">
    </text:span><text:span text:style-name="T741">this</text:span><text:span text:style-name="T742">
    </text:span><text:span text:style-name="T743">deployment</text:span><text:span text:style-name="T744">
    </text:span><text:span text:style-name="T745">as</text:span><text:span text:style-name="T746">
    </text:span><text:span text:style-name="T747">an</text:span><text:span text:style-name="T748">
    </text:span><text:span text:style-name="T749">application</text:span>
    and click
    <text:span text:style-name="T750">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P357">If the default name is appropriate
    for your installation, keep it. Otherwise, give it a name of your
    choosing and click
    <text:span text:style-name="T751">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P357">Click
    <text:span text:style-name="T752">Finish</text:span>. After the
    deployment finishes, click
    <text:span text:style-name="T753">Save</text:span>. Liferay
    precompiles all the JSPs and Liferay launches.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Congratulations! You are
now running Liferay on Oracle WebLogic 12c.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Installing
Liferay on WebSphere 8.5
<text:a xlink:type="simple" xlink:href="id=installing-liferay-on-websphere-8-5" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T754">Tip:</text:span>
Throughout this installation and configuration process, WebSphere
prompts you to Click Save to apply changes to Master Configuration. Do
so intermittently to save your changes.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T755">Liferay</text:span><text:span text:style-name="T756">
</text:span><text:span text:style-name="T757">Home</text:span> is in a
folder called <text:span text:style-name="T758">liferay</text:span> in
the home folder of the user ID that is running WebSphere.</text:p>
<text:p text:style-name="Text_20_body">To work correctly on WebSphere
8.5, IBM's PM90932 patch must be installed. You can find more
information about this patch
<text:a xlink:type="simple" xlink:href="http://www-01.ibm.com/support/docview.wss?uid=swg1PM90932" office:name=""><text:span text:style-name="Definition">here</text:span></text:a>.</text:p>
<text:p text:style-name="Text_20_body">Please also note that the
WebSphere Application Liberty Profile is not supported by
Liferay.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Preparing
WebSphere for Liferay
<text:a xlink:type="simple" xlink:href="id=preparing-websphere-for-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">When the application server
binaries have been installed, start the
<text:span text:style-name="T759">Profile</text:span><text:span text:style-name="T760">
</text:span><text:span text:style-name="T761">Management</text:span><text:span text:style-name="T762">
</text:span><text:span text:style-name="T763">Tool</text:span> to create
a profile appropriate for Liferay.</text:p>
<text:list text:style-name="L55">
  <text:list-item>
    <text:p text:style-name="P358">Click on
    <text:span text:style-name="T764">Create…</text:span>. Choose
    <text:span text:style-name="T765">Application</text:span><text:span text:style-name="T766">
    </text:span><text:span text:style-name="T767">Server</text:span>.
    Click <text:span text:style-name="T768">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">Click the Advanced profile creation
    option and then click
    <text:span text:style-name="T769">Next</text:span>. Why Advanced?
    You can specify your own values for settings such as the location of
    the profile and names of the profile, node and host. You can assign
    your own ports. You can optionally choose whether to deploy the
    administrative console and sample application and also add
    web-server definitions if you wish. Web server definitions are used
    with IBM HTTP Server. For more information about these options,
    please see the WebSphere documentation.</text:p>
    <text:p text:style-name="P358"><draw:frame draw:name="img9"><draw:image xlink:href="../../images/websphere-01-profile.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">Check the box
    <text:span text:style-name="T770">Deploy</text:span><text:span text:style-name="T771">
    </text:span><text:span text:style-name="T772">the</text:span><text:span text:style-name="T773">
    </text:span><text:span text:style-name="T774">administrative</text:span><text:span text:style-name="T775">
    </text:span><text:span text:style-name="T776">console</text:span>.
    This gives you a web-based UI for working with your application
    server. Skip the default applications. You'd only install these on a
    development machine. Click
    <text:span text:style-name="T777">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">Set profile name and location. Ensure
    you specify a performance tuning setting other than
    <text:span text:style-name="T778">Development</text:span>, since
    you're installing a server for production use. Please see the
    WebSphere documentation for further information about performance
    tuning settings. Click
    <text:span text:style-name="T779">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">Choose node, server, and host names
    for your server. These will be specific to your environment. Click
    <text:span text:style-name="T780">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">Administrative security in WebSphere
    is a way to restrict who has access to the administrative tools. You
    may want to have it enabled in your environment so that a user name
    and password are required to administer the WebSphere server. Please
    see WebSphere's documentation for further information. Click
    <text:span text:style-name="T781">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">Each profile needs a security
    certificate, which comes next in the wizard. If you don't have
    certificates already, choose the option to generate a personal
    certificate and a signing certficate and click
    <text:span text:style-name="T782">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">Once the certificates are generated,
    set a password for your keystore. Click
    <text:span text:style-name="T783">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">Next, you can customize the ports
    this server profile uses. Be sure to choose ports that are open on
    your machine. When choosing ports, the wizard detects existing
    WebSphere installations and if it finds activity, it increments
    ports by one.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">Choose whether you want this profile
    started when the machine starts. Click
    <text:span text:style-name="T784">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">WebSphere ships with IBM HTTP Server,
    which is a rebranded version of Apache. Choose whether you want a
    web server definition, so that this JVM receives requests forwarded
    from the HTTP server. Please see WebSphere's documentation for
    details on this. When finished, click
    <text:span text:style-name="T785">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P358">The wizard then shows you a summary
    of what you selected, enabling you to keep your choices or go back
    and change something. When you're satisfied, click
    <text:span text:style-name="T786">Next</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img10"><draw:image xlink:href="../../images/websphere-03-summary.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">WebSphere then creates your
profile and finishes with a message telling you the profile was created
successfully. You're now ready to install Liferay!</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Copying
portal dependencies
<text:a xlink:type="simple" xlink:href="id=copying-portal-dependencies" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay ships with
dependency .jars it needs to have on the global classpath. These should
be copied to WebSphere's global folder provided for this
purpose:</text:p>
<text:p text:style-name="P359">[Install Location]/WebSphere/AppServer/lib/ext</text:p>
<text:p text:style-name="First_20_paragraph">If you have a JDBC database
driver .jar, copy it to this location as well. Once you've copied the
.jars, start the server profile you created for Liferay. Once it starts,
you're ready to configure your database.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Database
Configuration
<text:a xlink:type="simple" xlink:href="id=database-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want WebSphere to
manage the database connections, follow the instructions below. Note
this is not necessary if you're planning on using Liferay's standard
database configuration; in that case, skip this section. You'll set your
database information in Liferay's setup wizard after the
install.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img11"><draw:image xlink:href="../../images/02-websphere-jdbc-providers.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:list text:style-name="L56">
  <text:list-item>
    <text:p text:style-name="P360">Start WebSphere.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Open the Administrative Console and
    log in.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Click
    <text:span text:style-name="T787">Resources</text:span><text:span text:style-name="T788">
    </text:span><text:span text:style-name="T789">→</text:span><text:span text:style-name="T790">
    </text:span><text:span text:style-name="T791">JDBC</text:span><text:span text:style-name="T792">
    </text:span><text:span text:style-name="T793">Providers</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Click
    <text:span text:style-name="T794">New</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">For name, enter the name of JDBC
    provider (e.g.
    <text:span text:style-name="T795">MySQL</text:span><text:span text:style-name="T796">
    </text:span><text:span text:style-name="T797">JDBC</text:span><text:span text:style-name="T798">
    </text:span><text:span text:style-name="T799">Provider</text:span>).</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">For Implementation Class Name,
    enter:</text:p>
<text:p text:style-name="P361">com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Click
    <text:span text:style-name="T800">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Clear any text in classpath. You
    already copied the necessary
    <text:span text:style-name="T801">.jar</text:span>s to a location on
    the server's class path.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Click
    <text:span text:style-name="T802">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Click
    <text:span text:style-name="T803">Finish</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Click
    <text:span text:style-name="T804">Data</text:span><text:span text:style-name="T805">
    </text:span><text:span text:style-name="T806">Sources</text:span>
    under
    <text:span text:style-name="T807">Additional</text:span><text:span text:style-name="T808">
    </text:span><text:span text:style-name="T809">Properties</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Click
    <text:span text:style-name="T810">New</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Enter a name:
    <text:span text:style-name="T811">liferaydatabasesource</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Enter JNDI:
    <text:span text:style-name="T812">jdbc/LiferayPool</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Everything else should stay at the
    default values. Save the data source.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">When finished, go back into the data
    source and click
    <text:span text:style-name="T813">Custom</text:span><text:span text:style-name="T814">
    </text:span><text:span text:style-name="T815">Properties</text:span>
    and then click the
    <text:span text:style-name="T816">Show</text:span><text:span text:style-name="T817">
    </text:span><text:span text:style-name="T818">Filter</text:span><text:span text:style-name="T819">
    </text:span><text:span text:style-name="T820">Function</text:span>
    button. This is the second from last of the small icons under the
    <text:span text:style-name="T821">New</text:span> and
    <text:span text:style-name="T822">Delete</text:span>
    buttons.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Type
    <text:span text:style-name="T823">user</text:span> into the search
    terms and click
    <text:span text:style-name="T824">Go</text:span>.</text:p>
    <text:p text:style-name="P360"><draw:frame draw:name="img12"><draw:image xlink:href="../../images/02-modifying-data-source-properties-in-websphere.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Select the user property and give it
    the value of the user name to your database. Click
    <text:span text:style-name="T825">OK</text:span> and save to master
    configuration.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Do another filter search for the url
    property. Give it a value that points to your database. For example,
    the MySQL URL would be:
    <text:span text:style-name="T826">jdbc:mysql://localhost/lportal?useUnicode=true&amp;characterEncoding=UTF-8&amp;useFastDateParsing=false</text:span>.
    Click <text:span text:style-name="T827">OK</text:span> and save to
    master configuration.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Do another filter search for the
    password property. Enter the password for the user ID you added
    earlier as the value for this property. Click
    <text:span text:style-name="T828">OK</text:span> and save to master
    configuration.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P360">Go back to the data source page by
    clicking it in the breadcrumb trail. Click the
    <text:span text:style-name="T829">Test</text:span><text:span text:style-name="T830">
    </text:span><text:span text:style-name="T831">Connection</text:span>
    button. It should connect successfully.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Once you've set up your
database, you can set up your mail session.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Mail
Configuration
<text:a xlink:type="simple" xlink:href="id=mail-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you want WebSphere to
manage your mail sessions, use the following procedure. If you want to
use Liferay's built-in mail sessions, you can skip this
section.</text:p>
<text:list text:style-name="L57">
  <text:list-item>
    <text:p text:style-name="P362">Click
    <text:span text:style-name="T832">Resources</text:span><text:span text:style-name="T833">
    </text:span><text:span text:style-name="T834">→</text:span><text:span text:style-name="T835">
    </text:span><text:span text:style-name="T836">Mail</text:span><text:span text:style-name="T837">
    </text:span><text:span text:style-name="T838">→</text:span><text:span text:style-name="T839">
    </text:span><text:span text:style-name="T840">Mail</text:span><text:span text:style-name="T841">
    </text:span><text:span text:style-name="T842">Providers</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P362">Click the Built-In Mail Provider for
    your node and server.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P362">Click
    <text:span text:style-name="T843">Mail</text:span><text:span text:style-name="T844">
    </text:span><text:span text:style-name="T845">Sessions</text:span>
    and then click the <text:span text:style-name="T846">New</text:span>
    button.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P362">Give it a name of
    <text:span text:style-name="T847">liferaymail</text:span> and a JNDI
    name of
    <text:span text:style-name="T848">mail/MailSession</text:span>.
    Click <text:span text:style-name="T849">OK</text:span> and save to
    master configuration.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P362">Click
    <text:span text:style-name="T850">Security</text:span><text:span text:style-name="T851">
    </text:span><text:span text:style-name="T852">→</text:span><text:span text:style-name="T853">
    </text:span><text:span text:style-name="T854">Global</text:span><text:span text:style-name="T855">
    </text:span><text:span text:style-name="T856">Security</text:span>
    and de-select
    <text:span text:style-name="T857">Use</text:span><text:span text:style-name="T858">
    </text:span><text:span text:style-name="T859">Java</text:span><text:span text:style-name="T860">
    </text:span><text:span text:style-name="T861">2</text:span><text:span text:style-name="T862">
    </text:span><text:span text:style-name="T863">security</text:span><text:span text:style-name="T864">
    </text:span><text:span text:style-name="T865">to</text:span><text:span text:style-name="T866">
    </text:span><text:span text:style-name="T867">restrict</text:span><text:span text:style-name="T868">
    </text:span><text:span text:style-name="T869">application</text:span><text:span text:style-name="T870">
    </text:span><text:span text:style-name="T871">access</text:span><text:span text:style-name="T872">
    </text:span><text:span text:style-name="T873">to</text:span><text:span text:style-name="T874">
    </text:span><text:span text:style-name="T875">local</text:span><text:span text:style-name="T876">
    </text:span><text:span text:style-name="T877">resources</text:span>
    if it is selected. Click
    <text:span text:style-name="T878">Apply</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Great! Now you're ready to
deploy Liferay.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Deploy
Liferay
<text:a xlink:type="simple" xlink:href="id=deploy-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:list text:style-name="L58">
  <text:list-item>
    <text:p text:style-name="P363">Click
    <text:span text:style-name="T879">Applications</text:span> →
    <text:span text:style-name="T880">New</text:span><text:span text:style-name="T881">
    </text:span><text:span text:style-name="T882">Application</text:span>
    →
    <text:span text:style-name="T883">New</text:span><text:span text:style-name="T884">
    </text:span><text:span text:style-name="T885">Enterprise</text:span><text:span text:style-name="T886">
    </text:span><text:span text:style-name="T887">Application</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P363">Browse to the Liferay
    <text:span text:style-name="T888">.war</text:span> file and click
    <text:span text:style-name="T889">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P363">Leave
    <text:span text:style-name="T890">Fast</text:span><text:span text:style-name="T891">
    </text:span><text:span text:style-name="T892">Path</text:span>
    selected and click
    <text:span text:style-name="T893">Next</text:span>. Ensure that
    <text:span text:style-name="T894">Distribute</text:span><text:span text:style-name="T895">
    </text:span><text:span text:style-name="T896">Application</text:span>
    has been checked, and click
    <text:span text:style-name="T897">Next</text:span> again.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P363">Choose the WebSphere runtimes and/or
    clusters where you want Liferay deployed. Click
    <text:span text:style-name="T898">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P363">Map Liferay to the root context (/)
    and click
    <text:span text:style-name="T899">Next</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P363">Ensure that you have made all the
    correct choices and click
    <text:span text:style-name="T900">Finish</text:span>. When Liferay
    has installed, click
    <text:span text:style-name="T901">Save</text:span><text:span text:style-name="T902">
    </text:span><text:span text:style-name="T903">to</text:span><text:span text:style-name="T904">
    </text:span><text:span text:style-name="T905">Master</text:span><text:span text:style-name="T906">
    </text:span><text:span text:style-name="T907">Configuration</text:span>.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">You've now installed
Liferay, but don't start it yet. If you wish to use PACL, you have one
more thing to configure.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Enabling
Security for Portal Access Control Lists
<text:a xlink:type="simple" xlink:href="id=enabling-security-for-portal-access-control-lists" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">In the administrative
console, go to <text:span text:style-name="T908">Security</text:span>
$rarr;
<text:span text:style-name="T909">Global</text:span><text:span text:style-name="T910">
</text:span><text:span text:style-name="T911">Security</text:span>.
Check the box to enable Java 2 security, and click
<text:span text:style-name="T912">Apply</text:span>. Save to the master
configuration.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img13"><draw:image xlink:href="../../images/websphere-05-liferay-enable-security.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Next, you need to configure
security for the Liferay profile you created. This requires editing a
text file, which can be found nested several folders deep in WebSphere's
<text:span text:style-name="T913">profiles</text:span> directory. The
exact path depends on how you've named your profile, but it will be
something like this:</text:p>
<text:p text:style-name="P364">[profile_root]/config/cells/[cell_name]/nodes/[node_name]/app.policy</text:p>
<text:p text:style-name="First_20_paragraph">First, in each existing
<text:span text:style-name="T914">grant</text:span> section, replace the
content with
<text:span text:style-name="T915">java.security.AllPermission;</text:span>.
Then add the following lines to the bottom of the file:</text:p>
<text:p text:style-name="P365">grant codeBase &quot;file:${was.install.root}/lib/-&quot; {</text:p>
<text:p text:style-name="P366"><text:s text:c="2" />permission java.security.AllPermission;</text:p>
<text:p text:style-name="P367">};</text:p>
<text:p text:style-name="P368"></text:p>
<text:p text:style-name="P369">grant codeBase &quot;file:${was.install.root}/plugins/-&quot; {</text:p>
<text:p text:style-name="P370"><text:s text:c="2" />permission java.security.AllPermission;</text:p>
<text:p text:style-name="P371">};</text:p>
<text:p text:style-name="P372"></text:p>
<text:p text:style-name="P373">grant codeBase &quot;file:${server.root}/-&quot; {</text:p>
<text:p text:style-name="P374"><text:s text:c="2" />permission java.security.AllPermission;</text:p>
<text:p text:style-name="P375">};</text:p>
<text:p text:style-name="First_20_paragraph">Save the file. You should
now stop the profile and restart it. Once it comes up, you're ready to
start Liferay.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Start
Liferay
<text:a xlink:type="simple" xlink:href="id=start-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:list text:style-name="L59">
  <text:list-item>
    <text:p text:style-name="P376">If you plan to use Liferay's setup
    wizard, skip to the next step. If you wish to use WebSphere's data
    source and mail session, create a file called
    <text:span text:style-name="T916">portal-ext.properties</text:span>
    in your Liferay Home folder. Place the following text in the
    file:</text:p>
<text:p text:style-name="P377">jdbc.default.jndi.name=jdbc/LiferayPool</text:p>
<text:p text:style-name="P378">mail.session.jndi.name=mail/MailSession</text:p>
<text:p text:style-name="P379">setup.wizard.enabled=false</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P376">Select the Liferay application and
    click <text:span text:style-name="T917">Start</text:span>.</text:p>
    <text:p text:style-name="P376"><draw:frame draw:name="img14"><draw:image xlink:href="../../images/websphere-04-liferay-starting.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P376">In the setup wizard, select and
    configure your database type. Click
    <text:span text:style-name="T918">Finish</text:span> when you're
    done.</text:p>
    <text:p text:style-name="P376">Liferay then creates the tables it
    needs in the database.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Congratulations! You've
installed Liferay on WebSphere!</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Using
Liferay's setup wizard
<text:a xlink:type="simple" xlink:href="id=using-liferays-setup-wizard" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">To make it easy to
configure Liferay optimally for your use, the first thing you see when
browsing to your newly installed Liferay bundle is a setup wizard. This
gives you a convenient way to configure Liferay for your
purposes.</text:p>
<text:p text:style-name="Text_20_body">There are three sections of the
wizard: the portal, the administrator and the database. For the portal,
you need to supply the following information:</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T919">Portal</text:span><text:span text:style-name="T920">
</text:span><text:span text:style-name="T921">Name:</text:span> the name
of the web site you're powering with Liferay. In this book, we build a
website for a lunar colony. This site is called Lunar Resort, so we've
supplied <text:span text:style-name="T922">Lunar Resort</text:span> in
the screenshot below.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T923">Default</text:span><text:span text:style-name="T924">
</text:span><text:span text:style-name="T925">Language:</text:span>
choose the default locale where your site resides.</text:p>
<text:p text:style-name="Text_20_body">For the administrator, you need
to supply the following information:</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T926">First</text:span><text:span text:style-name="T927">
</text:span><text:span text:style-name="T928">Name:</text:span> the
first name of the user that has the administrator account.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T929">Last</text:span><text:span text:style-name="T930">
</text:span><text:span text:style-name="T931">Name:</text:span> the last
name of the user that has the administrator account.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T932">Email:</text:span>
the email address of the user that has the administrator
account.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img15"><draw:image xlink:href="../../images/setup-wizard-1.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Liferay supports just about all
the leading databases today:</text:p>
<text:list text:style-name="L60">
  <text:list-item>
    <text:p text:style-name="P380">DB2</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P380">MySQL</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P380">Oracle</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P380">PostgreSQL</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P380">SQL Server</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P380">Sybase</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">In addition to these,
Liferay also supports a few embedded databases that are designed for
development. We haven't listed these here because you're setting up a
production Liferay server, and you shouldn't use an embedded database
with a production box.</text:p>
<text:p text:style-name="Text_20_body">Before you fill out the database
section of Liferay's setup wizard, you should already have created a
database for Liferay to use. If you haven't, please see the section
above entitled
<text:span text:style-name="T933">Liferay's</text:span><text:span text:style-name="T934">
</text:span><text:span text:style-name="T935">Database</text:span>.</text:p>
<text:p text:style-name="Text_20_body">Open the Database section of the
wizard. From the select box, choose your database. You'll see a form
which lets you specify the URL to the database, the driver class, and
the user credentials (see below). Most of this is filled out already;
all you should need to do is supply the name of your database and the
server it's running on, as well as the user credentials.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img16"><draw:image xlink:href="../../images/setup-wizard-2.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Once you've filled out the form,
click
<text:span text:style-name="T936">Finish</text:span><text:span text:style-name="T937">
</text:span><text:span text:style-name="T938">Configuration</text:span>.
You'll see a message stating that Liferay is being installed as it
creates the tables and data it needs in its database. When it's
finished, it tells you the location of the configuration file
(<text:span text:style-name="T939">portal-setup-wizard.properties</text:span>)
where it saved all your settings. From here, you can go to your home
page.</text:p>
<text:p text:style-name="Text_20_body">Congratulations! You've just
installed Liferay Portal! The next thing you need to do is set up your
mail configuration, so Liferay can send email notifications to users.
This is covered in the Manual Configuration section below.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T940">Tip:</text:span>
The wizard is an extremely helpful tool, especially if you're setting up
Liferay for the first time or creating a completely fresh portal
instance. If you're a Liferay veteran and you already have your database
information and various properties set up, you can skip the wizard by
adding this line to your
<text:span text:style-name="T941">portal-ext.properties</text:span>
file:</text:p>
<text:p text:style-name="P381">setup.wizard.enabled=false</text:p>
<text:p text:style-name="First_20_paragraph">$$$</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T942">Tip:</text:span>
In Liferay 6.2, the admin user test@liferay.com is created by the setup
wizard even when a different user is specified. This means that two
admin users are created: test@liferay.com and the specified user. Unless
you're just installing Liferay for testing purposes, you should
deactivate the test@liferay.com user after your database has been
created.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Manual
Configuration
<text:a xlink:type="simple" xlink:href="id=manual-configuration" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">You don't have to use the
setup wizard to configure Liferay. The setup wizard behind the scenes
creates a configuration file that you can create manually. Create a text
file called
<text:span text:style-name="T943">portal-ext.properties</text:span> in
your Liferay Home folder. This file overrides default properties that
come with Liferay. The first setting you'll override is the default
configuration that points Liferay to the embedded HSQL
database.</text:p>
<text:p text:style-name="Text_20_body">As stated above, there are two
ways to set up the connection:</text:p>
<text:list text:style-name="L61">
  <text:list-item>
    <text:p text:style-name="P382">Use the built-in connection
    pool.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P382">Use your application server's
    connection pool.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Use the setup wizard if
you're using the built-in connection pool. If you want to use your
application server's pool, continue with this procedure.</text:p>
<text:p text:style-name="Text_20_body">If you want to use your
application server's connection pool, you will have to create one in
your application server that points to your database. The connection
pool should be called
<text:span text:style-name="T944">jdbc/LiferayPool</text:span>. In the
application server sections above, there are instructions for how to do
this on each application server that Liferay supports. To tell Liferay
to use your
<text:span text:style-name="T945">jdbc/LiferayPool</text:span>
connection pool, add the following directive to your
<text:span text:style-name="T946">portal-ext.properties</text:span>
file:</text:p>
<text:p text:style-name="P383">jdbc.default.jndi.name=jdbc/LiferayPool</text:p>
<text:p text:style-name="First_20_paragraph">Next, install Liferay
according to the instructions for your application server. Once it's
installed, you can set up the mail configuration.</text:p>
<text:p text:style-name="Text_20_body">For mail, you can use Liferay's
control panel to create the configuration and this is the recommended
way. Go to
<text:span text:style-name="T947">Control</text:span><text:span text:style-name="T948">
</text:span><text:span text:style-name="T949">Panel</text:span><text:span text:style-name="T950">
</text:span><text:span text:style-name="T951">→</text:span><text:span text:style-name="T952">
</text:span><text:span text:style-name="T953">Server</text:span><text:span text:style-name="T954">
</text:span><text:span text:style-name="T955">Administration</text:span><text:span text:style-name="T956">
</text:span><text:span text:style-name="T957">→</text:span><text:span text:style-name="T958">
</text:span><text:span text:style-name="T959">Mail</text:span> and enter
your settings for your mail session settings. If, however, you're
setting up a lot of Liferay machines and they're all going to have
similar mail configurations, it's easier to do the configuration once
and then copy the configuration file to multiple machines. In this case,
you'll want to use the
<text:span text:style-name="T960">portal-ext.properties</text:span>
file. To use the built-in mail session, use the following properties and
customize their values for your environment:</text:p>
<text:p text:style-name="P384">mail.session.mail.pop3.host=localhost</text:p>
<text:p text:style-name="P385">mail.session.mail.pop3.password=</text:p>
<text:p text:style-name="P386">mail.session.mail.pop3.port=110</text:p>
<text:p text:style-name="P387">mail.session.mail.pop3.user=</text:p>
<text:p text:style-name="P388">mail.session.mail.smtp.auth=false</text:p>
<text:p text:style-name="P389">mail.session.mail.smtp.host=localhost</text:p>
<text:p text:style-name="P390">mail.session.mail.smtp.password=</text:p>
<text:p text:style-name="P391">mail.session.mail.smtp.port=25</text:p>
<text:p text:style-name="P392">mail.session.mail.smtp.user=</text:p>
<text:p text:style-name="P393">mail.session.mail.store.protocol=pop3</text:p>
<text:p text:style-name="P394">mail.session.mail.transport.protocol=smtp</text:p>
<text:p text:style-name="First_20_paragraph">To use your application
server's mail session, create it first. Then specify it in the
<text:span text:style-name="T961">portal-ext.properties</text:span>
file:</text:p>
<text:p text:style-name="P395">mail.session.jndi.name=mail/MailSession</text:p>
<text:p text:style-name="First_20_paragraph">When you've finished, save
the file.</text:p>
<text:p text:style-name="Text_20_body">All the instructions above
assumed that you wanted to install Liferay Portal at the root context of
your server. But what if that isn't the case? Next, you'll see how to
use a different context for Liferay Portal.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Making
Liferay Coexist with Other Java EE Applications
<text:a xlink:type="simple" xlink:href="id=making-liferay-coexist-with-other-java-ee-applications" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay Portal by default
is configured to sit at the root (i.e.,
<text:span text:style-name="T962">/</text:span>) of your application
server. Dedicating your application server to running only Liferay
Portal is a good practice, allowing for separation between your portal
environment and your web application environment. This is generally a
best practice for portals, which by definition are application
development platforms in and of themselves. For that reason, your
instance of Liferay is likely to be hosting many applications and even
integrating several of them together on a single page. For this reason,
you should design your system so your portal environment has all the
resources it needs to do this. Configuring it so it is the sole consumer
of any other <text:span text:style-name="T963">.war</text:span> files
that get deployed to the application server helps to make sure your
system performs optimally.</text:p>
<text:p text:style-name="Text_20_body">If, however, you want Liferay to
share space on an application server with other applications, you can.
In this instance, you may not want to make Liferay the default
application in the root context of the server. If you want to install
Liferay in a context other than the root context, follow the
instructions from your app server vendor. No additional steps are
necessary.</text:p>
<text:p text:style-name="Text_20_body">Now that you have Liferay
installed in the context you wish, you'll want to understand Liferay's
releases and the process for keeping your installation up to date. We'll
spend a brief amount of time on that next.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Understanding
Liferay's Releases
<text:a xlink:type="simple" xlink:href="id=understanding-liferays-releases" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Which version of Liferay
should you install? That's an easy question to answer: if this is a new
installation, we recommend you install the latest version available. If
you want to understand how Liferay releases work, read on. Otherwise,
you can skip this section for now and read it later.</text:p>
<text:p text:style-name="Text_20_body">Liferay's release process follows
a prescribed structure that is consistent from one release to the next.
Each release has a specific number sequence attached to it, signifying
the type of release it is: major, minor or maintenance release. Each
release also has a term attached to it to indicate its intended level of
quality.</text:p>
<text:p text:style-name="Text_20_body">EE subscribers have access to
additional maintenance releases, along with specific
<text:span text:style-name="T964">Fix</text:span><text:span text:style-name="T965">
</text:span><text:span text:style-name="T966">Packs</text:span> and
<text:span text:style-name="T967">Hot</text:span><text:span text:style-name="T968">
</text:span><text:span text:style-name="T969">Fixes</text:span> that
make applying updates to production environments safer and
faster.</text:p>
<text:p text:style-name="Text_20_body">Let's start with an explanation
of Liferay's version structure. Liferay versions are organized in a
straightforward numerical system consisting of a three digit number. For
example, 6.1.2. These numbers represent the type of the release:
Major.Minor.Maintenance.</text:p>
<text:p text:style-name="Text_20_body">A change in the first or second
digit of the version (e.g., 6.x to 7.x or 6.1 to 6.2) is a major or
minor release. This means that there are changes in functionality or new
functionality based on high demand. There are new features and bug fixes
from prior releases. There are also architectural changes, changes to
APIs (as part of the deprecation process), or changes to internal schema
for frameworks such as Service Builder, because new features have been
added. Customizations may be affected when installing. Customers should
leverage the upgrade tools and documentation.</text:p>
<text:p text:style-name="Text_20_body">A change in the third digit of
the version scheme (e.g, 6.2.1 to 6.2.2) is a maintenance release. This
means that each maintenance release provides an improved level of
security and reliability. Customizations are generally safe, but we
recommend doing a review. No new features are included.</text:p>
<text:p text:style-name="Text_20_body">These rules are relaxed when a
minor or major release is still in beta quality.</text:p>
<text:p text:style-name="Text_20_body">Now let's delve into the
evolution of versions.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Release
Process
<text:a xlink:type="simple" xlink:href="id=release-process" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Each release of Liferay has
a surname that specifies its expected quality. This is needed because
pre-releases of Liferay look very much like maintenance releases when
viewed solely through their version numbers. The surname in general
replaces the third digit in the version, but is visible through the logs
and administration UIs. Here is a description of each surname and what
it means:</text:p>
<text:list text:style-name="L62">
  <text:list-item>
    <text:p text:style-name="P396"><text:span text:style-name="T970">Milestone</text:span>
    and <text:span text:style-name="T971">Beta:</text:span> (6.2 M1, 6.2
    B1, 6.2 B2, ...) There can be zero or more of these types within
    each minor or major release. These releases are meant for testing
    and to provide Liferay feedback through the beta testing category in
    the forums. There will likely be major changes in milestone
    releases, but beta releases are considered &quot;feature
    complete&quot; and should have only bug fixes.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P396"><text:span text:style-name="T972">Release</text:span><text:span text:style-name="T973">
    </text:span><text:span text:style-name="T974">Candidates:</text:span>
    (6.2 RC1, 6.2 RC2) There can be zero, one, or more of these right
    after the beta releases. These releases appear near the end of the
    release process and are candidates for release. As such, they should
    have minimal to no bugs, but because they are very new, some minor
    bugs may have slipped by.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P396"><text:span text:style-name="T975">General</text:span><text:span text:style-name="T976">
    </text:span><text:span text:style-name="T977">Availability:</text:span>
    (6.2 GA1, 6.2 GA2, ....) There can be one or more of these releases.
    A General Availability release is a re-label of the last release
    candidate, based on internal testing and feedback from beta testers.
    These releases are stable and are made available via Liferay's
    Downloads page for CE and on the Customer Portal for EE.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Armed with this
information, here's our advice for how to manage your Liferay
installation.</text:p>
<text:list text:style-name="L63">
  <text:list-item>
    <text:p text:style-name="P397">When starting a new project, always
    use the latest stable version available; that is, the latest
    available GA. At the time of writing, the most recent version is
    Liferay CE 6.2 GA1 (6.2.0) or Liferay EE 6.1 GA2 (6.2.00).</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P397">Always update to the latest
    maintenance release available for the functional version (major or
    minor) that you are using. For example, if you started your project
    with Liferay 6.2.0 GA1, it is recommended that you switch to GA2
    if/when it becomes available to take advantage of bug fixes and
    improvements. If you have a subscription, you can benefit from the
    fixes faster by requesting fix packs and hot fixes from the support
    team.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P397">You are always welcome to use any
    preview, beta or release candidate. In fact, that's why they
    exist--so as many people as possible start using it and provide us
    their feedback. Please note, we do not recommend using pre-releases
    (milestones, betas, or release candidates) in production. You may
    not want to use these releases even during development if you have
    tight deadlines, since you may hit some unexpected bugs.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P397">Plugins that work in any GA or fix
    pack version will work in any later maintenance release. That is, a
    plugin developed for Liferay 6.2 GA1 will also work in Liferay 6.2
    GA2 or a GA2 fix pack.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">For more details on
updating Liferay Portal, see Upgrading Liferay in chapter 17.</text:p>
<text:p text:style-name="Text_20_body">Liferay Portal is a very flexible
application that runs well on several different server environments.
It's simple to install and follows a systematic versioning system that
makes it easy to keep current with the latest updates. The strength of
the Liferay community helps detect potential issues early that are then
reported through the forums and are later fixed in a series of
maintenance releases.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Summary
<text:a xlink:type="simple" xlink:href="id=summary-12" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">This chapter is a guide to
everything about installing Liferay. Whether you choose a Liferay bundle
or an existing application server, Liferay Portal integrates seamlessly
with your enterprise Java environment. It is supported on more
application servers than any other portal platform, allowing you to
preserve your investment in your application server of choice or giving
you the freedom to move to a different application server platform.
Liferay is committed to providing you this freedom: we have 500 test
servers certifying our builds with roughly 10,000 tests per version of
Liferay Portal. Each of those tests are run on all of our different
supported combinations of application servers, databases and operating
systems. Because of this, you can be sure we are committed to supporting
you on your environment of choice. You can feel safe knowing you have
the freedom to use the software platform that is best for your
organization and that Liferay Portal runs and performs well on
it.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Advanced
Portal Operation
<text:a xlink:type="simple" xlink:href="id=advanced-portal-operation" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">In this chapter, you'll
find several advanced features of Liferay Portal, including portal
maintenance, backup, and logging. You'll also learn how to access
Liferay's web services remotely. It's generally not much more
complicated to maintain a running Liferay instance than it is to
maintain the application server upon which it's running. However,
Liferay provides tools for logging, patching, and upgrading Liferay that
you should know how to use. It's also important to follow secure backup
procedures to protect your Liferay instance's source code, database, and
properties files.</text:p>
<text:p text:style-name="Text_20_body">We'll discuss the following
topics in this section:</text:p>
<text:list text:style-name="L64">
  <text:list-item>
    <text:p text:style-name="P398">Backing Up a Liferay
    Installation</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P398">Changing Logging Levels</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P398">Patching Liferay</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P398">Upgrading Liferay</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P398">Sandboxing Portlets to Ensure Portal
    Resiliency</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P398">Using Web Services for Remote
    Portlets (WSRP)</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P398">Remotely Accessing Liferay
    Services</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">First, you'll learn how to
back up a Liferay installation.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Backing up
a Liferay Installation
<text:a xlink:type="simple" xlink:href="id=backing-up-a-liferay-installation" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Once you have an
installation of Liferay Portal running, you'll want to have proper
backup procedures in place in case of a catastrophic hardware failure of
some kind. Liferay isn't very different from any other application that
may be running on your application server. Nevertheless, there are some
specific components you should include in your backup plan.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Backing up
Source Code
<text:a xlink:type="simple" xlink:href="id=backing-up-source-code" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you have extended
Liferay or have written any plugins, they should be stored in a source
code repository such as Git, Subversion, or CVS, unless you're Linus
Torvalds, and then tarballs are okay too (that's a joke). Your source
code repository should be backed up on a regular basis to preserve your
ongoing work. This probably goes without saying in your organization, as
nobody wants to lose source code that's taken months to produce, but we
thought we should mention it anyway.</text:p>
<text:p text:style-name="Text_20_body">If you're extending Liferay with
an Ext plugin, you'll want to make sure you also store the version of
the Liferay source on which your extension environment is based. This
allows your developers convenient access to all the tools they need to
build your extension and deploy it to a server.</text:p>
<text:p text:style-name="Text_20_body">Let's look at the items that need
to be backed up in your Liferay installation.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Backing up
Liferay's File System
<text:a xlink:type="simple" xlink:href="id=backing-up-liferays-file-system" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay's configuration
file,
<text:span text:style-name="T978">portal-ext.properties</text:span>,
gets stored in the
<text:span text:style-name="T979">Liferay</text:span><text:span text:style-name="T980">
</text:span><text:span text:style-name="T981">Home</text:span> folder,
which is generally one folder up from where your application server is
installed (see the
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/installation-and-setup-liferay-portal-6-2-user-guide-15-en" office:name=""><text:span text:style-name="Definition">Installation
and Setup</text:span></text:a> chapter of this guide for specific
details for your application server). At a minimum, this file should be
backed up, but it is generally best to back up your whole application
server.</text:p>
<text:p text:style-name="Text_20_body">If you've followed the non-plugin
procedure (see chapter 19) to modify your Ehcache configuration, you'll
have cache configuration files in the deploy location of Liferay. You'll
need to back up this location. If you're using the plugin procedure
(i.e., the recommended procedure), your cache configuration settings are
stored in your source code repository, which is backed up
separately.</text:p>
<text:p text:style-name="Text_20_body">Liferay stores configuration
files, search indexes, and cache information in a folder called
<text:span text:style-name="T982">/data</text:span> in Liferay Home. If
you're using the File System store or the Advanced File System store,
the media repository is stored here (by default) too. You should always
back up the contents of your Liferay Home folder.</text:p>
<text:p text:style-name="Text_20_body">If you've modified the location
where the Document Library stores files, you should also back up this
location.</text:p>
<text:p text:style-name="Text_20_body">That covers the file system
locations Liferay uses. Next, let's discuss how to back up Liferay's
database.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Backing up
Liferay's Database
<text:a xlink:type="simple" xlink:href="id=backing-up-liferays-database" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay's database is the
central repository for all of the Portal's information and is the most
important component that needs to be backed up. You can do this by
backing up the database live (if your database allows this) or by
exporting the database and then backing up the exported file. For
example, MySQL ships with a
<text:span text:style-name="T983">mysqldump</text:span> utility which
allows you to export the entire database and data into a large SQL file.
This file can then be backed up. In case of a database failure, this
file can be used to recreate the state of the database at the time the
dump was created.</text:p>
<text:p text:style-name="Text_20_body">If you're using Liferay's
Documents and Media Library with the Jackrabbit JSR-170 repository to
store documents in a database, the Jackrabbit database should be backed
up also. If you've placed your search index into a database (not
recommended; see chapter 19 for information on using Cluster Link or
Solr), that database should be backed up as well.</text:p>
<text:p text:style-name="Text_20_body">Search indexes can be backed up
as well, if you wish to avoid reindexing your entire portal after you do
your restore. This is easiest to do if you have a separate Solr
environment upon which your index is stored. If you're in a clustered
configuration and you're replicating indexes, you'll need to back up
each index replica.</text:p>
<text:p text:style-name="Text_20_body">Restoring your application
server, your Liferay Home folder, the locations of any file system-based
media repositories, and your database from a backup system should give
you a functioning portal. Restoring search indexes should avoid the need
to reindex when you bring your site back up after a catastrophic
failure. Good, consistent backup procedures are key to successfully
recovering from a hardware failure.</text:p>
<text:p text:style-name="Text_20_body">But what about maintenance while
your server is running? Liferay lets you view a lot of what is going on
through its logging system.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Liferay's
Logging System
<text:a xlink:type="simple" xlink:href="id=liferays-logging-system" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay's logging system
uses Log4j extensively to implement logging for nearly every class in
the portal. If you need to debug something specific while the system is
running, you can use the control panel to set logging levels by class
dynamically.</text:p>
<text:p text:style-name="Text_20_body">To view the log levels, go to the
control panel, click
<text:span text:style-name="T984">Server</text:span><text:span text:style-name="T985">
</text:span><text:span text:style-name="T986">Administration</text:span>
in the Server section, and then click the
<text:span text:style-name="T987">Log</text:span><text:span text:style-name="T988">
</text:span><text:span text:style-name="T989">Levels</text:span>
tab.</text:p>
<text:p text:style-name="Text_20_body">A paginated list of logging
categories appears. These categories correspond to Liferay classes that
have log messages in them. By default, all categories are set to display
messages only if there is an error that occurs in the class. This is why
you see ERROR displayed in all of the drop-down list boxes on the right
side of the portlet.</text:p>
<text:p text:style-name="Text_20_body">Each category is filtered by its
place in the class hierarchy. For example, if you wanted to see logging
for a specific class that is registered in Liferay, you would browse to
that specific class and change its log level to something that is more
descriptive, such as DEBUG. Once you click the
<text:span text:style-name="T990">Save</text:span> button at the bottom
of the list, you'll start seeing DEBUG messages from that class in your
application server's log file.</text:p>
<text:p text:style-name="Text_20_body">If you're not sure which class
you want to see log messages for, you can find a place higher up in the
hierarchy and select the package name instead of an individual class
name. If you do this, messages for every class lower in the hierarchy
will be displayed in your application server's log file.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img17"><draw:image xlink:href="../../images/maintaining-log-levels.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Be careful when you do this. If
you set the log level to DEBUG somewhere near the top of the hierarchy
(such as <text:span text:style-name="T991">com.liferay</text:span>, for
example), you may wind up with a lot of messages in your log file. This
could make it difficult to find the one you were looking for, and causes
the server to do more work writing messages to the log.</text:p>
<text:p text:style-name="Text_20_body">If you want to set the log level
for one of your own classes in a deployed plugin, you can register that
class with Liferay to control the log levels more easily, so long as
your class uses Liferay's logging system to do its logging.</text:p>
<text:p text:style-name="Text_20_body">You will first need to import
interfaces and implement logging in your class, with statements such as
these (taken from Liferay's
<text:span text:style-name="T992">S3Store</text:span> class):</text:p>
<text:p text:style-name="P399">import com.liferay.portal.kernel.log.Log;</text:p>
<text:p text:style-name="P400">import com.liferay.portal.kernel.log.LogFactoryUtil;</text:p>
<text:p text:style-name="P401"></text:p>
<text:p text:style-name="P402">...</text:p>
<text:p text:style-name="P403"></text:p>
<text:p text:style-name="P404">private static Log _log = LogFactory.getLog(S3Store.class);</text:p>
<text:p text:style-name="First_20_paragraph">You would then use this
<text:span text:style-name="T993">_log</text:span> variable to create
log messages in your code for the various logging levels:</text:p>
<text:p text:style-name="P405">_log.error(s3se.getMessage());</text:p>
<text:p text:style-name="First_20_paragraph">To enable your logging
messages to appear in your server's log file via the control panel,
click the
<text:span text:style-name="T994">Add</text:span><text:span text:style-name="T995">
</text:span><text:span text:style-name="T996">Category</text:span> tab
on the same
<text:span text:style-name="T997">Log</text:span><text:span text:style-name="T998">
</text:span><text:span text:style-name="T999">Levels</text:span>
page.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img18"><draw:image xlink:href="../../images/maintaining-add-log-category.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">You'll see you can add a logging
category. Put in the fully qualified name of your class or of the
package that contains the classes whose log messages you want to view,
choose a log level, then click the
<text:span text:style-name="T1000">Save</text:span> button. You will now
start to see log messages from your own class or classes in the server's
log file.</text:p>
<text:p text:style-name="Text_20_body">Logs are great for figuring out
issues in production. But what if Liferay contacts you via its support
channel with a bug fix or a security enhancement? Read on to learn how
to patch Liferay.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1001">Note</text:span>:
Logging changes within the control panel don't persist across restarts.
If you want to make your changes persistent, you can create a
<text:span text:style-name="T1002">META-INF/portal-log4j-ext.xml</text:span>
file and deploy it, using the
<text:span text:style-name="T1003">portal-log4j.xml</text:span> file
from Liferay's source as a guide.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Patching
Liferay
<text:a xlink:type="simple" xlink:href="id=patching-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img19"><draw:image xlink:href="../../images/ee-feature-web.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">While we strive for perfection
with every release of Liferay Portal, the reality of the human condition
dictates that releases of the product may not be as perfect as
originally intended. But we've planned for that. Included with every
Liferay bundle is a patching tool that can handle the installation of
two types of patches: hot fixes and fix packs.</text:p>
<text:p text:style-name="Text_20_body">A hot fix is provided to a
customer when a customer contacts Liferay about an issue, and Liferay's
support team--working with the customer--determines that the problem is
indeed an issue with the product that needs to be fixed. Support fixes
the bug and provides a hot fix to the customer immediately. This is a
short-term fix that solves the issue for the customer as quickly as
possible.</text:p>
<text:p text:style-name="Text_20_body">On a regular schedule, these hot
fixes are bundled together into fix packs. Fix packs are provided to all
of Liferay's customers and are component-based. This means any issues
with the content management system will be bundled together separately
from issues with another component, such as the message boards. This
lets you determine which patches are critical and which are not, based
on your usage. Of course, if Liferay issues a security advisory, that's
something you're always going to want to patch.</text:p>
<text:p text:style-name="Text_20_body">Now that you know what patching
is all about, let's check out the tool.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Installing
the patching tool
<text:a xlink:type="simple" xlink:href="id=installing-the-patching-tool" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you're using a Liferay
bundle, congratulations! The patching tool is already installed. Your
job isn't done yet, however, because Liferay
<text:span text:style-name="T1004">might</text:span> have updated the
patching tool. Always check the Customer Portal to see if the patching
tool has been updated first. But even if you forget to check, the
patching tool will tell you if it needs to be updated when you run it. A
lot of planning and forethought has gone into the patching system to
make it run as smoothly as possible.</text:p>
<text:p text:style-name="Text_20_body">You follow the same procedure
whether you're installing or upgrading the patching tool. Once you've
obtained it from the customer portal, unzip it to the Liferay Home
folder. This is the folder where you've placed your
<text:span text:style-name="T1005">portal-ext.properties</text:span>
file and where by default the
<text:span text:style-name="T1006">data</text:span> folder resides. This
is generally one folder up from where your application server is
installed, but some application servers are different. If you don't know
where Liferay Home is on your system, check chapter 14 to see where this
folder is for your specific application server.</text:p>
<text:p text:style-name="Text_20_body">If you're upgrading the patching
tool, all you need to do is unzip the new version on top of the old
version. Note that if you're doing this on LUM (Linux, Unix, Mac)
machines, you'll need to make the
<text:span text:style-name="T1007">patching-tool.sh</text:span> script
executable.</text:p>
<text:p text:style-name="Text_20_body">After the patching tool is
installed, you need to let it auto-discover your Liferay installation.
Then it will determine what your release level is and what your
application server environment is. This is a simple command to run on
LUM:</text:p>
<text:p text:style-name="P406">./patching-tool.sh auto-discovery</text:p>
<text:p text:style-name="First_20_paragraph">or on Windows:</text:p>
<text:p text:style-name="P407">patching-tool auto-discovery</text:p>
<text:p text:style-name="First_20_paragraph">From here on, for brevity
we'll use the LUM version of the command. Why? Because Liferay is open
source; there's no open source variant of Windows (ReactOS is still in
alpha, so it doesn't count); and therefore my (RS) unscientific
impression is that more people will run Liferay on open source
technology than not. If I'm wrong, I'm wrong, but there are still many
other examples of documentation that defaults to Windows, so we still
get to be different.</text:p>
<text:p text:style-name="Text_20_body">If you've installed the patching
tool in a non-standard location, you'll have to give this command
another parameter to point it to your Liferay installation. For example,
if you've installed a Liferay/Tomcat bundle in
<text:span text:style-name="T1008">/opt/Liferay</text:span>, you'd issue
this command:</text:p>
<text:p text:style-name="P408">./patching-tool.sh auto-discovery /opt/Liferay/tomcat-7.0.21</text:p>
<text:p text:style-name="First_20_paragraph">In all, this is pretty
simple. Now let's see how to use the patching tool to get your patches
installed.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Installing
patches
<text:a xlink:type="simple" xlink:href="id=installing-patches" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The absolute first thing
you must do when installing one or more patches is to shut down your
server. On Windows operating systems, files that are in use are locked
by the OS, and won't be patched. On LUM systems, you can generally
replace files that are running, but of course that still leaves the old
ones loaded in memory. So your best bet is to shut down the application
server that's running Liferay before you install a patch.</text:p>
<text:p text:style-name="Text_20_body">Liferay distributes patches as
<text:span text:style-name="T1009">.zip</text:span> files, whether they
are hot fixes or fix packs. When you receive one, either via a LESA
ticket (hot fix) or through downloading a fix pack from the customer
portal, you'll need to place it in the
<text:span text:style-name="T1010">patches</text:span> folder, which is
inside the patching tool's home folder. Once you've done that, it's a
simple matter to install it. First, execute</text:p>
<text:p text:style-name="P409">./patching-tool.sh info</text:p>
<text:p text:style-name="First_20_paragraph">This shows you a list of
patches you've already installed, along with a list of patches that
<text:span text:style-name="T1011">can</text:span> be installed, from
what's in the <text:span text:style-name="T1012">patches</text:span>
folder. To install the available patches, issue the following
command:</text:p>
<text:p text:style-name="P410">./patching-tool.sh install</text:p>
<text:p text:style-name="First_20_paragraph">Liferay copies files into
the plugins in deployment time. If these files are patched in the
portal, they need to be updated in the plugins as well. In these cases,
the patching tool notifies you about the change. You can run the
following command to update these files automatically:</text:p>
<text:p text:style-name="P411">./patching-tool.sh update-plugins</text:p>
<text:p text:style-name="First_20_paragraph">If you do not wish to have
the patching tool update the plugins, it's enough to re-deploy them. If
there are new indexes created by the patch, the patching tool notifies
you to update them. To get the list, run this command:</text:p>
<text:p text:style-name="P412">./patching-tool.sh index-info</text:p>
<text:p text:style-name="First_20_paragraph">As there's no database
connection at patching time, the patches needed to be created at portal
startup. In order to get the indexes automatically created, add the
following line to the
<text:span text:style-name="T1013">portal-ext.properties</text:span>
file if the server has permissions to modify the indexes on the
database:</text:p>
<text:p text:style-name="P413">database.indexes.update.on.startup=true</text:p>
<text:p text:style-name="First_20_paragraph">Otherwise, you have to
create the indexes manually. Check the output of the
<text:span text:style-name="T1014">./patching-tool index-info</text:span>
command for more details.</text:p>
<text:p text:style-name="Text_20_body">Once your patches have been
installed, you can verify them by using the
<text:span text:style-name="T1015">./patching-tool.sh info</text:span>
command, which now shows your patch in the list of installed patches.
Next, let's look now at how to manage your patches.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Handling
hot fixes and patches
<text:a xlink:type="simple" xlink:href="id=handling-hot-fixes-and-patches" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">As stated above, hot fixes
are short term fixes provided as quickly as possible and fix packs are
larger bundles of hot fixes provided to all customers at regular
intervals. If you already have a hot fix installed, and the fix pack
which contains that hot fix is released, you can rest assured the
patching tool will manage this for you. Fix packs always supersede hot
fixes, so when you install your fix pack, the hot fix that it already
contains is uninstalled, and the fix pack version is installed in its
place.</text:p>
<text:p text:style-name="Text_20_body">Sometimes there can be a fix to a
fix pack. This is also handled automatically. If a new version of a fix
pack is released, you can use the patching tool to install it. The
patching tool uninstalls the old fix pack and installs the new version
in its place.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Fix pack
dependencies
<text:a xlink:type="simple" xlink:href="id=fix-pack-dependencies" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Some fix packs require
other fix packs to be installed first. If you attempt to install a fix
pack that depends on another fix pack, the patching tool will notify you
of this so you can go to the customer portal and obtain the fix pack
dependency. Once all the necessary fix packs are available in the
<text:span text:style-name="T1016">patches</text:span> folder, the
patching tool will install them.</text:p>
<text:p text:style-name="Text_20_body">The patching tool can also remove
patches.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Removing
or reverting patches
<text:a xlink:type="simple" xlink:href="id=removing-or-reverting-patches" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Have you noticed that the
patching tool only seems to have an
<text:span text:style-name="T1017">install</text:span> command? This is
because patches are managed not by the command, but by what appears in
the <text:span text:style-name="T1018">patches</text:span> folder. You
manage the patches you have installed by adding or removing patches from
this folder. If you currently have a patch installed and you don't want
it installed, remove it from the
<text:span text:style-name="T1019">patches</text:span> folder. Then run
the
<text:span text:style-name="T1020">./patching-tool.sh install</text:span>
command, and the patch is removed.</text:p>
<text:p text:style-name="Text_20_body">If you want to remove all patches
you've installed, use the
<text:span text:style-name="T1021">./patching-tool.sh revert</text:span>
command. This removes all patches from your installation.</text:p>
<text:p text:style-name="Text_20_body">What we've described so far is
the simplest way to use the patching tool, but you can also use the
patching tool in the most complex, multi-VM, clustered environments.
This is done by using profiles.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Using
profiles with the patching tool
<text:a xlink:type="simple" xlink:href="id=using-profiles-with-the-patching-tool" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">When you ran the
auto-discovery task after installing the patching tool, it created a
default profile that points to the application server it discovered.
This is the easiest way to use the patching tool, and is great for
smaller, single server installations. But we realize many Liferay
installations are sized accordingly to serve millions of pages per day,
and the patching tool has been designed for this as well. So if you're
running a small, medium, or large cluster of Liferay machines, you can
use the patching tool to manage all of them using profiles.</text:p>
<text:p text:style-name="Text_20_body">The auto-discovery task creates a
properties file called
<text:span text:style-name="T1022">default.properties</text:span>. This
file contains the detected configuration for your application server.
But you're not limited to only one server which the tool can detect. You
can have it auto-discover other runtimes, or you can manually create new
profiles yourself.</text:p>
<text:p text:style-name="Text_20_body">To have the patching tool
auto-discover other runtimes, you'll need to use a few more command line
parameters:</text:p>
<text:p text:style-name="P414">./patching-tool.sh [name of profile] auto-discovery [path/to/runtime]</text:p>
<text:p text:style-name="First_20_paragraph">This will run the same
discovery process, but on a path you choose, and the profile information
will go into a
<text:span text:style-name="T1023">[your profile name].properties</text:span>
file.</text:p>
<text:p text:style-name="Text_20_body">Alternatively, you can manually
create your profiles. Using a text editor, create a
<text:span text:style-name="T1024">[profile name].properties</text:span>
file in the same folder as the patching tool script. You can place the
following properties in the file:</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1025">patching.mode:</text:span>
This can be <text:span text:style-name="T1026">binary</text:span> (the
default) or <text:span text:style-name="T1027">source</text:span>, if
you're patching the source tree you're working with. Liferay patches
contain both binary and source patches. If your development team is
extending Liferay, you'll want to provide the patches you install to
your development team so they can patch their source tree.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1028">patches.folder:</text:span>
Specify the location where you'll copy your patches. By default, this is
<text:span text:style-name="T1029">./patches</text:span>.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1030">war.path:</text:span>
No, no one's angry. This is a property for which you specify the
location of the Liferay installation inside your application server.
Alternatively, you can specify a .war file here, and you'll be able to
patch a Liferay .war for installation to your application
server.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1031">global.lib.path:</text:span>
Specify the location where .jar files on the global classpath are
stored. If you're not sure, search for your
<text:span text:style-name="T1032">portal-service.jar</text:span> file;
it's on the global classpath. This property is only valid if your
<text:span text:style-name="T1033">patching.mode</text:span> is
<text:span text:style-name="T1034">binary</text:span>.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1035">source.path:</text:span>
Specify the location of your Liferay source tree. This property is only
valid if your
<text:span text:style-name="T1036">patching.mode</text:span> is
<text:span text:style-name="T1037">source</text:span>.</text:p>
<text:p text:style-name="Text_20_body">You can have as many profiles as
you want, and use the same patching tool to patch all of them. This
helps to keep all your installations in sync.</text:p>
<text:p text:style-name="Text_20_body">Now that you know how to patch an
existing installation of Liferay, let's turn to how you'd upgrade
Liferay from an older release to the current release.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Upgrading
Liferay
<text:a xlink:type="simple" xlink:href="id=upgrading-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay upgrades are fairly
straightforward. A consistent set of steps is all you need to follow to
upgrade a standard Liferay installation. Things do get more complicated
if your organization has used Ext plugins to customize Liferay. It's
possible that API changes in the new version will break your existing
code. This, however, is usually pretty easy for your developers to fix.
Portlet plugins which use Liferay APIs should be reviewed and their
services rebuilt against the new release. Theme plugins may require some
modifications to take advantage of new features, and if they're using
Liferay APIs, they should be reviewed. Much effort has been made to make
upgrades as painless as possible; however, this is not a guarantee
everything will work without modification. Ext plugins are the most
complicating factor in an upgrade, so it is important to test as much as
possible.</text:p>
<text:p text:style-name="Text_20_body">Prior to Liferay 6.1 SP2, you
could upgrade only from one major release to the next major release. For
example, you could upgrade directly from Liferay 5.2.x to 6.0.x, but not
from 5.1.x to 6.0.x. If you needed to upgrade over several major
releases, you needed to run the upgrade procedure for each major release
until you reached the release you want. This doesn't mean you needed to
run the procedure for every point release or service pack; you only
needed to run the procedure for the major releases. A good practice was
to use the latest version of each major release to upgrade your
system.</text:p>
<text:p text:style-name="Text_20_body">Liferay introduced the
<text:span text:style-name="T1038">seamless</text:span><text:span text:style-name="T1039">
</text:span><text:span text:style-name="T1040">upgrade</text:span>
feature with Liferay 6.1. Seamless upgrades allow Liferay to be upgraded
more easily. In most cases, pointing the latest version of Liferay to
the database of the older version is enough. Of course, before
upgrading, you should test the upgrade in a non-production environment.
You should also always back up your database and other important
information and make all the other appropriate preparations that we'll
discuss in the section.</text:p>
<text:p text:style-name="Text_20_body">Now that we've discussed the
general philosophy of upgrading, let's outline the procedure for
upgrading to Liferay 6.2.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Preparing
for an Upgrade
<text:a xlink:type="simple" xlink:href="id=preparing-for-an-upgrade" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Before you begin upgrading
Liferay to a new version, consider your current Liferay installation. If
you're running Liferay EE, is it patched to the most recent Service Pack
level? If not, refer to the section on Patching Liferay before you
upgrade; the upgrade process is designed to occur on a fully patched
Liferay. If you're running Liferay CE, make sure you have the latest GA
release.</text:p>
<text:p text:style-name="Text_20_body">Now that Liferay is updated to
the latest release of its current version, the first upgrade task is to
size up your situation. Do this by asking yourself a few questions from
the chart below. First: What version of Liferay was the first version
you installed? If it was 6.0 or 6.1, there are fewer steps, because you
won't have to worry about migrating your permission algorithm. If,
however, you never upgraded to permissions algorithm 6 or you're still
running a 5.x Liferay, you need to migrate to algorithm 6 before
attempting to upgrade to Liferay 6.2.</text:p>
<text:p text:style-name="Text_20_body">Next, if you're upgrading from a
version of Liferay older than 6.1, you'll have to migrate your image
gallery over to Documents and Media. Finally, take note of all the
plugins you have installed. Every plugin must be updated to run on the
current release. This is easy to do with Marketplace: after you bring up
Liferay 6.2, install from Marketplace any of the plugins you had
installed previously. For custom plugins, have your development team
update them to run on the new version of Liferay.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img20"><draw:image xlink:href="../../images/upgrade-decisions.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">The flowchart illustrates the
procedure described above. Use it to determine your course of action for
the upgrade. Each step is described fully below so that you can perform
your upgrade as efficiently as possible. Be sure to test the upgrade in
a non-production environment before upgrading your production Liferay
instance.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1041">Note</text:span>:
In Liferay 6.2, the Global repository that was used to store Web Content
and Documents and Media is now its own site with the reserved friendly
URL <text:span text:style-name="T1042">/global</text:span>; upgrading to
Liferay 6.2 will fail if any sites are using the same URL. Before
upgrading to Liferay 6.2, make sure no current friendly URL violates the
restriction.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:p text:style-name="Text_20_body">Let's look at the preparatory
tasks you should perform one by one.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Migrate to
Algorithm 6
<text:a xlink:type="simple" xlink:href="id=migrate-to-algorithm-6" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If your Liferay
installation has existed for a while, you might be on a different
permission algorithm than the one that's available in Liferay Portal
6.1. Permission algorithms 1-5 were deprecated in Liferay Portal 6.0 and
were removed in 6.1, which means you must migrate
<text:span text:style-name="T1043">before</text:span> you
upgrade.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1044">Important</text:span>:
Before upgrading a Liferay instance that's using one of permissions
algorithms 1-5, you <text:span text:style-name="T1045">must</text:span>
migrate to permissions algorithm 6 before attempting to upgrade to
Liferay 6.2. You can't use the seamless upgrade feature to upgrade
directly to 6.2 because Liferay's permissions migration tool is not
included with Liferay 6.2. Follow the instructions in this section to
migrate to permissions algorithm 6 before continuing with your
upgrade.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:p text:style-name="Text_20_body">If you're on Liferay 5.2 or
below, you must upgrade to the latest available release of Liferay 6.0
first. Please follow the instructions in the
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.0/administration/-/ai/upgrading-lifer-4" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T1046">Liferay</text:span><text:span text:style-name="T1047">
</text:span><text:span text:style-name="T1048">Portal</text:span><text:span text:style-name="T1049">
</text:span><text:span text:style-name="T1050">Administrator's</text:span><text:span text:style-name="T1051">
</text:span><text:span text:style-name="T1052">Guide</text:span></text:span></text:a>
to do this. We will assume for the rest of this section that you have
upgraded to Liferay 6.0 but that's it's configured to use an older
algorithm than algorithm 6.</text:p>
<text:p text:style-name="Text_20_body">The first thing you need to do,
if this is not done already, is to upgrade your Liferay installation to
algorithm 5. If you've already done that, great! You can skip the rest
of this paragraph. If not, shut down your server, edit your
<text:span text:style-name="T1053">portal-ext.properties</text:span>
file, and modify/add the following property so that it reads like
this:</text:p>
<text:p text:style-name="P415">permissions.user.check.algorithm=5</text:p>
<text:p text:style-name="First_20_paragraph">Restart your server. As
Liferay starts, it upgrades your permissions algorithm to algorithm 5.
Review your system to make sure that your permissions configuration is
working properly (it should be).</text:p>
<text:p text:style-name="Text_20_body">Next, log in as an administrator
and navigate to the Control Panel. Go to
<text:span text:style-name="T1054">Server</text:span><text:span text:style-name="T1055">
</text:span><text:span text:style-name="T1056">Administration</text:span>
and select
<text:span text:style-name="T1057">Data</text:span><text:span text:style-name="T1058">
</text:span><text:span text:style-name="T1059">Migration</text:span>
from the menu along the top of the screen. A section entitled
<text:span text:style-name="T1060">Legacy</text:span><text:span text:style-name="T1061">
</text:span><text:span text:style-name="T1062">Permissions</text:span><text:span text:style-name="T1063">
</text:span><text:span text:style-name="T1064">Migration</text:span>
appears at the bottom of the page.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img21"><draw:image xlink:href="../../images/17-convert-permissions-algorithm.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Algorithms 5 and 6 do not support
adding permissions at the user level. If you have permissions set for
individual users, the converter can simulate this for you. To do this,
it auto-generates roles for each individual permission, and then assigns
those roles to the users who have individualized permissions. If you
have a lot of these, you'll likely want to go through and clean them up
after the conversion process. To generate these roles, check the
<text:span text:style-name="T1065">Generate</text:span><text:span text:style-name="T1066">
</text:span><text:span text:style-name="T1067">Custom</text:span><text:span text:style-name="T1068">
</text:span><text:span text:style-name="T1069">Roles</text:span> box. If
you do not generate the roles, all custom permissions set for individual
users are discarded.</text:p>
<text:p text:style-name="Text_20_body">Click
<text:span text:style-name="T1070">Execute</text:span> to convert all
existing users and roles to algorithm 6. When the process completes,
shut down your server. Edit your
<text:span text:style-name="T1071">portal-ext.properties</text:span>
file and modify the algorithm property to show that you're now using
algorithm 6:</text:p>
<text:p text:style-name="P416">permissions.user.check.algorithm=6</text:p>
<text:p text:style-name="First_20_paragraph">Restart your server.
Congratulations! You've successfully migrated your installation to use
the latest, highest performing permissions algorithm. Next, might need
to explicitly set your Image Gallery storage option.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Migrate
Your Image Gallery Images
<text:a xlink:type="simple" xlink:href="id=migrate-your-image-gallery-images" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay 6.1 introduced a
major change to how Liferay handles files. Liferay 6.0 and previous
versions had a separate Document Library and Image Gallery. In Liferay
6.1 and 6.2, these are combined into the Documents and Media repository.
If you were using Liferay's Image Gallery to store images, these can be
migrated over during an upgrade, but you'll have to take some extra
steps first.</text:p>
<text:p text:style-name="Text_20_body">In Liferay 6.0, you had three
ways you could store images in the Image Gallery. You could use the
<text:span text:style-name="T1072">DatabaseHook</text:span> and store
them as BLOBs in the database; you could use the
<text:span text:style-name="T1073">DLHook</text:span> to store them in
the Document Library, or you could use the
<text:span text:style-name="T1074">FileSystemHook</text:span> to store
them in a folder on your server's file system. Before you upgrade,
you'll need to set whichever property you were using in your 6.0
<text:span text:style-name="T1075">portal-ext.properties</text:span>
file, because by default, none of them are enabled in 6.1. Setting one
of the properties triggers the migration during the upgrade process.
Below are the three properties; you'll need to set only
<text:span text:style-name="T1076">one</text:span> of them (the one you
were using).</text:p>
<text:p text:style-name="P417">image.hook.impl=com.liferay.portal.image.DatabaseHook</text:p>
<text:p text:style-name="P418">image.hook.impl=com.liferay.portal.image.DLHook</text:p>
<text:p text:style-name="P419">image.hook.impl=com.liferay.portal.image.FileSystemHook</text:p>
<text:p text:style-name="First_20_paragraph">By default, Liferay 6.0
used the <text:span text:style-name="T1077">FileSystemHook</text:span>.
If you never customized this property for your installation, you'd use
the <text:span text:style-name="T1078">FileSystemHook</text:span>
property above. If you customized the property, you should know which
one you used, and it is likely already in your
<text:span text:style-name="T1079">portal-ext.properties</text:span>
file.</text:p>
<text:p text:style-name="Text_20_body">The third thing you need to do to
prepare for your upgrade is to review the new property
defaults.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Review the
Liferay 6.2 Properties Defaults
<text:a xlink:type="simple" xlink:href="id=review-the-liferay-6-2-properties-defaults" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The next thing you'll need
to look at are the defaults that have changed between your old Liferay
instance's version and Liferay 6.2. These are preserved in a
<text:span text:style-name="T1080">portal-legacy-[version].properties</text:span>
file in Liferay's
<text:span text:style-name="T1081">/WEB-INF/classes</text:span> folder
and in the
<text:span text:style-name="T1082">portal-impl/src</text:span> folder of
Liferay's source code. For example, here are some 6.1 legacy
properties:</text:p>
<text:p text:style-name="P420">hibernate.cache.use_query_cache=true</text:p>
<text:p text:style-name="P421">hibernate.cache.use_second_level_cache=true</text:p>
<text:p text:style-name="P422">locale.prepend.friendly.url.style=1</text:p>
<text:p text:style-name="P423">passwords.encryption.algorithm.legacy=SHA</text:p>
<text:p text:style-name="P424">mobile.device.styling.wap.enabled=true</text:p>
<text:p text:style-name="P425">journal.articles.search.with.index=false</text:p>
<text:p text:style-name="First_20_paragraph">The
<text:span text:style-name="T1083">passwords.encryption.algorithm.legacy</text:span>
and
<text:span text:style-name="T1084">mobile.device.styling.wap.enabled</text:span>
properties do not exist in 6.1. In 6.2, the default values of some
properties have changed and some new properties have been
added:</text:p>
<text:p text:style-name="P426">hibernate.cache.use_query_cache=false</text:p>
<text:p text:style-name="P427">hibernate.cache.use_second_level_cache=false</text:p>
<text:p text:style-name="P428">locale.prepend.friendly.url.style=3</text:p>
<text:p text:style-name="P429">passwords.encryption.algorithm.legacy=</text:p>
<text:p text:style-name="P430">mobile.device.styling.wap.enabled=false</text:p>
<text:p text:style-name="P431">journal.articles.search.with.index=true</text:p>
<text:p text:style-name="First_20_paragraph">Please refer to the 6.1 and
6.2 versions of Liferay's
<text:span text:style-name="T1085">portal.properties</text:span> file
for explanations of each of these properties. This file can be found in
the your Liferay instance's
<text:span text:style-name="T1086">/WEB-INF/lib/portal-impl.jar</text:span>
file. Online versions can also be found at
<text:a xlink:type="simple" xlink:href="http://docs.liferay.com/portal/6.1/propertiesdoc/portal.properties.html" office:name=""><text:span text:style-name="Definition">http://docs.liferay.com/portal/6.1/propertiesdoc/portal.properties.html</text:span></text:a>
and
<text:a xlink:type="simple" xlink:href="http://docs.liferay.com/portal/6.2/propertiesdoc/portal.properties.html" office:name=""><text:span text:style-name="Definition">http://docs.liferay.com/portal/6.2/propertiesdoc/portal.properties.html</text:span></text:a>.
Please also note the following changes in behavior:</text:p>
<text:list text:style-name="L65">
  <text:list-item>
    <text:p text:style-name="P432">By default, Liferay 6.1 used the DES
    encryption algorithm with a 56 bit key size for the company level
    encryption algorithm.</text:p>
<text:p text:style-name="P433">company.encryption.algorithm=DES</text:p>
<text:p text:style-name="P434">company.encryption.key.size=56</text:p>
    <text:p text:style-name="P432">By default, Liferay 6.2 uses the much
    stronger AES encryption algorithm with a 128 bit key size for the
    company level encryption algorithm. AES-128 is believed to be
    secure, is fast, and is a standard for symmetric key
    encryption.</text:p>
<text:p text:style-name="P435">company.encryption.algorithm=AES</text:p>
<text:p text:style-name="P436">company.encryption.key.size=128</text:p>
    <text:p text:style-name="P432">However, the upgrade for the
    <text:span text:style-name="T1087">company.encryption.algorithm</text:span>
    property is only performed if the value for this properties was not
    customized, i.e., if it was still set to DES. The upgrade doesn't
    make any changes if a different algorithm was explicitly selected.
    (Note that this does not affect password encryption which a
    different property handles:
    <text:span text:style-name="T1088">passwords.encryption.algorithm</text:span>.)</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P432">By default, Liferay 6.1 used the SHA
    algorithm for password encryption.</text:p>
<text:p text:style-name="P437">passwords.encryption.algorithm=SHA</text:p>
    <text:p text:style-name="P432">By default, Liferay 6.2 uses a
    stronger algorithm, PBKDF2WithHmacSHA1/160/128000, for password
    encryption. PBKDF2 (Password-Based Key Derivation Function 2) is a
    key derivation function that's part of RSA's PKCS (Public-Key
    Cryptography Standards) series: PKCS #5, version 2.0. It's also
    described in the IETF's
    <text:a xlink:type="simple" xlink:href="http://tools.ietf.org/html/rfc2898" office:name=""><text:span text:style-name="Definition">RFC
    2898</text:span></text:a>. The
    <text:span text:style-name="T1089">PBKDF2WithHmacSHA1/160/128000</text:span>
    algorithm uses a keyed-hash message authentication code using SHA-1
    and generates 160-bit hashes using 128,000 rounds. One round is a
    single iteration of the key derivation function.</text:p>
<text:p text:style-name="P438">passwords.encryption.algorithm=PBKDF2WithHmacSHA1/160/128000</text:p>
    <text:p text:style-name="P432">Performance is affected by password
    encryption during sign-in and password changes. In 2012,
    <text:a xlink:type="simple" xlink:href="http://www.owasp.org" office:name=""><text:span text:style-name="Definition">OWASP</text:span></text:a>,
    the Open Web Application Security Project, recommended to use 64,000
    rounds and to double the number of rounds each year. If using PBKDF2
    with 128,000 rounds is too expensive for the hardware on which
    you're running Liferay, you can downgrade your security algorithm to
    improve performance by choosing a smaller number. For example, you
    set the following:</text:p>
<text:p text:style-name="P439">passwords.encryption.algorithm=PBKDF2WithHmacSHA1/160/64000</text:p>
    <text:p text:style-name="P432">If you'd like your upgrade to migrate
    your password encryption algorithm, you need to specify the legacy
    password encryption algorithm from which you're migrating. For
    example, if you were using the 6.1 default before your upgrade,
    you'd set the following property:</text:p>
<text:p text:style-name="P440">passwords.encryption.algorithm.legacy=SHA</text:p>
    <text:p text:style-name="P432">Set this property before performing
    an upgrade so that both existing users' and new users' passwords are
    re-encrypted with the new algorithm.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P432">After upgrading from Liferay 6.1 to
    Liferay 6.2, users must sign back in to the portal even if they were
    using the
    <text:span text:style-name="T1090">Remember</text:span><text:span text:style-name="T1091">
    </text:span><text:span text:style-name="T1092">Me</text:span>
    feature of the Sign In portlet. After the upgrade, the
    <text:span text:style-name="T1093">Remember</text:span><text:span text:style-name="T1094">
    </text:span><text:span text:style-name="T1095">Me</text:span>
    feature works correctly: users can log in to the portal, close their
    browser, open a new browser window, navigate to the portal, and
    still be logged in.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">If you don't like the 6.2
default properties, you can change them back in one shot by adding a
system property to your JVM's startup. This differs by application
servers. In Tomcat, you'd modify
<text:span text:style-name="T1096">setenv.sh</text:span>/<text:span text:style-name="T1097">setenv.bat</text:span>
and append the option
<text:span text:style-name="T1098">-Dexternal-properties=portal-legacy-[version].properties</text:span>
to the environment variable JAVA_OPTS. The scripts
<text:span text:style-name="T1099">setenv.sh</text:span> or
<text:span text:style-name="T1100">setenv.bat</text:span> are not
delivered with default Tomcat, but do exist in the bundles. If they're
there, Tomcat uses them in the startup process, so it's a nice way to
separate your own settings from Tomcat's default shell scripts.
Alternatively, of course, you can override some or all of them in your
<text:span text:style-name="T1101">portal-ext.properties</text:span>
along with your other overrides.</text:p>
<text:p text:style-name="Text_20_body">If you're not using Tomcat, check
your application server's documentation to see how to modify runtime
properties. Your final task is to catalog all the plugins you have
installed, so you can install the new versions in your upgraded
system.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Catalog
All Installed Plugins
<text:a xlink:type="simple" xlink:href="id=catalog-all-installed-plugins" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Finally, you need to take
note of any plugins you have installed. Liferay's plugins are usually
version-specific, so you'll need to obtain new versions of them for the
new release of Liferay. If you have custom plugins created by your
development team, they'll need to build, test, and optionally modify
them to work with the new release of Liferay. Don't attempt an upgrade
without collecting all the plugins you'll need first.</text:p>
<text:p text:style-name="Text_20_body">For Liferay 6.2, the Web Content
List portlet is deprecated. During the deprecation period, the code will
still be part of the product, but will be disabled by default. To enable
Web Content List, you'll need to modify the
<text:span text:style-name="T1102">liferay-portlet.xml</text:span> file
by setting the
<text:span text:style-name="T1103">&lt;include&gt;false&lt;/include&gt;</text:span>
tag to <text:span text:style-name="T1104">true</text:span>. However, all
the functionality of this portlet is provided by the Asset Publisher
portlet. The Web Content List portlet is expected to be removed in the
next release.</text:p>
<text:p text:style-name="Text_20_body">Once you've upgraded your
permissions algorithm, reviewed your properties, and collected all the
plugins you'll need, you're ready to follow the upgrade procedure.
Remember to back up your system before you begin.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Upgrade
Choices: Upgrade a Bundle or Upgrade Manually
<text:a xlink:type="simple" xlink:href="id=upgrade-choices-upgrade-a-bundle-or-upgrade-manually" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">There are two different
procedures to upgrade Liferay. The first one, upgrading a Liferay
bundle, is the most common. The second procedure is for manually
upgrading a Liferay installation on an application server. We'll discuss
both.</text:p>
<text:p text:style-name="Text_20_body">In both cases, Liferay
auto-detects whether the database requires an upgrade the first time the
new version is started. When Liferay does this, it upgrades the database
to the format required by the new version. To perform this task, Liferay
<text:span text:style-name="T1105">must</text:span> be accessing the
database with a database user account that can create, drop and modify
tables. Make sure you have granted these permissions to the database
user account before you attempt to upgrade Liferay. And, of course,
we'll run the risk of overly repeating ourselves: back up your
database.</text:p>
<text:p text:style-name="Text_20_body">Let's look at upgrading a bundle,
which is the easiest upgrade path.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Upgrading
a Bundle
<text:a xlink:type="simple" xlink:href="id=upgrading-a-bundle" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you're running a Liferay
bundle, the best way to do the upgrade is to follow the steps below. The
new Liferay is installed in a newer version of your bundle runtime. For
example, the Liferay bundle for 6.1 uses a different version of Tomcat
than the Liferay bundle for 6.2. We generally recommend you use the
latest version of your runtime bundle, as it will be supported the
longest.</text:p>
<text:list text:style-name="L66">
  <text:list-item>
    <text:p text:style-name="P441">Obtain the new bundle. Unzip the
    bundle to an appropriate location on your system.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P441">Copy your
    <text:span text:style-name="T1106">portal-ext.properties</text:span>
    file and your <text:span text:style-name="T1107">data</text:span>
    folder to the new bundle.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P441">Review your
    <text:span text:style-name="T1108">portal-ext.properties</text:span>
    file as described above. Make sure you're using permissions
    algorithm 6. If you were using the Image Gallery, make the necessary
    modifications so your files are migrated to Documents and Media.
    Review the new defaults and decide whether you want to use them.
    Review any other modifications you've made.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P441">Start your application server. Watch
    the console as Liferay starts: it upgrades the database
    automatically.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P441">When the upgrade completes, install
    any plugins you were using in your old version of Liferay. Make sure
    you use the versions of those plugins that are designed for Liferay
    6.2. If you have your own plugins, your development team will need
    to migrate the code in these ahead of time and provide .war files
    for you.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P441">Browse around in your new
    installation and verify everything is working. Have your QA team
    test everything. If all looks good, you can delete the old
    application server with the old release of Liferay in it from the
    bundle directory. You have a backup of it anyway, right?</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">As you can see, upgrading a
bundle is generally pretty simple. But not everybody can use bundles:
sometimes, specific application servers or application server versions
are mandated by the environment you're in or by management. For this
reason, Liferay also ships as an installable .war file that can be used
on any supported application server.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Upgrading
Manually
<text:a xlink:type="simple" xlink:href="id=upgrading-manually" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Running a manual upgrade is
almost as easy as upgrading a bundle:</text:p>
<text:list text:style-name="L67">
  <text:list-item>
    <text:p text:style-name="P442">Verify your application server is
    supported by Liferay. You can do this by viewing the appropriate
    document on the Customer Portal (EE), in chapter 14 (because there
    are installation instructions for it), or on liferay.com (CE). If
    your application server isn't supported by Liferay 6.2,
    <text:span text:style-name="T1109">do</text:span><text:span text:style-name="T1110">
    </text:span><text:span text:style-name="T1111">not</text:span><text:span text:style-name="T1112">
    </text:span><text:span text:style-name="T1113">continue!</text:span>
    You'll need to upgrade or switch to a supported application server
    first.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P442">Obtain the Liferay Portal .war file
    and the dependency .jars archive.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P442">Copy your customized
    <text:span text:style-name="T1114">portal-ext.properties</text:span>
    file to a safe place and review it as described above, making all
    the appropriate changes.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P442">Undeploy the old version of Liferay
    and shut down your application server.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P442">Copy the new versions of Liferay's
    dependency .jars to a location on your server's class path,
    overwriting the ones you already have for the old version of
    Liferay. This location is documented for your application server in
    chapter 14.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P442">Deploy the new Liferay .war file to
    your application server. Follow the deployment instructions in
    chapter 14.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P442">Start (or, if your app server has a
    console from which you've installed the .war, restart) your
    application server. Watch the console as Liferay starts: it should
    upgrade the database automatically. Verify your portal is operating
    normally, and then install any plugins you were using in your old
    version of Liferay. Make sure you use the versions of those plugins
    designed for Liferay 6.2. If you have your own plugins, your
    development team will need to migrate the code in these ahead of
    time and provide .war files to you.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P442">Browse around in your new
    installation and verify everything is working. Have your QA team
    test everything. If all looks good, you're finished.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">That's all there is to it.
Most everything is handled by Liferay's upgrade procedure. Note as
stated above, if you have to upgrade over several Liferay versions, you
will need to repeat these steps for each major release.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Post-Upgrade
Tasks
<text:a xlink:type="simple" xlink:href="id=post-upgrade-tasks" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">After upgrading to Liferay
6.2, you should reindex your portal's search indexes. Liferay 6.2
indexes new information in many places, including Documents and Media,
Web Content, and Bookmarks. To reindex all search indexes, navigate to
the
<text:span text:style-name="T1115">Control</text:span><text:span text:style-name="T1116">
</text:span><text:span text:style-name="T1117">Panel</text:span> →
<text:span text:style-name="T1118">Server</text:span><text:span text:style-name="T1119">
</text:span><text:span text:style-name="T1120">Administration</text:span>
and click on
<text:span text:style-name="T1121">Reindex</text:span><text:span text:style-name="T1122">
</text:span><text:span text:style-name="T1123">all</text:span><text:span text:style-name="T1124">
</text:span><text:span text:style-name="T1125">search</text:span><text:span text:style-name="T1126">
</text:span><text:span text:style-name="T1127">indexes</text:span>. This
invokes each of your portal's indexer classes, ensuring that your search
indexes contain the updated data that 6.2 indexes.</text:p>
<text:p text:style-name="Text_20_body">Do you have some troublesome
required portlets running in your portal? Wouldn't it be great if you
could isolate them so they wouldn't affect the overall health of your
portal? We'll show you how to use Liferay's Sandboxing feature to pen up
those pesky portlets, next.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Sandboxing
Portlets to Ensure Portal Resiliency
<text:a xlink:type="simple" xlink:href="id=sandboxing-portlets-to-ensure-portal-resiliency" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img22"><draw:image xlink:href="../../images/ee-feature-web.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">The performance, health, and
stability of a portal deployment is heavily dependent upon the portlet
modules deployed to it. If one portlet leaks memory or is extremely
slow, your entire portal can crash due to a dreaded
<text:span text:style-name="T1128">OutOfMemoryError</text:span> or can
slow to a crawl.</text:p>
<text:p text:style-name="Text_20_body">Liferay Portal 6.2 introduces a
sandboxing feature that enables you to run troublesome portlets in their
own container (or &quot;sandbox&quot;), reducing any adverse impact they
may have on the health and stability of your portal. The feature is
available in Liferay's Sandbox App. The app lets you create sandboxes to
run portlets in separate JVMs, freeing your portal's JVM from the
resource consumption of those portlets. We refer to the portal's JVM
instance as the
<text:span text:style-name="T1129">Master</text:span><text:span text:style-name="T1130">
</text:span><text:span text:style-name="T1131">Portal</text:span><text:span text:style-name="T1132">
</text:span><text:span text:style-name="T1133">Instance</text:span>
(<text:span text:style-name="T1134">MPI</text:span>) and the sandbox
JVMs as
<text:span text:style-name="T1135">Slave</text:span><text:span text:style-name="T1136">
</text:span><text:span text:style-name="T1137">Portal</text:span><text:span text:style-name="T1138">
</text:span><text:span text:style-name="T1139">Instances</text:span>
(<text:span text:style-name="T1140">SPIs</text:span>). Since SPIs run on
the same host as the MPI, communication between them is very fast. The
fact that sandboxed portlets are running in SPIs is transparent to your
users. Portal users continue to use these portlets as they normally
do.</text:p>
<text:p text:style-name="Text_20_body">As a portal administrator, you'll
be pleased to know that the app not only gives you the ability to
section off plugins into SPIs, but also gives you the means to revive a
SPI. The Liferay Sandbox App comes with a
<text:span text:style-name="T1141">SPI</text:span><text:span text:style-name="T1142">
</text:span><text:span text:style-name="T1143">Administration</text:span>
UI that lets you create, start, stop, and restart SPIs. In addition, it
lets you configure options to restart SPIs that terminate unexpectedly,
automatically.</text:p>
<text:p text:style-name="Text_20_body">The sandboxing feature has two
limitations. First, only portlet and web plugins can be deployed on an
SPI. Second, the portal ignores SPI portlet implementation classes that
are not remote-safe. Implementation classes (such as asset renderers and
pollers) that register with the portal fall into this category and are
ignored by the portal. Therefore, the sooner you test and resolve any
performance issues in such SPI portlets, the sooner you can deploy them
back onto the Master Portal Instance to leverage such implementation
classes in those portlets.</text:p>
<text:p text:style-name="Text_20_body">The Liferay Sandbox App is
available on the Liferay
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/marketplace" office:name=""><text:span text:style-name="Definition">Marketplace</text:span></text:a>.
You can purchase, install, and deploy the app as described in this
guide's chapter on
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/leveraging-the-liferay-marketplace-liferay-portal-6-2-user-guide-14-en" office:name=""><text:span text:style-name="Definition">Leveraging
the Liferay Marketplace</text:span></text:a>.</text:p>
<text:p text:style-name="Text_20_body">Before creating and using
sandboxes, we must enable the portal's resiliency functionality and
optimize the database connection settings for your sandboxes.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Configuring
the Portal for Sandboxing
<text:a xlink:type="simple" xlink:href="id=configuring-the-portal-for-sandboxing" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The two types of portal
properties you must modify for your portal to use sandboxing are the
<text:a xlink:type="simple" xlink:href="http://docs.liferay.com/portal/6.2/propertiesdoc/portal.properties.html#Portal%20Resiliency" office:name=""><text:span text:style-name="Definition">Portal
Resiliency</text:span></text:a> properties and
<text:a xlink:type="simple" xlink:href="http://docs.liferay.com/portal/6.2/propertiesdoc/portal.properties.html#JDBC" office:name=""><text:span text:style-name="Definition">Database
Connection</text:span></text:a> properties. You can set these in your
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/manual-configuration-liferay-portal-6-2-user-guide-15-en" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T1144">portal-ext.properties</text:span></text:span></text:a>
file.</text:p>
<text:p text:style-name="Text_20_body">You must enable Portal Resiliency
by setting the
<text:span text:style-name="T1145">portal.resiliency.enabled</text:span>
property to <text:span text:style-name="T1146">true</text:span>. In
addition, you can optionally enable the portal to show special footers
in sandboxed portlets. The footers display at the bottom of each
sandboxed portlet, indicating the sandbox that is servicing the request.
The footer helps you verify that a portlet is sandboxed and which
sandbox it's in. To enable both of these resiliency properties, specify
the following entries in your
<text:span text:style-name="T1147">portal-ext.properties</text:span>
file:</text:p>
<text:p text:style-name="P443">portal.resiliency.enabled=true</text:p>
<text:p text:style-name="P444">portal.resiliency.portlet.show.footer=true</text:p>
<text:p text:style-name="First_20_paragraph">If you hadn't previously
configured your database connection pools using your portal properties,
you must do so in order to use the sandboxing feature. If you've been
using JNDI to configure data sources on your app server, please convert
to using Liferay's built-in data source by specifying it via
<text:a xlink:type="simple" xlink:href="http://docs.liferay.com/portal/6.2/propertiesdoc/portal.properties.html#JDBC" office:name=""><text:span text:style-name="Definition">JDBC</text:span></text:a>
properties in your
<text:span text:style-name="T1148">portal-ext.properties</text:span>
file. Note, if you attempt to create or start a sandbox while having
incorrect JDBC settings, the Sandbox Administration console displays a
warning.</text:p>
<text:p text:style-name="Text_20_body">After you've configured your
portal for sandboxing and restarted it, deploy the sandbox app. Then
navigate to the Control Panel to see the
<text:span text:style-name="T1149">SPI</text:span><text:span text:style-name="T1150">
</text:span><text:span text:style-name="T1151">Administration</text:span>
link displayed in the
<text:span text:style-name="T1152">Configuration</text:span>
section.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img23"><draw:image xlink:href="../../images/sandboxing-spi-admin-available-in-control-panel.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Click the
<text:span text:style-name="T1153">SPI</text:span><text:span text:style-name="T1154">
</text:span><text:span text:style-name="T1155">Administration</text:span>
link to start creating SPIs for running new or troublesome
portlets.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Creating
an SPI
<text:a xlink:type="simple" xlink:href="id=creating-an-spi" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">You can create and
administer SPIs from the SPI Administration page accessible in the
Configuration section of the Control Panel.</text:p>
<text:p text:style-name="Text_20_body">To add a new SPI, simply click on
the
<text:span text:style-name="T1156">Add</text:span><text:span text:style-name="T1157">
</text:span><text:span text:style-name="T1158">SPI</text:span>
button.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img24"><draw:image xlink:href="../../images/sandboxing-add-spi-button.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">The Add SPI panel divides the
SPI's fields into General, SPI Configurations, and Advanced
Configurations sections.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img25"><draw:image xlink:href="../../images/sandboxing-add-spi-general-details.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">In the General section, you must
provide a unique name for the SPI and describe the SPI.</text:p>
<text:p text:style-name="Text_20_body">The SPI Configurations contains
some of the most important settings for the SPI. It is broken into 4
sections: SPI Runtime, SPI Applications, Java Runtime, and Recovery
Options.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img26"><draw:image xlink:href="../../images/sandboxing-configure-spi-runtime.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Let's set the SPI's runtime
options first.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1159">Maximum</text:span><text:span text:style-name="T1160">
</text:span><text:span text:style-name="T1161">Worker</text:span><text:span text:style-name="T1162">
</text:span><text:span text:style-name="T1163">Threads:</text:span>
Enter the maximum number of worker threads that the SPI can use to
process requests. By default, it is set to
<text:span text:style-name="T1164">100</text:span>. You should tune this
value, however, according to the number of threads allocated in the
application server hosting your portal. This parameter functions
similarly to the settings in most JEE application servers.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1165">Connector</text:span><text:span text:style-name="T1166">
</text:span><text:span text:style-name="T1167">Port:</text:span> Enter
the port number on which the SPI listens for requests from Liferay
Portal. Each SPI runs on an embedded Apache Tomcat server instance. Each
of the portal's SPIs must use a unique port and you must ensure that no
other processes are using that port.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1168">Note</text:span>:
The SPIs and MPI serialize parameters and return values passed between
them. The sandboxing feature uses an IPC framework called
<text:a xlink:type="simple" xlink:href="http://docs.liferay.com/portal/6.2/propertiesdoc/portal.properties.html#Intraband" office:name=""><text:span text:style-name="Definition">Intraband</text:span></text:a>,
to support communication between the MPI and SPIs.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:p text:style-name="Text_20_body">Next, we'll pull those
troublesome apps into the SPI.</text:p>
<text:p text:style-name="Text_20_body">The SPI Applications panel
provides a way to select applications to be hosted in the SPI. All
requests that call these applications are processed by the SPI.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img27"><draw:image xlink:href="../../images/sandboxing-configure-spi-apps.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">The panel lists non-core portlets
and web plugins that have been installed on the portal. Since theme,
layout template, hook, and Liferay EXT plugins are not supported in the
sandbox, they're excluded from this list. In addition, the following
applications are explicitly excluded:</text:p>
<text:list text:style-name="L68">
  <text:list-item>
    <text:p text:style-name="P445"><text:span text:style-name="T1169">marketplace-portlet</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P445"><text:span text:style-name="T1170">resource-importer-web</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P445"><text:span text:style-name="T1171">spi-admin-portlet</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P445"><text:span text:style-name="T1172">spi-provider-web</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P445"><text:span text:style-name="T1173">wurfl-commercial-web</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P445"><text:span text:style-name="T1174">wurfl-web</text:span></text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Next, we'll set the Java
runtime resources for the SPI's JVM.</text:p>
<text:p text:style-name="Text_20_body">The
<text:span text:style-name="T1175">JVM</text:span><text:span text:style-name="T1176">
</text:span><text:span text:style-name="T1177">Arguments</text:span>
panel allows you to specify arguments to be passed to the Java Virtual
Machine (JVM) running the SPI. These include memory settings, debugger
options, etc. If you do not specify any values, the system automatically
uses these values:</text:p>
<text:p text:style-name="P446">-Xmx512m -XX:PermSize=200m</text:p>
<text:p text:style-name="First_20_paragraph">Consider the JVM's
performance tuning recommendations when setting these arguments. You can
also consult the
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/marketplace/isvs?p_p_auth=VgLAX0A7&amp;_101_assetEntryId=35608452&amp;p_p_lifecycle=0&amp;p_p_id=101&amp;p_p_state=maximized&amp;_101_struts_action=%2Fasset_publisher%2Fview_content&amp;redirect=https%3A%2F%2Fwww.liferay.com%2Fdocumentation%2Fliferay-portal%2F6.2%2Fuser-guide%3Fp_p_id%3D3%26p_p_lifecycle%3D0%26p_p_state%3Dmaximized%26p_p_mode%3Dview%26_3_entryClassName%3Dcom.liferay.portlet.documentlibrary.model.DLFileEntry%26_3_modifiedselection%3D0%26_3_documentsSearchContainerPrimaryKeys%3D19_PORTLET_35946202%252C19_PORTLET_35722876%252C19_PORTLET_35809176%252C19_PORTLET_35954267%252C19_PORTLET_35824382%252C19_PORTLET_35857084%252C19_PORTLET_35782527%252C19_PORTLET_35810672%252C19_PORTLET_35958625%252C19_PORTLET_35746448%252C19_PORTLET_35972499%252C19_PORTLET_35799656%252C19_PORTLET_35845480%252C19_PORTLET_35773034%252C19_PORTLET_35880698%252C19_PORTLET_35987674%252C19_PORTLET_35866420%252C19_PORTLET_35916979%252C19_PORTLET_35915417%252C19_PORTLET_35815297%26_3_keywords%3DLiferay%2BDeployment%2BChecklist%26_3_format%3D%26_3_modifiedfrom%3D%26_3_formDate%3D1395500651344%26_3_modified%3D%26_3_assetCategoryTitles%3D%26_3_groupId%3D14%26_3_modifiedto%3D%26_3_cur%3D1%26_3_struts_action%3D%252Fsearch%252Fsearch%26_3_assetTagNames%3D&amp;p_p_mode=view&amp;_101_type=document" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T1178">Liferay</text:span><text:span text:style-name="T1179">
</text:span><text:span text:style-name="T1180">Deployment</text:span><text:span text:style-name="T1181">
</text:span><text:span text:style-name="T1182">Checklist</text:span></text:span></text:a>
for guidance on setting the JVM arguments.</text:p>
<text:p text:style-name="Text_20_body">In development, you may also
choose to add debug settings to the JVM arguments.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img28"><draw:image xlink:href="../../images/sandboxing-configure-spi-java-runtime.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">In the event that the SPI
terminates unexpectedly, you may want to consider automatically
restarting it and having the Sandboxing App send notifications to you
and other stakeholders.</text:p>
<text:p text:style-name="Text_20_body">The Sandboxing App lets you
configure email notifications for when an SPI crashes and lets you
configure for the app to automatically restart the SPI.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img29"><draw:image xlink:href="../../images/sandboxing-configure-spi-recovery.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1183">Use</text:span><text:span text:style-name="T1184">
</text:span><text:span text:style-name="T1185">Default</text:span><text:span text:style-name="T1186">
</text:span><text:span text:style-name="T1187">Notification</text:span><text:span text:style-name="T1188">
</text:span><text:span text:style-name="T1189">Options:</text:span>
Select this checkbox to use the globally defined notification options.
Otherwise the notification options specified in this panel are
used.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1190">Notification</text:span><text:span text:style-name="T1191">
</text:span><text:span text:style-name="T1192">Recipients:</text:span>
Enter a set of comma-delimited email addresses of people to be notified
in the event that the SPI fails. This option is disabled if the
<text:span text:style-name="T1193">Use</text:span><text:span text:style-name="T1194">
</text:span><text:span text:style-name="T1195">Default</text:span><text:span text:style-name="T1196">
</text:span><text:span text:style-name="T1197">Notification</text:span><text:span text:style-name="T1198">
</text:span><text:span text:style-name="T1199">Options</text:span>
checkbox is selected.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1200">Use</text:span><text:span text:style-name="T1201">
</text:span><text:span text:style-name="T1202">Default</text:span><text:span text:style-name="T1203">
</text:span><text:span text:style-name="T1204">Restart</text:span><text:span text:style-name="T1205">
</text:span><text:span text:style-name="T1206">Options:</text:span>
Select this checkbox to use the globally defined restart options.
Otherwise the restart options specified in this panel are used.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1207">Maximum</text:span><text:span text:style-name="T1208">
</text:span><text:span text:style-name="T1209">Restart</text:span><text:span text:style-name="T1210">
</text:span><text:span text:style-name="T1211">Attempts:</text:span>
Enter the maximum number of times to attempt restarting the SPI in the
event that the SPI fails. Once Liferay reaches the maximum number of
restart attempts for the SPI, it refrains from restarting the SPI. At
that point, manual operator intervention is required to restart it. This
option is disabled if the
<text:span text:style-name="T1212">Use</text:span><text:span text:style-name="T1213">
</text:span><text:span text:style-name="T1214">Default</text:span><text:span text:style-name="T1215">
</text:span><text:span text:style-name="T1216">Restart</text:span><text:span text:style-name="T1217">
</text:span><text:span text:style-name="T1218">Options</text:span>
checkbox is selected.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Advanced
Configurations
<text:a xlink:type="simple" xlink:href="id=advanced-configurations" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The Advanced Configurations
section contains a series of optional parameters that should rarely be
modified.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1219">Java</text:span><text:span text:style-name="T1220">
</text:span><text:span text:style-name="T1221">Executable:</text:span>
Enter the path to your JVM, specifically the path to your Java
executable file (i.e., the
<text:span text:style-name="T1222">java</text:span> or
<text:span text:style-name="T1223">java.exe</text:span> file). You
should generally not modify this value, assuming your Java executable is
in your system's
<text:span text:style-name="T1224">PATH</text:span>.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1225">SPI</text:span><text:span text:style-name="T1226">
</text:span><text:span text:style-name="T1227">Ping</text:span><text:span text:style-name="T1228">
</text:span><text:span text:style-name="T1229">Interval:</text:span>
Enter the number of milliseconds to wait between pings that the SPI
sends to the portal to ensure the portal is alive. Pinging the portal
prevents SPIs from becoming &quot;zombie&quot; processes, in the event
that the portal terminates unexpectedly.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1230">SPI</text:span><text:span text:style-name="T1231">
</text:span><text:span text:style-name="T1232">Register</text:span><text:span text:style-name="T1233">
</text:span><text:span text:style-name="T1234">Timeout:</text:span>
Enter the number of milliseconds allotted for the SPI to start. The
default value is <text:span text:style-name="T1235">300000</text:span>
milliseconds (<text:span text:style-name="T1236">300</text:span>
seconds). This should be ample time for a SPI to start. However, if you
have a large number of applications in the sandbox, or the server has an
insufficient CPU or insufficient memory resources, you may need to
increase the amount of time.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1237">SPI</text:span><text:span text:style-name="T1238">
</text:span><text:span text:style-name="T1239">Shutdown</text:span><text:span text:style-name="T1240">
</text:span><text:span text:style-name="T1241">Timeout:</text:span>
Enter the maximum amount of time (in milliseconds) that the SPI should
need to gracefully shutdown. As with the SPI Register Timeout, this
value may need to be increased on slower or overloaded
machines.</text:p>
<text:p text:style-name="Text_20_body">You may also choose to allocate
certain embedded Liferay functions (e.g., blogs, bookmarks, etc.) to an
SPI. This is generally not recommended, but is made possible by the
Sandboxing App. The SPI Core Applications panel lets you drag apps onto
the SPI in the same way you can with the SPI Applications
panel.</text:p>
<text:p text:style-name="Text_20_body">Now that you know how to add a
SPI and configure it properly, let's learn how to operate the
SPI.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Starting,
Stopping, and Modifying an SPI
<text:a xlink:type="simple" xlink:href="id=starting-stopping-and-modifying-an-spi" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The Portal automatically
starts SPIs on startup. However, when you first add a new SPI, you must
start it manually.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img30"><draw:image xlink:href="../../images/sandboxing-start-stop-spi.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Once successfully started, you
can stop or restart a SPI. You can't, however, delete an SPI that is
running. You must first stop the SPI.</text:p>
<text:p text:style-name="Text_20_body">You can edit an SPI's
configuration too. Configuration changes made to a running SPI take
effect after it's restarted.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img31"><draw:image xlink:href="../../images/sandboxing-modify-spi.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">As you can see, operating SPIs is
straightforward and easy to do.</text:p>
<text:p text:style-name="Text_20_body">If you have multiple SPIs, you
may want to use global settings to configure the default options for
them. Let's consider how to configure global settings for your SPIs
next.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Configure
Global Settings
<text:a xlink:type="simple" xlink:href="id=configure-global-settings" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The SPI Administration
console allows you to configure a series of global settings. You can
access them by clicking on the configuration gear icon as shown in the
figure below.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img32"><draw:image xlink:href="../../images/sandboxing-global-settings.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Once you've opened the
configuration panel, the SPI Administration console enables you to
configure global notification and set restart options for your
SPIs.</text:p>
<text:p text:style-name="Text_20_body">Note that option values
explicitly configured in an SPI take precedence over the global settings
with respect to that SPI.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img33"><draw:image xlink:href="../../images/sandboxing-global-recovery-options.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Let's look at the global
notification options first.</text:p>
<text:p text:style-name="Text_20_body">The notification options allow
you to configure both the notfication email content and specify the
recipients of the notification email. These values are used by all
defined SPIs.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img34"><draw:image xlink:href="../../images/sandboxing-global-notification-options.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1242">Notification</text:span><text:span text:style-name="T1243">
</text:span><text:span text:style-name="T1244">Email</text:span><text:span text:style-name="T1245">
</text:span><text:span text:style-name="T1246">From</text:span><text:span text:style-name="T1247">
</text:span><text:span text:style-name="T1248">Address:</text:span>
Enter a default origin email address to use for notification emails sent
from the SPIs.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1249">Notification</text:span><text:span text:style-name="T1250">
</text:span><text:span text:style-name="T1251">Email</text:span><text:span text:style-name="T1252">
</text:span><text:span text:style-name="T1253">From</text:span><text:span text:style-name="T1254">
</text:span><text:span text:style-name="T1255">Name:</text:span> Enter a
default name to use for the sender of the notification emails.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1256">Notification</text:span><text:span text:style-name="T1257">
</text:span><text:span text:style-name="T1258">Recipients:</text:span>
Enter a default comma-delimited list of email addresses to receive the
notification emails.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1259">Notification</text:span><text:span text:style-name="T1260">
</text:span><text:span text:style-name="T1261">Email</text:span><text:span text:style-name="T1262">
</text:span><text:span text:style-name="T1263">Subject:</text:span>
Enter a subject template for the notification emails.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1264">Notification</text:span><text:span text:style-name="T1265">
</text:span><text:span text:style-name="T1266">Email</text:span><text:span text:style-name="T1267">
</text:span><text:span text:style-name="T1268">Body:</text:span> Enter a
body template for the notification emails.</text:p>
<text:p text:style-name="Text_20_body">That's simple enough. Let's take
a look at the restart options too.</text:p>
<text:p text:style-name="Text_20_body">The restart options section
allows you to configure how many times each SPI is restarted in the
event that it terminates unexpectedly. In the example below, all SPIs
are restarted 3 times before requiring administrator intervention to
restart them.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img35"><draw:image xlink:href="../../images/sandboxing-global-restart-options.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Let's recap what Liferay's
Sandboxing App does for you. It lets you isolate portlets and web
plugins that are known troublemakers or that you are simply just unsure
about. You put them in their own sandbox JVM (or SPI), so they can still
be used in your portal but are kept out of your portal's JVM. As an
administrator, you can group plugins into SPIs and configure each SPI's
runtime, notification, and recovery options. In addition, you can
configure global default settings for your portal's SPIs. With the
Sandboxing App, you can ensure your portal's resiliency while leveraging
all the portlets (even leaky ones) that your users require.</text:p>
<text:p text:style-name="Text_20_body">Liferay Portal can serve portlets
that are installed on the system, or it can serve portlets installed on
another portal server. This is called Web Services for Remote Portlets.
Have you ever wondered how to use WSRP in Liferay? We'll cover this
next!</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Using Web
Services for Remote Portlets (WSRP)
<text:a xlink:type="simple" xlink:href="id=using-web-services-for-remote-portlets-wsrp" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The Web Services for Remote
Portlets (WSRP) specification defines a web service interface for
accessing and interacting with presentation-oriented web services in the
form of portlets. What are presentation-oriented web services? These are
web services that send user interfaces over the wire, rather than raw
data like JSON objects or SOAP data envelopes. If an application is
written as a portlet, this is an easy way to expose that application to
end users on a completely different system, rather than sending just the
data and having to craft an application to present that data. WSRP's
presentation-oriented web services allow portals to display remote
portlets inside their pages, as if locally deployed, without requiring
any additional programming by developers.</text:p>
<text:p text:style-name="Text_20_body">Here are the two main components
for WSRP:</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1269">Producer:</text:span>
A web service that exposes one or more portlets and is described using a
Web Services Description Language (WSDL) document.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1270">Consumer:</text:span>
A web service client that receives the data from the Producer and
presents it to the user in a portlet window.</text:p>
<text:p text:style-name="Text_20_body">Below, you'll see how the
components interact with each other. So without further ado, let's
explore WSRP in Liferay!</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">WSRP with
Liferay
<text:a xlink:type="simple" xlink:href="id=wsrp-with-liferay" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay provides a
deployable WSRP portlet that supports the 1.0 and 2.0 specifications.
The portlet is available from Liferay Marketplace as a CE or EE app.
Once you've downloaded and installed the WSRP app, you have instant
access to the portlet by navigating to the Control Panel and, under
<text:span text:style-name="T1271">Apps</text:span>, selecting
<text:span text:style-name="T1272">WSRP</text:span>.</text:p>
<text:p text:style-name="Text_20_body">Liferay Portal can be used as a
WSRP producer or consumer. As a producer, it hosts portlets that are
consumed by other portal servers (Liferay or non-Liferay) acting as WSRP
consumers. The image below illustrates WSRP producers and consumers and
how they interact.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img36"><draw:image xlink:href="../../images/wsrp-illustration.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">As we mentioned in the previous
chapter, there are two main components of the WSRP process: producers
and consumers. Let's go through the basic process of how producers and
consumers work together to bring the end user a remote portlet. First,
the consumer portal server establishes a connection with its producer
portal server counterpart. This connection is made possible by giving
the consumer the producer portlet's URL. The consumer then uses the URL
to discover the producer's portlet and establish a connection. After the
connection is made, the consumer acquires the producer's information and
creates a consumer proxy portlet. The proxy portlet acts as an
intermediary, relaying requests to and from the end user and the
producer portlet.</text:p>
<text:p text:style-name="Text_20_body">For example, you can compare the
proxy portlet to a TV satellite box. If you want to change the channel
on your TV, you (end user) send the channel number you desire to the
TV's satellite box (consumer's proxy portlet) via your TV's remote. When
the satellite box receives the request to change the channel, it relays
the request to a TV satellite (producer's portlet) which then sends the
channel information back to the satellite box. Then, the satellite box
displays the new channel to you on your TV. In this simple example,
you're not directly requesting the TV satellite to change the channel,
but rather, you're communicating with the satellite box, which acts as
an intermediary between you and the satellite. This example directly
relates to using WSRP with Liferay. Although the end users are sending
requests to the consumer portlet, they're not receiving feedback from
the consumer portlet itself, but rather its producer portlet located
remotely.</text:p>
<text:p text:style-name="Text_20_body">Now that you know a little bit
about the WSRP process, let's begin configuring WSRP on Liferay Portal.
For this demonstration, we'll assume you have two portal
servers.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1273">Tip</text:span>:
If you're following along with this example and don't have an additional
portal server, you can download another instance of Liferay Portal and
have it running at the same time as your current Liferay instance to
simulate an additional portal server. Remember, typical use cases have
WSRP producers and consumers linked on differing portal servers. To run
two portal instances locally at the same time, you'll need to change one
of your portal's server configurations. Navigate to one of your portal's
<text:span text:style-name="T1274">tomcat-[VERSION]\conf\server.xml</text:span>
and change the <text:span text:style-name="T1275">port=</text:span>
designations to different values (e.g., change
<text:span text:style-name="T1276">8080</text:span> to
<text:span text:style-name="T1277">18080</text:span>). Also, you can
specify the new port number for your browser launcher URL by adding
<text:span text:style-name="T1278">browser.launcher.url=http://localhost:18080</text:span>
to your portal's
<text:span text:style-name="T1279">portal-ext.properties</text:span>
file.</text:p>
<text:p text:style-name="Text_20_body">$$$</text:p>
<text:p text:style-name="Text_20_body">To create a producer, go to the
<text:span text:style-name="T1280">Producers</text:span> tab and click
<text:span text:style-name="T1281">Add</text:span><text:span text:style-name="T1282">
</text:span><text:span text:style-name="T1283">Producer</text:span>.
Give your producer a name and choose the appropriate version of WSRP to
use. Liferay displays a list of available portlets your producer can
use. For demonstration purposes, select the Hello World portlet and
click the <text:span text:style-name="T1284">Save</text:span> button.
The portal generates a WSDL document to define your producer. To view
the WSDL document, click the URL link provided.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img37"><draw:image xlink:href="../../images/wsdl-url.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Now that we've created a
producer, let's create a consumer on your second portal server.</text:p>
<text:p text:style-name="Text_20_body">On your consumer portal server,
navigate to the Consumers tab and select the
<text:span text:style-name="T1285">Add</text:span><text:span text:style-name="T1286">
</text:span><text:span text:style-name="T1287">Consumer</text:span>
button. Give it a name and add the producer's WSDL URL in the
<text:span text:style-name="T1288">URL</text:span> field. There are also
additional fields:</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1289">Forward</text:span><text:span text:style-name="T1290">
</text:span><text:span text:style-name="T1291">Cookies:</text:span>
Allows the WSRP consumer to forward specific cookies from the user's
browser session to the WSRP producer.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1292">Forward</text:span><text:span text:style-name="T1293">
</text:span><text:span text:style-name="T1294">Headers:</text:span>
Allows the WSRP consumer to forward specific HTTP headers from the
user's browser session to the WSRP producer.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T1295">Markup</text:span><text:span text:style-name="T1296">
</text:span><text:span text:style-name="T1297">Character</text:span><text:span text:style-name="T1298">
</text:span><text:span text:style-name="T1299">Sets:</text:span> Markup
character encodings supported for the consumer are shown in a comma
delimited list. UTF-8 is assumed and will be added automatically as a
supported encoding.</text:p>
<text:p text:style-name="Text_20_body">Leave these additional fields
blank for our demonstration. Lastly, we need to define the portlets that
the end-user can use from this consumer. To do this, go to
<text:span text:style-name="T1300">Actions</text:span> →
<text:span text:style-name="T1301">Manage</text:span><text:span text:style-name="T1302">
</text:span><text:span text:style-name="T1303">Portlets</text:span> for
your consumer. Add the remote portlets that you've configured for your
producer portal server. In this case, select the
<text:span text:style-name="T1304">Hello</text:span><text:span text:style-name="T1305">
</text:span><text:span text:style-name="T1306">World</text:span> remote
portlet and give the new portlet an arbitrary name. Now end users can
&quot;consume&quot; or use the remote portlet just like any local
portlet in the portal.</text:p>
<text:p text:style-name="Text_20_body">Next, you'll learn how to create
custom remote portlets.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Creating
Custom Remote Portlets
<text:a xlink:type="simple" xlink:href="id=creating-custom-remote-portlets" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">With the demand for dynamic
portlets by end users, sometimes a finite, pre-selected list of remote
portlets isn't enough. Because of this, Liferay allows you to make
custom developed portlets remotely accessible for WSRP.</text:p>
<text:p text:style-name="Text_20_body">To enable your custom portlet for
WSRP, you'll need to add the
<text:span text:style-name="T1307">&lt;remoteable&gt;true&lt;/remoteable&gt;</text:span>
tag in your portlet's
<text:span text:style-name="T1308">docroot/WEB-INF/liferay-portlet.xml</text:span>
file:</text:p>
<text:p text:style-name="P447">&lt;liferay-portlet-app&gt;</text:p>
<text:p text:style-name="P448"><text:s text:c="4" />&lt;portlet&gt;</text:p>
<text:p text:style-name="P449"><text:s text:c="8" />&lt;portlet-name&gt;RemoteSamplePortlet&lt;/portlet-name&gt;</text:p>
<text:p text:style-name="P450"><text:s text:c="8" />&lt;remoteable&gt;true&lt;/remoteable&gt;</text:p>
<text:p text:style-name="P451">...</text:p>
<text:p text:style-name="P452"><text:s text:c="4" />&lt;/portlet&gt;</text:p>
<text:p text:style-name="P453">...</text:p>
<text:p text:style-name="P454">&lt;/liferay-portlet-app&gt;</text:p>
<text:p text:style-name="First_20_paragraph">After editing your
portlet's
<text:span text:style-name="T1309">liferay-portlet.xml</text:span> file,
your custom portlet will appear in the list of portlets available when
creating a WSRP producer. Congratulations! Now you can share all your
portlets to end users using WSRP!</text:p>
<text:p text:style-name="Text_20_body">Next, we'll learn how to remotely
access Liferay services.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Remotely
Accessing Liferay Services
<text:a xlink:type="simple" xlink:href="id=remotely-accessing-liferay-services" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay includes a utility
called the
<text:span text:style-name="T1310">Service</text:span><text:span text:style-name="T1311">
</text:span><text:span text:style-name="T1312">Builder</text:span> which
is used to generate all of the low level code for accessing resources
from the portal database. This utility is further explained in the
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/documentation/liferay-portal/6.2/development" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T1313">Liferay</text:span><text:span text:style-name="T1314">
</text:span><text:span text:style-name="T1315">Developer</text:span><text:span text:style-name="T1316">
</text:span><text:span text:style-name="T1317">Guide</text:span></text:span></text:a>
and in
<text:a xlink:type="simple" xlink:href="http://manning.com/sezov" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T1318">Liferay</text:span><text:span text:style-name="T1319">
</text:span><text:span text:style-name="T1320">in</text:span><text:span text:style-name="T1321">
</text:span><text:span text:style-name="T1322">Action</text:span></text:span></text:a>,
but it is mentioned here because of its feature which generates
interfaces not only for Java code, but also for web services and
JavaScript. This means that the method calls for storing and retrieving
portal objects are all the same, and are generated in the same
step.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img38"><draw:image xlink:href="../../images/liferay-soa-first-layer.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Because the actual method calls
for retrieving data are the same regardless of how one gets access to
those methods (i.e., locally or through web services), Liferay provides
a consistent interface for accessing portal data that few other products
can match. The actual interfaces for the various services are covered in
the
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/documentation/liferay-portal/6.2/development" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T1323">Liferay</text:span><text:span text:style-name="T1324">
</text:span><text:span text:style-name="T1325">Developer</text:span><text:span text:style-name="T1326">
</text:span><text:span text:style-name="T1327">Guide</text:span></text:span></text:a>
and in
<text:a xlink:type="simple" xlink:href="http://manning.com/sezov" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T1328">Liferay</text:span><text:span text:style-name="T1329">
</text:span><text:span text:style-name="T1330">in</text:span><text:span text:style-name="T1331">
</text:span><text:span text:style-name="T1332">Action</text:span></text:span></text:a>.
Before these services can be used, administrators need to enable users
to access these services remotely.</text:p>
<text:p text:style-name="Text_20_body">In the default
<text:span text:style-name="T1333">portal.properties</text:span> file,
there is a section called
<text:span text:style-name="T1334">Main</text:span><text:span text:style-name="T1335">
</text:span><text:span text:style-name="T1336">Servlet</text:span>. This
section defines the security settings for all of the remote services
provided by Liferay. Copy this section and paste it into your custom
<text:span text:style-name="T1337">portal-ext.properties</text:span>
file. Then you can edit the default values to configure the security
settings for the Axis Servlet, the Liferay Tunnel Servlet, the Spring
Remoting Servlet, the JSON Tunnel Servlet, and the WebDAV
servlet.</text:p>
<text:p text:style-name="Text_20_body">By default, a user connecting
from the same machine Liferay is running on can access remote services
so long as that user has the permission to use those services in
Liferay's permissions system. Of course, you are not really
&quot;remote&quot; unless you are accessing services from a different
machine. Liferay has two layers of security when it comes to accessing
its services remotely. Without explicit rights to both layers, a remote
exception will be thrown and access to those services will not be
granted.</text:p>
<text:p text:style-name="Text_20_body">The first layer of security that
a user needs to get through in order to call a method from the service
layer is servlet security. The
<text:span text:style-name="T1338">Main</text:span><text:span text:style-name="T1339">
</text:span><text:span text:style-name="T1340">Servlet</text:span>
section of the
<text:span text:style-name="T1341">portal-ext.properties</text:span>
file is used to enable or disable access to Liferay's remote services.
In this section of the properties file, there are properties for each of
Liferay's remote services.</text:p>
<text:p text:style-name="Text_20_body">You can set each service
individually with the security settings that you require. For example,
you may have a batch job which runs on another machine in your network.
This job looks in a particular shared folder on your network and uploads
documents to your site's Documents and Media portlet on a regular basis,
using Liferay's web services. To enable this batch job to get through
the first layer of security, you would modify the
<text:span text:style-name="T1342">portal-ext.properties</text:span>
file and put the IP address of the machine on which the batch job is
running in the list for that particular service. For example, if the
batch job uses the Axis web services to upload the documents, you would
enter the IP address of the machine on which the batch job is running to
the
<text:span text:style-name="T1343">axis.servlet.hosts.allowed</text:span>
property. A typical entry might look like this:</text:p>
<text:p text:style-name="P455">axis.servlet.hosts.allowed=192.168.100.100, 127.0.0.1, SERVER_IP</text:p>
<text:p text:style-name="First_20_paragraph">If the machine on which the
batch job is running has the IP address
<text:span text:style-name="T1344">192.168.100.100</text:span>, this
configuration will allow that machine to connect to Liferay's web
services and pass in user credentials to be used to upload the
documents.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img39"><draw:image xlink:href="../../images/liferay-soa-second-layer.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">The second layer of security is
Liferay's security model that it uses for every object in the portal.
The user account that accesses the services remotely must have the
proper permissions to operate on the objects it attempts to access.
Otherwise, a remote exception will be thrown. Portal administrators need
to use Liferay's permissions system to grant access to these resources
to the administrative user account that attempts to operate on them
remotely. For example, say that a Documents and Media folder called
<text:span text:style-name="T1345">Documents</text:span> has been set up
in a site. A role has been created called
<text:span text:style-name="T1346">Document</text:span><text:span text:style-name="T1347">
</text:span><text:span text:style-name="T1348">Uploaders</text:span>
which has the rights to add documents to this folder. Your batch job
will be accessing Liferay's web services in order to upload documents
into this folder. In order for this to work, you have to call the web
service using a user account to which the
<text:span text:style-name="T1349">Document</text:span><text:span text:style-name="T1350">
</text:span><text:span text:style-name="T1351">Uploaders</text:span>
role has been assigned (or that has individual rights to add documents
to the folder). Otherwise, you will be prevented from using the web
service.</text:p>
<text:p text:style-name="Text_20_body">To call the web service using
credentials, you would use the following URL syntax:</text:p>
<text:p text:style-name="P456">http://&quot; + userIdAsString + &quot;:&quot; + password +</text:p>
<text:p text:style-name="P457">&quot;@&lt;server.com\&gt;:&lt;port\&gt;/tunnel-web/secure/axis/&quot; + serviceName</text:p>
<text:p text:style-name="First_20_paragraph">The user ID is the user's
ID from Liferay's database. This can be obtained by logging in as the
user and navigating to the
<text:span text:style-name="T1352">My</text:span><text:span text:style-name="T1353">
</text:span><text:span text:style-name="T1354">Account</text:span>
portlet in the Control Panel. The user ID appears on the Details page of
the My Account portlet in the Control Panel.</text:p>
<text:p text:style-name="Text_20_body">For example, to get Organization
data using a user that has the ID of
<text:span text:style-name="T1355">2</text:span> with a password of
<text:span text:style-name="T1356">test</text:span>, you would use the
following URL:</text:p>
<text:p text:style-name="P458">http://2:test@localhost:8080/tunnel-web/secure/axis/Portal_OrganizationService</text:p>
<text:p text:style-name="First_20_paragraph">It is important to note
here how
<text:span text:style-name="T1357">Password</text:span><text:span text:style-name="T1358">
</text:span><text:span text:style-name="T1359">Policies</text:span>
(covered in this guide's chapter on
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/management-liferay-portal-6-2-user-guide-16-en" office:name=""><text:span text:style-name="Definition">User
Management</text:span></text:a> can be used in combination with this
feature. If you are enforcing password policies on your users (requiring
passwords to take a certain form, requiring users to change their
passwords on a periodic basis, etc.), any administrative user account
which accesses Liferay's web services in a batch job will have its
password expire too.</text:p>
<text:p text:style-name="Text_20_body">To prevent this from happening,
you can add a new password policy which does not enforce the password
expiration and add your administrative user ID to it. Then your batch
job can run as many times as you need it to and the administrative user
account's password will never expire.</text:p>
<text:p text:style-name="Text_20_body">In summary, accessing Liferay
remotely requires the successful passing of two security
checks:</text:p>
<text:list text:style-name="L69">
  <text:list-item>
    <text:p text:style-name="P459">The IP address must be pre-configured
    in the server's
    <text:span text:style-name="T1360">portal-ext.properties</text:span>
    file.<text:line-break /></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P459">The user ID being used must have
    permission to access the resources it attempts to access.</text:p>
  </text:list-item>
</text:list>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Accessing
Liferay's JSON Web Services
<text:a xlink:type="simple" xlink:href="id=accessing-liferays-json-web-services" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">To see which Liferay
service methods are registered and available for use via JSON web
services, open your browser to the following address:</text:p>
<text:p text:style-name="P460">http://localhost:8080/api/jsonws</text:p>
<text:p text:style-name="First_20_paragraph">The page lists the portal's
registered and exposed service methods. Get each method's details by
clicking the method name. You can view the full signature of each
method, all its arguments, the exceptions that can be thrown, and its
Javadoc! Using a simple form from within your browser, you can even
invoke the service method for testing purposes.</text:p>
<text:p text:style-name="Text_20_body">To list registered services on a
plugin (e.g. a custom portlet), don't forget to use its context path in
your URL:</text:p>
<text:p text:style-name="P461">http://localhost:8080/[plugin-context]/api/jsonws</text:p>
<text:p text:style-name="First_20_paragraph">This lists the JSON Web
Service API for the plugin.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Accessing
Liferay's WSDL
<text:a xlink:type="simple" xlink:href="id=accessing-liferays-wsdl" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">After configuring the
security settings properly, your first step in obtaining access to
Liferay's remote SOAP web services is to access the WSDL. If you are on
a browser on the same machine Liferay is running on, you can do this by
accessing the following URL:</text:p>
<text:p text:style-name="P462">http://localhost:&lt;port number\&gt;/tunnel-web/axis</text:p>
<text:p text:style-name="First_20_paragraph">If, for example, you are
running on Tomcat on port 8080, you would specify this URL:</text:p>
<text:p text:style-name="P463">http://localhost:8080/tunnel-web/axis</text:p>
<text:p text:style-name="First_20_paragraph">If you are accessing a web
service that was created as part of a portlet plugin, the URL is
similar, but uses the context of your application rather than the
tunnel-web servlet. You can get a list of your Service Builder-generated
WSDL documents by using the URL pattern below:</text:p>
<text:p text:style-name="P464">http://localhost:8080/your-portlet/axis</text:p>
<text:p text:style-name="First_20_paragraph">If you are on a different
machine from the Liferay server, you will need to pass in your user
credentials on the URL to access the WSDL:</text:p>
<text:p text:style-name="P465">http://&lt;user ID\&gt;:&lt;password\&gt;@&lt;server name\&gt;:&lt;port number\&gt;/tunnel-web/axis</text:p>
<text:p text:style-name="First_20_paragraph">In any case, once you
successfully browse to this URL, you will see the list of web services.
You can access the WSDL for each service by clicking on the
<text:span text:style-name="T1361">WSDL</text:span> link next to the
name of the service. There are many services; one for each of the
services available from the Liferay API.</text:p>
<text:p text:style-name="Text_20_body">Once you click on one of the
<text:span text:style-name="T1362">WSDL</text:span> links, the Web
Service Definition Language document will be displayed. This document
can be used to generate client code in any language that supports it.
You can either save the document to your local machine and then generate
the client code that way, or use your tool to trigger Liferay to
generate the document dynamically by using one of the URLs above. For
further information about developing applications that take advantage of
Liferay's remote services, please see the
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/documentation/liferay-portal/6.2/development" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T1363">Liferay</text:span><text:span text:style-name="T1364">
</text:span><text:span text:style-name="T1365">Developer</text:span><text:span text:style-name="T1366">
</text:span><text:span text:style-name="T1367">Guide</text:span></text:span></text:a>
or
<text:a xlink:type="simple" xlink:href="http://manning.com/sezov" office:name=""><text:span text:style-name="Definition"><text:span text:style-name="T1368">Liferay</text:span><text:span text:style-name="T1369">
</text:span><text:span text:style-name="T1370">in</text:span><text:span text:style-name="T1371">
</text:span><text:span text:style-name="T1372">Action</text:span></text:span></text:a>.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Summary
<text:a xlink:type="simple" xlink:href="id=summary-15" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay Portal is an easy
environment to maintain. Backup procedures are simple and
straightforward. Administrators have all the options they need to view
and diagnose a running Liferay Portal server through its tunable logs.
Patching Liferay is easy to do with Liferay's patching tool. It handles
for you all the management of available patches, and makes it easy to
install and uninstall them. Upgrading Liferay is also a snap, because
Liferay does most of the work automatically. With easy migration tools
and automated database upgrade scripts, you'll have your new version of
Liferay Portal up and running in no time. It's also easy and secure for
Liferay administrators to remotely access both built-in Liferay web
services and custom services created using Service Builder.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Using
Scripting for Advanced Flexibility
<text:a xlink:type="simple" xlink:href="id=using-scripting-for-advanced-flexibility" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay provides a robust
script engine that can be used to interpret scripts in Beanshell,
Javascript, Groovy, Python, and Ruby. The script engine came out of
Liferay's involvement with the
<text:a xlink:type="simple" xlink:href="http://www.ict-romulus.eu" office:name=""><text:span text:style-name="Definition">Romulus
project</text:span></text:a>. It was originally developed to support non
Java-based portlets, but has now been extended to handle a lot more. For
example, when Liferay's workflow framework was introduced, the script
engine was leveraged to support the execution of scripts from within a
workflow module. A script console is now included in the Server
Administration portlet in the control panel. It allows system
administrators an easy way to execute scripts to perform repetitive user
maintenance operations, bulk manipulations using the Liferay API to
ensure consistency, or even system level operations.</text:p>
<text:p text:style-name="Text_20_body">This chapter helps you to
understand Liferay's script engine and covers the following
topics:</text:p>
<text:list text:style-name="L70">
  <text:list-item>
    <text:p text:style-name="P466">Accessing Liferay's service layer
    from a script</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P466">Running scripts from the script
    console</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P466">Using the script engine with
    workflow</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P466">Leveraging custom Java tools in the
    script engine</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">The most common thing
you'll want to do is access Liferay's services. If you have any
familiarity with Liferay's developer tools and API, this will be a snap
for you. To access Liferay's scripting console, navigate to the Control
Panel, click on
<text:span text:style-name="T1373">Server</text:span><text:span text:style-name="T1374">
</text:span><text:span text:style-name="T1375">Administration</text:span>
under the Configuration heading, then open the
<text:span text:style-name="T1376">Script</text:span> tab.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Accessing
Liferay Services
<text:a xlink:type="simple" xlink:href="id=accessing-liferay-services" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">In many cases, you'll want
to interact with one of Liferay's many services. This is possible from
all of the scripting languages supported, but the syntax is a little
different for each language.</text:p>
<text:p text:style-name="Text_20_body">To illustrate the correct syntax
for interacting with Liferay services, let's look at a simple example
that uses the
<text:span text:style-name="T1377">UserLocalService</text:span> to
retrieve a list of users and then prints their names to the log file.
We'll initially implement the example in Java pseudo-code.</text:p>
<text:p text:style-name="P467">import com.liferay.portal.model.User;</text:p>
<text:p text:style-name="P468">import com.liferay.portal.service.UserLocalServiceUtil;</text:p>
<text:p text:style-name="P469">import java.util.List;</text:p>
<text:p text:style-name="P470"><text:s text:c="12" />.</text:p>
<text:p text:style-name="P471"><text:s text:c="12" />.</text:p>
<text:p text:style-name="P472"><text:s text:c="12" />.</text:p>
<text:p text:style-name="P473"><text:s text:c="12" /></text:p>
<text:p text:style-name="P474">int userCount = UserLocalServiceUtil.getUsersCount();</text:p>
<text:p text:style-name="P475">List&lt;User&gt; users = UserLocalServiceUtil.getUsers(0, userCount);</text:p>
<text:p text:style-name="P476"></text:p>
<text:p text:style-name="P477">for (User user:users) {</text:p>
<text:p text:style-name="P478"><text:s text:c="4" />System.out.println(&quot;User Name: &quot; + user.getFullName());</text:p>
<text:p text:style-name="P479">}</text:p>
<text:p text:style-name="P480"></text:p>
<text:p text:style-name="P481"><text:s text:c="12" />.</text:p>
<text:p text:style-name="P482"><text:s text:c="12" />.</text:p>
<text:p text:style-name="P483"><text:s text:c="12" />.</text:p>
<text:p text:style-name="P484"><text:s text:c="12" /></text:p>
<text:p text:style-name="First_20_paragraph">Let's see first how this
would work in Beanshell, which is very similar to Java.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Beanshell
<text:a xlink:type="simple" xlink:href="id=beanshell" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Beanshell is a Java
scripting language that's designed to run Java code with little or no
changes. In this example, we only have one small change to make because
Beanshell doesn't support the use of Java Generics.</text:p>
<text:p text:style-name="P485">import com.liferay.portal.model.User;</text:p>
<text:p text:style-name="P486">import com.liferay.portal.service.UserLocalServiceUtil;</text:p>
<text:p text:style-name="P487">import java.util.List;</text:p>
<text:p text:style-name="P488"></text:p>
<text:p text:style-name="P489">int userCount = UserLocalServiceUtil.getUsersCount();</text:p>
<text:p text:style-name="P490">List users = UserLocalServiceUtil.getUsers(0, userCount);</text:p>
<text:p text:style-name="P491"></text:p>
<text:p text:style-name="P492">for (User user:users) {</text:p>
<text:p text:style-name="P493"><text:s text:c="4" />System.out.println(&quot;User Name: &quot; + user.getFullName());</text:p>
<text:p text:style-name="P494">}</text:p>
<text:p text:style-name="First_20_paragraph">Next, we'll show the same
thing in Groovy, another scripting language designed to be similar to
Java.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Groovy
<text:a xlink:type="simple" xlink:href="id=groovy" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Groovy is also based on
Java and is perhaps a little easier than Beanshell because literally any
code written in Java also runs in Groovy. This means we can execute the
exact same code from our Java example without any changes.</text:p>
<text:p text:style-name="P495">import com.liferay.portal.model.User;</text:p>
<text:p text:style-name="P496">import com.liferay.portal.service.UserLocalServiceUtil;</text:p>
<text:p text:style-name="P497">import java.util.List;</text:p>
<text:p text:style-name="P498"></text:p>
<text:p text:style-name="P499">int userCount = UserLocalServiceUtil.getUsersCount();</text:p>
<text:p text:style-name="P500">List&lt;User&gt; users = UserLocalServiceUtil.getUsers(0, userCount);</text:p>
<text:p text:style-name="P501"></text:p>
<text:p text:style-name="P502">for (User user:users) {</text:p>
<text:p text:style-name="P503"><text:s text:c="4" />System.out.println(&quot;User Name: &quot; + user.getFullName());</text:p>
<text:p text:style-name="P504">} </text:p>
<text:p text:style-name="First_20_paragraph">Of course, we could make
this somewhat Groovier by simplifying the program as follows:</text:p>
<text:p text:style-name="P505">import com.liferay.portal.service.UserLocalServiceUtil</text:p>
<text:p text:style-name="P506"></text:p>
<text:p text:style-name="P507">userCount = UserLocalServiceUtil.getUsersCount()</text:p>
<text:p text:style-name="P508">users = UserLocalServiceUtil.getUsers(0, userCount)</text:p>
<text:p text:style-name="P509">for (user in users){</text:p>
<text:p text:style-name="P510"><text:s text:c="4" />System.out.println(&quot;User Name: &quot; + user.getFullName())</text:p>
<text:p text:style-name="P511">}</text:p>
<text:p text:style-name="First_20_paragraph">The script engine supports
more than just Java-like languages. Despite the name, you should be
aware that Javascript bears little resemblance to Java, but you can
still use it in Liferay's script engine.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Javascript
<text:a xlink:type="simple" xlink:href="id=javascript" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay uses the Rhino
Javascript Engine to provide Javascript support in the script engine.
The following code provides a Javascript version of our original Java
program.</text:p>
<text:p text:style-name="P512">userCount = Packages.com.liferay.portal.service.UserLocalServiceUtil.getUsersCount(); </text:p>
<text:p text:style-name="P513">users = new Packages.java.util.ArrayList;</text:p>
<text:p text:style-name="P514">users = Packages.com.liferay.portal.service.UserLocalServiceUtil.getUsers(0, userCount);</text:p>
<text:p text:style-name="P515">user = Packages.com.liferay.portal.service.UserLocalServiceUtil.createUser(0);</text:p>
<text:p text:style-name="P516"></text:p>
<text:p text:style-name="P517">for (i=0;i&lt;users.size();i++) {</text:p>
<text:p text:style-name="P518"><text:s text:c="4" />Packages.java.lang.System.out.println(users.get(i).getFullName());</text:p>
<text:p text:style-name="P519">}</text:p>
<text:p text:style-name="First_20_paragraph">You can see the Javascript
example is compact. Ruby is even more compact.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Ruby
<text:a xlink:type="simple" xlink:href="id=ruby" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Ruby is supported through
the use of JRuby and our previous example could be implemented in Ruby
as follows:</text:p>
<text:p text:style-name="P520">userCount = com.liferay.portal.service.UserLocalServiceUtil.getUsersCount();</text:p>
<text:p text:style-name="P521">users = com.liferay.portal.service.UserLocalServiceUtil.getUsers(0, userCount);</text:p>
<text:p text:style-name="P522">users.each{ |user| print user.getFullName() + &quot;\n&quot;}</text:p>
<text:p text:style-name="First_20_paragraph">Python users aren't left
out either.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Python
<text:a xlink:type="simple" xlink:href="id=python" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Lastly, Liferay provides
Python support based on Jython and the previous example could be
implemented with the following code.</text:p>
<text:p text:style-name="P523">from com.liferay.portal.service import UserLocalServiceUtil</text:p>
<text:p text:style-name="P524">from com.liferay.portal.model import User</text:p>
<text:p text:style-name="P525"></text:p>
<text:p text:style-name="P526">userCount = UserLocalServiceUtil().getUsersCount()</text:p>
<text:p text:style-name="P527">users = UserLocalServiceUtil().getUsers(0,userCount)</text:p>
<text:p text:style-name="P528"></text:p>
<text:p text:style-name="P529">for user in users:</text:p>
<text:p text:style-name="P530"><text:s text:c="4" />print user.getFullName()</text:p>
<text:p text:style-name="First_20_paragraph">As you can see, Liferay's
services can be accessed from any of these languages. Let's look at some
practical examples of how you'd use this.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Running
Scripts from the Control Panel
<text:a xlink:type="simple" xlink:href="id=running-scripts-from-the-control-panel" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">To see a very simple
example of the script console in action, log into the portal as an
administrator and navigate to the
<text:span text:style-name="T1378">Control</text:span><text:span text:style-name="T1379">
</text:span><text:span text:style-name="T1380">Panel</text:span> →
<text:span text:style-name="T1381">Server</text:span><text:span text:style-name="T1382">
</text:span><text:span text:style-name="T1383">Administration</text:span>
→ <text:span text:style-name="T1384">Script</text:span>. Change the
script type to Groovy and replace the code in the scripting console with
the following:</text:p>
<text:p text:style-name="P531">number = com.liferay.portal.service.UserLocalServiceUtil.getUsersCount(); </text:p>
<text:p text:style-name="P532">out.println(number); </text:p>
<text:p text:style-name="First_20_paragraph">Click the
<text:span text:style-name="T1385">Execute</text:span> button and check
the scripting console or the log for the output.</text:p>
<text:p text:style-name="Text_20_body">Now let's implement a more
realistic example. We'll retrieve some user information from the
database, make some changes and then update the database with our
changes. Our company has updated the terms of use and requires that
everyone be presented with the updated terms of use on the next log in.
When users agree to the terms of use, a boolean attribute called
<text:span text:style-name="T1386">agreedToTermsOfUse</text:span> is set
in their user records. As long as the boolean is
<text:span text:style-name="T1387">true</text:span>, Liferay will not
present the user with the terms of use. However, if we set this flag to
<text:span text:style-name="T1388">false</text:span> for everyone, all
users will have to agree to it again to use the site.</text:p>
<text:p text:style-name="Text_20_body">We'll again use Groovy, so ensure
that the script type is set to Groovy and execute the following code to
check the status of the
<text:span text:style-name="T1389">agreedToTermsOfUse</text:span> user
attribute:</text:p>
<text:p text:style-name="P533">import com.liferay.portal.service.UserLocalServiceUtil</text:p>
<text:p text:style-name="P534"></text:p>
<text:p text:style-name="P535">userCount = UserLocalServiceUtil.getUsersCount()</text:p>
<text:p text:style-name="P536">users = UserLocalServiceUtil.getUsers(0, userCount)</text:p>
<text:p text:style-name="P537"></text:p>
<text:p text:style-name="P538">for (user in users) {</text:p>
<text:p text:style-name="P539"><text:s text:c="4" />println(&quot;User Name: &quot; + user.getFullName() + &quot; -- &quot; + user.getAgreedToTermsOfUse())</text:p>
<text:p text:style-name="P540">}</text:p>
<text:p text:style-name="First_20_paragraph">The code above just prints
the value of the
<text:span text:style-name="T1390">agreedToTermsOfUse</text:span>
attribute for each user. Next, we'll actually update each user in the
system to set his or her
<text:span text:style-name="T1391">agreedToTermsOfUse</text:span>
attribute to <text:span text:style-name="T1392">false</text:span>. We'll
be sure to skip the default user as the default user is not required to
agree to the Terms of Use. We'll also skip the admin user that's
currently logged in and running the script. If you're logged in as
someone other than test@liferay.com, be sure to update the following
script before running it.</text:p>
<text:p text:style-name="P541"><text:s text:c="4" />import com.liferay.portal.service.UserLocalServiceUtil</text:p>
<text:p text:style-name="P542"></text:p>
<text:p text:style-name="P543">userCount = UserLocalServiceUtil.getUsersCount()</text:p>
<text:p text:style-name="P544">users = UserLocalServiceUtil.getUsers(0, userCount)</text:p>
<text:p text:style-name="P545"></text:p>
<text:p text:style-name="P546">for (user in users){</text:p>
<text:p text:style-name="P547"></text:p>
<text:p text:style-name="P548"><text:s text:c="4" />if(!user.isDefaultUser() &amp;&amp; </text:p>
<text:p text:style-name="P549"><text:s text:c="8" />!user.getEmailAddress().equalsIgnoreCase(&quot;test@liferay.com&quot;)) {</text:p>
<text:p text:style-name="P550"><text:s text:c="8" /></text:p>
<text:p text:style-name="P551"><text:s text:c="12" />user.setAgreedToTermsOfUse(false)</text:p>
<text:p text:style-name="P552"><text:s text:c="12" />UserLocalServiceUtil.updateUser(user)</text:p>
<text:p text:style-name="P553"><text:s text:c="4" /></text:p>
<text:p text:style-name="P554"><text:s text:c="4" />}</text:p>
<text:p text:style-name="P555"><text:s text:c="4" /></text:p>
<text:p text:style-name="P556">}</text:p>
<text:p text:style-name="First_20_paragraph">To verify the script has
updated the records, run the first script again and you should see that
all users (except the default user and your user) have been
updated.</text:p>
<text:p text:style-name="Text_20_body">That's all that's needed to run
scripts and to access the Liferay service layer. There are, however,
some things to keep in mind when working with the script
console: </text:p>
<text:list text:style-name="L71">
  <text:list-item>
    <text:p text:style-name="P557">There is no undo</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P557">There is no preview</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P557">When using Local Services, no
    permissions checking is enforced</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P557">Scripts are executed synchronously,
    so be careful with scripts that might take a long time to
    execute. </text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">For these reasons, you
should use the script console with care. It's best to test run your
scripts on non-production systems before running them on production. Of
course, Liferay's script engine has uses beyond the script console.
Let's learn how to leverage Liferay's script engine for designing
workflows.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Leveraging
the Script Engine in Workflow
<text:a xlink:type="simple" xlink:href="id=leveraging-the-script-engine-in-workflow" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay's Kaleo workflow
engine provides a robust system for reviewing and approving content in
an enterprise environment. Even if you don't leverage custom scripts,
it's a powerful and robust workflow solution. Adding custom scripts
takes it to the next level.</text:p>
<text:p text:style-name="Text_20_body">Examine the default Single
Approver workflow definition included with Kaleo for an overview of how
the feature works. The final step in the workflow runs a script that
makes content available for use. As you can see in the snippet below, it
uses JavaScript to access the Java class associated with the workflow to
set the status of the content to
<text:span text:style-name="T1393">approved</text:span>.</text:p>
<text:p text:style-name="P558">&lt;script&gt;</text:p>
<text:p text:style-name="P559">&lt;![CDATA[Packages.com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil.updateStatus</text:p>
<text:p text:style-name="P560"><text:s text:c="4" />(Packages.com.liferay.portal.kernel.workflow.WorkflowConstants.toStatus(&quot;approved&quot;),workflowContext);]]&gt;</text:p>
<text:p text:style-name="P561">&lt;/script&gt;</text:p>
<text:p text:style-name="P562">&lt;script-language&gt;javascript&lt;/script-language&gt;</text:p>
<text:p text:style-name="First_20_paragraph">At virtually any point in a
workflow, you can use Liferay's scripting engine to access workflow APIs
or other APIs outside of workflow. There are a lot of different ways you
could use this. Here are a few practical ones:</text:p>
<text:list text:style-name="L72">
  <text:list-item>
    <text:p text:style-name="P563">Getting a list of users with a
    specific workflow-related role</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P563">Sending an email to the designated
    content approver with a list of people to contact if he is unable to
    review the content</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P563">Creating an alert to be displayed in
    the Alerts portlet for any user assigned to approve content</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Of course, before you try
any of this, you need to know the appropriate syntax for inserting a
script into a workflow. In an XML workflow definition, a script can be
used in any XML type that can contain an
<text:span text:style-name="T1394">actions</text:span> tag: those types
are <text:span text:style-name="T1395">&lt;state&gt;</text:span>,
<text:span text:style-name="T1396">&lt;task&gt;</text:span>,
<text:span text:style-name="T1397">&lt;fork&gt;</text:span> and
<text:span text:style-name="T1398">&lt;join&gt;</text:span>. Inside of
one of those types, format your script like this:</text:p>
<text:p text:style-name="P564">&lt;actions&gt;</text:p>
<text:p text:style-name="P565"><text:s text:c="4" />&lt;action&gt;</text:p>
<text:p text:style-name="P566"><text:s text:c="8" />&lt;script&gt;</text:p>
<text:p text:style-name="P567"><text:s text:c="12" />&lt;![CDATA[*the contents of your script*]]&gt;</text:p>
<text:p text:style-name="P568"><text:s text:c="8" />&lt;/script&gt;</text:p>
<text:p text:style-name="P569"><text:s text:c="8" />&lt;script-language&gt;*your scripting language of choice*&lt;/script-language&gt;</text:p>
<text:p text:style-name="P570"><text:s text:c="4" />&lt;/action&gt;</text:p>
<text:p text:style-name="P571"><text:s text:c="4" />...</text:p>
<text:p text:style-name="P572">&lt;/actions&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Here's an example of a
workflow script created in Groovy. This one is designed to be used with
a <text:span text:style-name="T1399">Condition</text:span> statement in
Kaleo. It accesses Liferay's asset framework to determine the category
of an asset in the workflow. The script uses the category to
automatically determine the correct approval process. If the category
<text:span text:style-name="T1400">legal</text:span> has been applied to
the asset, the asset is sent to the
<text:span text:style-name="T1401">Legal Review</text:span> task upon
submission. Otherwise, the asset is sent to the
<text:span text:style-name="T1402">Default Review</text:span>
task.</text:p>
<text:p text:style-name="P573"><text:s text:c="4" />&lt;script&gt;</text:p>
<text:p text:style-name="P574"><text:s text:c="8" />&lt;![CDATA[</text:p>
<text:p text:style-name="P575"><text:s text:c="12" />import com.liferay.portal.kernel.util.GetterUtil;</text:p>
<text:p text:style-name="P576"><text:s text:c="12" />import com.liferay.portal.kernel.workflow.WorkflowConstants;</text:p>
<text:p text:style-name="P577"><text:s text:c="12" />import com.liferay.portal.kernel.workflow.WorkflowHandler;</text:p>
<text:p text:style-name="P578"><text:s text:c="12" />import com.liferay.portal.kernel.workflow.WorkflowHandlerRegistryUtil;</text:p>
<text:p text:style-name="P579"><text:s text:c="12" />import com.liferay.portlet.asset.model.AssetCategory;</text:p>
<text:p text:style-name="P580"><text:s text:c="12" />import com.liferay.portlet.asset.model.AssetEntry;</text:p>
<text:p text:style-name="P581"><text:s text:c="12" />import com.liferay.portlet.asset.model.AssetRenderer;</text:p>
<text:p text:style-name="P582"><text:s text:c="12" />import com.liferay.portlet.asset.model.AssetRendererFactory;</text:p>
<text:p text:style-name="P583"><text:s text:c="12" />import com.liferay.portlet.asset.service.AssetEntryLocalServiceUtil;</text:p>
<text:p text:style-name="P584"></text:p>
<text:p text:style-name="P585"><text:s text:c="12" />import java.util.List;</text:p>
<text:p text:style-name="P586"></text:p>
<text:p text:style-name="P587"><text:s text:c="12" />String className = (String)workflowContext.get(</text:p>
<text:p text:style-name="P588"><text:s text:c="16" />WorkflowConstants.CONTEXT_ENTRY_CLASS_NAME);</text:p>
<text:p text:style-name="P589"></text:p>
<text:p text:style-name="P590"><text:s text:c="12" />WorkflowHandler workflowHandler =</text:p>
<text:p text:style-name="P591"><text:s text:c="16" />WorkflowHandlerRegistryUtil.getWorkflowHandler(className);</text:p>
<text:p text:style-name="P592"></text:p>
<text:p text:style-name="P593"><text:s text:c="12" />AssetRendererFactory assetRendererFactory =</text:p>
<text:p text:style-name="P594"><text:s text:c="16" />workflowHandler.getAssetRendererFactory();</text:p>
<text:p text:style-name="P595"></text:p>
<text:p text:style-name="P596"><text:s text:c="12" />long classPK =</text:p>
<text:p text:style-name="P597"><text:s text:c="16" />GetterUtil.getLong((String)workflowContext.get</text:p>
<text:p text:style-name="P598"><text:s text:c="16" />(WorkflowConstants.CONTEXT_ENTRY_CLASS_PK));</text:p>
<text:p text:style-name="P599"></text:p>
<text:p text:style-name="P600"><text:s text:c="12" />AssetRenderer assetRenderer =</text:p>
<text:p text:style-name="P601"><text:s text:c="16" />workflowHandler.getAssetRenderer(classPK);</text:p>
<text:p text:style-name="P602"></text:p>
<text:p text:style-name="P603"><text:s text:c="12" />AssetEntry assetEntry = assetRendererFactory.getAssetEntry(</text:p>
<text:p text:style-name="P604"><text:s text:c="16" />assetRendererFactory.getClassName(), assetRenderer.getClassPK());</text:p>
<text:p text:style-name="P605"></text:p>
<text:p text:style-name="P606"><text:s text:c="12" />List&lt;AssetCategory&gt; assetCategories = assetEntry.getCategories();</text:p>
<text:p text:style-name="P607"></text:p>
<text:p text:style-name="P608"><text:s text:c="12" />returnValue = &quot;Default Review&quot;;</text:p>
<text:p text:style-name="P609"></text:p>
<text:p text:style-name="P610"><text:s text:c="12" />for (AssetCategory assetCategory : assetCategories) {</text:p>
<text:p text:style-name="P611"><text:s text:c="16" />String categoryName = assetCategory.getName();</text:p>
<text:p text:style-name="P612"></text:p>
<text:p text:style-name="P613"><text:s text:c="16" />if (categoryName.equals(&quot;legal&quot;)) {</text:p>
<text:p text:style-name="P614"><text:s text:c="20" />returnValue = &quot;Legal Review&quot;;</text:p>
<text:p text:style-name="P615"></text:p>
<text:p text:style-name="P616"><text:s text:c="20" />return;</text:p>
<text:p text:style-name="P617"><text:s text:c="16" />}</text:p>
<text:p text:style-name="P618"><text:s text:c="12" />}</text:p>
<text:p text:style-name="P619"><text:s text:c="11" />]]&gt;</text:p>
<text:p text:style-name="P620"><text:s text:c="4" />&lt;/script&gt;</text:p>
<text:p text:style-name="P621"><text:s text:c="4" />&lt;script-language&gt;groovy&lt;/script-language&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Within a workflow, the next
task or state is chosen based on the return value. For a complete
example a workflow script that uses the above Groovy script, please see
the
<text:span text:style-name="T1403">legal-workflow-script.xml</text:span>
file in the User Guide's code folder on Github:
<text:a xlink:type="simple" xlink:href="https://github.com/liferay/liferay-docs/blob/master/userGuide/code/legal-workflow-script.xml" office:name=""><text:span text:style-name="Definition">https://github.com/liferay/liferay-docs/blob/master/userGuide/code/legal-workflow-script.xml</text:span></text:a>.</text:p>
<text:p text:style-name="Text_20_body">The combination of Liferay's
scripting and workflow engines is incredibly powerful. However, since it
provides users with the ability to execute code, it can be dangerous.
When configuring your permissions, be aware of the potential
consequences of poorly, or maliciously, written scripts inside of a
workflow definition. For more information on creating workflow
definitions with Kaleo workflow, see
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/using-workflow-liferay-portal-6-2-user-guide-11-en" office:name=""><text:span text:style-name="Definition">chapter
11</text:span></text:a> of this guide.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Custom
Java Tools in the Script Engine
<text:a xlink:type="simple" xlink:href="id=custom-java-tools-in-the-script-engine" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Users of the Script Engine
face several challenges, including debugging and logging challenges. One
approach to overcome these challenges is to develop custom Java
utilities that can be called from your scripts. These utilities can
write to a custom log file or the Liferay log file. You can also place
breakpoints in your utility code and step through it using your favorite
debugger.</text:p>
<text:p text:style-name="Text_20_body">Liferay's use of Spring and
<text:span text:style-name="T1404">PortletBeanLocatorUtil</text:span>
makes calling these Java utilities from your script easy, regardless of
the scripting language you're using.</text:p>
<text:p text:style-name="Text_20_body">Let's begin by creating a Liferay
Hook project. If you're using Liferay IDE or Liferay Developer Studio,
select <text:span text:style-name="T1405">File</text:span> →
<text:span text:style-name="T1406">New</text:span> →
<text:span text:style-name="T1407">Liferay</text:span><text:span text:style-name="T1408">
</text:span><text:span text:style-name="T1409">Project</text:span>. Name
the project <text:span text:style-name="T1410">script-utils</text:span>
and accept the display name generated by the wizard. Be sure to select
<text:span text:style-name="T1411">Hook</text:span> for the Plugin Type
and then select
<text:span text:style-name="T1412">Finish</text:span>.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img40"><draw:image xlink:href="../../images/13-new-liferay-project.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">You're using a Liferay Hook
Plugin to deploy your utility, but you're not using any of the typical
hook features. You just need a way to make your code available to the
portal and the Hook Plugin is the least obtrusive way to do this. This
means you don't need to add anything to the
<text:span text:style-name="T1413">liferay-hook.xml</text:span> file.
Instead, you'll begin by adding your utility code.</text:p>
<text:p text:style-name="Text_20_body">You'll be following the
Dependency Injection design pattern so begin by creating the interface.
Right-click on the
<text:span text:style-name="T1414">docroot/WEB-INF/src</text:span>
folder and select <text:span text:style-name="T1415">New</text:span> →
<text:span text:style-name="T1416">Interface</text:span>. You'll create
your interface in the
<text:span text:style-name="T1417">com.liferay.sample</text:span>
package. Name it
<text:span text:style-name="T1418">ScriptUtil</text:span>.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img41"><draw:image xlink:href="../../images/13-new-interface.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Next, add two methods to the
interface.</text:p>
<text:p text:style-name="P622">package com.liferay.sample;</text:p>
<text:p text:style-name="P623"></text:p>
<text:p text:style-name="P624">public interface ScriptUtil {</text:p>
<text:p text:style-name="P625"></text:p>
<text:p text:style-name="P626"><text:s text:c="4" />public String operationOne(); </text:p>
<text:p text:style-name="P627"></text:p>
<text:p text:style-name="P628"><text:s text:c="4" />public String operationTwo(String name); </text:p>
<text:p text:style-name="P629"></text:p>
<text:p text:style-name="P630">}</text:p>
<text:p text:style-name="First_20_paragraph">Next, create the
implementation class. Right-click on the
<text:span text:style-name="T1419">docroot/WEB-INF/src</text:span>
folder and select <text:span text:style-name="T1420">New</text:span> →
<text:span text:style-name="T1421">Class</text:span>. Create the class
in the <text:span text:style-name="T1422">com.liferay.sample</text:span>
package and name it
<text:span text:style-name="T1423">ScriptUtilImpl</text:span>. Be sure
to select
<text:span text:style-name="T1424">com.liferay.sample.ScripUtil</text:span>
as the Interface.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img42"><draw:image xlink:href="../../images/13-new-class.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Next, add implementations for the
two methods.</text:p>
<text:p text:style-name="P631">package com.liferay.sample;</text:p>
<text:p text:style-name="P632"></text:p>
<text:p text:style-name="P633">import com.liferay.portal.kernel.log.Log;</text:p>
<text:p text:style-name="P634">import com.liferay.portal.kernel.log.LogFactoryUtil;</text:p>
<text:p text:style-name="P635"></text:p>
<text:p text:style-name="P636">public class ScriptUtilImpl implements ScriptUtil {</text:p>
<text:p text:style-name="P637"></text:p>
<text:p text:style-name="P638"><text:s text:c="4" />@Override</text:p>
<text:p text:style-name="P639"><text:s text:c="4" />public String operationOne() { </text:p>
<text:p text:style-name="P640"><text:s text:c="4" /></text:p>
<text:p text:style-name="P641"><text:s text:c="8" />return &quot;Hello out there!&quot;; </text:p>
<text:p text:style-name="P642"><text:s text:c="4" />} </text:p>
<text:p text:style-name="P643"></text:p>
<text:p text:style-name="P644"><text:s text:c="4" />@Override</text:p>
<text:p text:style-name="P645"><text:s text:c="4" />public String operationTwo(String name) { </text:p>
<text:p text:style-name="P646"></text:p>
<text:p text:style-name="P647"><text:s text:c="8" />_log.debug(&quot;Inside of Operation Two&quot;);</text:p>
<text:p text:style-name="P648"><text:s text:c="8" /></text:p>
<text:p text:style-name="P649"><text:s text:c="8" />return &quot;Hello &quot; + name + &quot;!&quot;; </text:p>
<text:p text:style-name="P650"><text:s text:c="4" />}</text:p>
<text:p text:style-name="P651"><text:s text:c="4" /></text:p>
<text:p text:style-name="P652"><text:s text:c="4" />private static Log _log = LogFactoryUtil.getLog(ScriptUtilImpl.class); </text:p>
<text:p text:style-name="P653"></text:p>
<text:p text:style-name="P654">}</text:p>
<text:p text:style-name="First_20_paragraph">Liferay makes extensive use
of the Spring Framework and you'll be using it here to inject your
implementation class into the application. Spring needs a bean
definition which you'll declare in an XML file named
<text:span text:style-name="T1425">hook-spring.xml</text:span>. Create a
<text:span text:style-name="T1426">docroot/WEB-INF/src/META-INF</text:span>
directory, create the
<text:span text:style-name="T1427">hook-spring.xml</text:span> file in
this folder, and add the following code to
<text:span text:style-name="T1428">hook-spring.xml</text:span>:</text:p>
<text:p text:style-name="P655">&lt;?xml version=&quot;1.0&quot;?&gt;</text:p>
<text:p text:style-name="P656"></text:p>
<text:p text:style-name="P657">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</text:p>
<text:p text:style-name="P658"><text:s text:c="8" />xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</text:p>
<text:p text:style-name="P659"><text:s text:c="8" />default-destroy-method=&quot;destroy&quot; default-init-method=&quot;afterPropertiesSet&quot;</text:p>
<text:p text:style-name="P660"><text:s text:c="8" />xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</text:p>
<text:p text:style-name="P661"><text:s text:c="8" />&lt;bean id=&quot;com.liferay.sample.ScriptUtil&quot; class=&quot;com.liferay.sample.ScriptUtilImpl&quot; /&gt;</text:p>
<text:p text:style-name="P662">&lt;/beans&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Upon deployment, you'll
need the portal to create a
<text:span text:style-name="T1429">BeanLocator</text:span> for your
plugin. The <text:span text:style-name="T1430">BeanLocator</text:span>
reads the bean definitions you provided. Create a
<text:span text:style-name="T1431">docroot/WEB-INF/web.xml</text:span>
file in your project and add the following code to it:</text:p>
<text:p text:style-name="P663">&lt;web-app version=&quot;2.4&quot; xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt;</text:p>
<text:p text:style-name="P664"><text:s text:c="8" />&lt;context-param&gt;</text:p>
<text:p text:style-name="P665"><text:s text:c="16" />&lt;param-name&gt;portalContextConfigLocation&lt;/param-name&gt;</text:p>
<text:p text:style-name="P666"><text:s text:c="16" />&lt;param-value&gt;/WEB-INF/classes/META-INF/hook-spring.xml&lt;/param-value&gt;</text:p>
<text:p text:style-name="P667"><text:s text:c="8" />&lt;/context-param&gt;</text:p>
<text:p text:style-name="P668">&lt;/web-app&gt;</text:p>
<text:p text:style-name="First_20_paragraph">If your project already
contains a
<text:span text:style-name="T1432">docroot/WEB-INF/web.xml</text:span>
file, you can simply add the contents of the
<text:span text:style-name="T1433">&lt;context-param&gt;</text:span>
element inside of the
<text:span text:style-name="T1434">&lt;web-app&gt;</text:span> element.
Save all of the changes you've made and deploy the hook. Once the hook
has been deployed successfully, the
<text:span text:style-name="T1435">ScriptUtil</text:span> can be used in
your script engine code.</text:p>
<text:p text:style-name="Text_20_body">To see the
<text:span text:style-name="T1436">ScriptUtil</text:span> code in
action, navigate back to the
<text:span text:style-name="T1437">Control</text:span><text:span text:style-name="T1438">
</text:span><text:span text:style-name="T1439">Panel</text:span> →
<text:span text:style-name="T1440">Server</text:span><text:span text:style-name="T1441">
</text:span><text:span text:style-name="T1442">Administration</text:span>
→ <text:span text:style-name="T1443">Script</text:span>. Change the
script type to Groovy and enter the following script:</text:p>
<text:p text:style-name="P669">myUtil = com.liferay.portal.kernel.bean.PortletBeanLocatorUtil.locate(</text:p>
<text:p text:style-name="P670"><text:s text:c="4" />&quot;script-utils-hook&quot;, &quot;com.liferay.sample.ScriptUtil&quot;)</text:p>
<text:p text:style-name="P671"></text:p>
<text:p text:style-name="P672">println(myUtil.operationOne())</text:p>
<text:p text:style-name="P673"></text:p>
<text:p text:style-name="P674">println(myUtil.operationTwo(&quot;Joe Bloggs&quot;))</text:p>
<text:p text:style-name="First_20_paragraph">Click
<text:span text:style-name="T1444">Execute</text:span> and you should
see the results of your script displayed right under the script
console.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Summary
<text:a xlink:type="simple" xlink:href="id=summary-16" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">In this chapter, we saw how
Liferay's script engine opens up many exciting possibilities for working
with Liferay. You can write and execute scripts from Liferay's Script
console in the Control Panel using in a variety of languages including
Beanshell, Javascript, Groovy, Python, and Ruby. We learned how you can
leverage Liferay's Services Oriented Architecture (SOA) from any of the
popular scripting languages that Liferay supports. We also saw how those
scripts could be used to simplify administrative tasks by leveraging the
Script console. Next, we discovered how you could enhance workflow by
using the power of scripts. Lastly, we saw how you could overcome some
of the limitations of running scripts in Liferay by creating custom Java
utilities that could be executed from within your scripts.</text:p>
<text:p text:style-name="Text_20_body">As you can see, Liferay's script
engine opens up many exciting possibilities for working with Liferay
regardless of your language of choice.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Managing
Liferay with Liferay Cloud Services
<text:a xlink:type="simple" xlink:href="id=managing-liferay-with-liferay-cloud-services" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay Cloud Services
(LCS) is a set of tools and services that lets you manage and monitor
your Liferay installations. While Liferay's patching tool lets you apply
fix packs and other updates, the install process is still manual. LCS
simplifies this process by automatically installing any fix packs that
you <text:span text:style-name="T1445">choose</text:span>. That last
point is an important one--LCS won't install anything that you don't
specifically choose for installation. You still have control over what
gets applied to your Liferay installations. LCS just automates the
process by enabling one-click downloading and updating. You can also use
LCS to monitor the performance of your Liferay instances. This includes
data on pages, portlets, memory usage, JVM performance, and much more.
Even better, the features of LCS work regardless of whether your Liferay
instance is on a single discreet server, or distributed across a
node.</text:p>
<text:p text:style-name="Text_20_body">Before going any further, you
should make sure that your Liferay instances meet the requirements for
LCS--you must be running Liferay Portal 6.1 GA 3, or 6.2 GA 1 or above.
Using LCS to apply fix packs and other updates is an EE only feature.
The monitoring features of LCS are available to both Liferay CE and
EE.</text:p>
<text:p text:style-name="Text_20_body">Also, you should take note of a
few key terms used throughout this guide:</text:p>
<text:list text:style-name="L73">
  <text:list-item>
    <text:p text:style-name="P675"><text:span text:style-name="T1446">Project</text:span>:
    Represents a group of users belonging to a company or organization.
    For example, a project can consist of all the users from a project
    team or business unit, or it can include the entire
    company.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P675"><text:span text:style-name="T1447">Environment</text:span>:
    Represents a physical cluster of servers, or a virtual or logical
    aggregation of servers.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P675"><text:span text:style-name="T1448">Server</text:span>:
    Describes a concrete portal instance. It can be a standalone server
    or a cluster node.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">As you go through this
guide, you'll cover the following sections on LCS:</text:p>
<text:list text:style-name="L74">
  <text:list-item>
    <text:p text:style-name="P676">LCS Account Setup</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P676">Portal Preconfiguration (Liferay 6.1
    GA3 only)</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P676">Patching Tool Configuration (EE
    only)</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P676">LCS Client Configuration</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P676">Using LCS</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Next, you'll get started by
setting up your LCS account.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Setting up
Your LCS Account
<text:a xlink:type="simple" xlink:href="id=setting-up-your-lcs-account" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">To use LCS, you first need
to set up an account at
<text:a xlink:type="simple" xlink:href="https://lcs.liferay.com" office:name=""><text:span text:style-name="Definition">lcs.liferay.com</text:span></text:a>.
When creating an account, you're taken through the steps of accepting
the terms of service, setting your password, and setting your password
reminder. You're then taken to the
<text:span text:style-name="T1449">Projects</text:span> screen where you
can join an existing project or create a new one.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img43"><draw:image xlink:href="../../images/lcs-projects.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">The list of existing projects, if
present, is the list of projects associated with the domain of your
email address. This is typically the company your email address is
associated with. For example, if your email address is
<text:span text:style-name="T1450">joebloggs@janesblogfactory.com</text:span>,
you're then presented with a list of existing projects registered to
users with the
<text:span text:style-name="T1451">@janesblogfactory.com</text:span>
domain. This lets you quickly and easily join the LCS projects that are
associated with your company. To request access to a project, simply
check its checkbox and click
<text:span text:style-name="T1452">Save</text:span>. Your request is
then sent to the project administrator for approval. Note that it's
possible for the project administrator to pre-assign you a role in a
project (more on LCS roles in a moment). In this case, you won't have to
wait for approval. For more information on user management in LCS,
please see the
<text:span text:style-name="T1453">Managing</text:span><text:span text:style-name="T1454">
</text:span><text:span text:style-name="T1455">LCS</text:span><text:span text:style-name="T1456">
</text:span><text:span text:style-name="T1457">Users</text:span><text:span text:style-name="T1458">
</text:span><text:span text:style-name="T1459">in</text:span><text:span text:style-name="T1460">
</text:span><text:span text:style-name="T1461">Your</text:span><text:span text:style-name="T1462">
</text:span><text:span text:style-name="T1463">Project</text:span>
section of this guide.</text:p>
<text:p text:style-name="Text_20_body">Alternatively, you can create a
new project and make yourself its administrator. To do so, click the
checkbox next to
<text:span text:style-name="T1464">Create</text:span><text:span text:style-name="T1465">
</text:span><text:span text:style-name="T1466">a</text:span><text:span text:style-name="T1467">
</text:span><text:span text:style-name="T1468">project</text:span><text:span text:style-name="T1469">
</text:span><text:span text:style-name="T1470">and</text:span><text:span text:style-name="T1471">
</text:span><text:span text:style-name="T1472">become</text:span><text:span text:style-name="T1473">
</text:span><text:span text:style-name="T1474">an</text:span><text:span text:style-name="T1475">
</text:span><text:span text:style-name="T1476">administrator</text:span>
in the New Project section of the Projects screen. The section then
expands to let you name the project and choose to go to directly to the
project's <text:span text:style-name="T1477">Dashboard</text:span> (more
on the Dashboard later). Give your project a name and then click
<text:span text:style-name="T1478">Save</text:span>.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img44"><draw:image xlink:href="../../images/lcs-new-project.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">So what exactly can an LCS
Administrator do? Fantastic question! As LCS Administrator, you can
assign roles to the rest of the users in your project. Each user of LCS
needs to have an assigned role. The following roles are
available:</text:p>
<text:list text:style-name="L75">
  <text:list-item>
    <text:p text:style-name="P677">LCS Administrator: All LCS
    functionality is available to administrators. This is the only role
    that can manage the roles of other users.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P677">LCS Environment Manager: All LCS
    functionality is available in the scope of an environment, with the
    exception of managing other users.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P677">LCS Environment Viewer: Has read-only
    access in the scope of an environment.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">Now that your LCS account
has been set up and you have an understanding of the LCS roles, you can
get your portal ready for LCS.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Preconfiguring
Your Portal for LCS
<text:a xlink:type="simple" xlink:href="id=preconfiguring-your-portal-for-lcs" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you're running Liferay
6.2, then you can skip this step. If, however, you are running Liferay
6.1 GA3, then there's a small pre-configuration step that you need to
take before using LCS: you need to update the
<text:span text:style-name="T1479">spring.configs</text:span> property
in your
<text:span text:style-name="T1480">portal-ext.properties</text:span>
file. This is a workaround for a bug in Liferay 6.1 GA3, where the
values for this property are listed in the wrong order. This causes the
metrics service in LCS to not be initialized. To fix this, add the
following configuration to your
<text:span text:style-name="T1481">portal-ext.properties</text:span>
file:</text:p>
<text:p text:style-name="P678">spring.configs=\</text:p>
<text:p text:style-name="P679"><text:s text:c="4" />META-INF/base-spring.xml,\</text:p>
<text:p text:style-name="P680"><text:s text:c="4" />\</text:p>
<text:p text:style-name="P681"><text:s text:c="4" />META-INF/hibernate-spring.xml,\</text:p>
<text:p text:style-name="P682"><text:s text:c="4" />META-INF/infrastructure-spring.xml,\</text:p>
<text:p text:style-name="P683"><text:s text:c="4" />META-INF/management-spring.xml,\</text:p>
<text:p text:style-name="P684"><text:s text:c="4" />\</text:p>
<text:p text:style-name="P685"><text:s text:c="4" />META-INF/util-spring.xml,\</text:p>
<text:p text:style-name="P686"><text:s text:c="4" />\</text:p>
<text:p text:style-name="P687"><text:s text:c="4" />META-INF/jpa-spring.xml,\</text:p>
<text:p text:style-name="P688"><text:s text:c="4" />\</text:p>
<text:p text:style-name="P689"><text:s text:c="4" />META-INF/executor-spring.xml,\</text:p>
<text:p text:style-name="P690"><text:s text:c="4" />\</text:p>
<text:p text:style-name="P691"><text:s text:c="4" />META-INF/audit-spring.xml,\</text:p>
<text:p text:style-name="P692"><text:s text:c="4" />META-INF/cluster-spring.xml,\</text:p>
<text:p text:style-name="P693"><text:s text:c="4" />META-INF/editor-spring.xml,\</text:p>
<text:p text:style-name="P694"><text:s text:c="4" />META-INF/jcr-spring.xml,\</text:p>
<text:p text:style-name="P695"><text:s text:c="4" />META-INF/ldap-spring.xml,\</text:p>
<text:p text:style-name="P696"><text:s text:c="4" />META-INF/messaging-core-spring.xml,\</text:p>
<text:p text:style-name="P697"><text:s text:c="4" />META-INF/messaging-misc-spring.xml,\</text:p>
<text:p text:style-name="P698"><text:s text:c="4" />META-INF/mobile-device-spring.xml,\</text:p>
<text:p text:style-name="P699"><text:s text:c="4" />META-INF/notifications-spring.xml,\</text:p>
<text:p text:style-name="P700"><text:s text:c="4" />META-INF/poller-spring.xml,\</text:p>
<text:p text:style-name="P701"><text:s text:c="4" />META-INF/rules-spring.xml,\</text:p>
<text:p text:style-name="P702"><text:s text:c="4" />META-INF/scheduler-spring.xml,\</text:p>
<text:p text:style-name="P703"><text:s text:c="4" />META-INF/scripting-spring.xml,\</text:p>
<text:p text:style-name="P704"><text:s text:c="4" />META-INF/search-spring.xml,\</text:p>
<text:p text:style-name="P705"><text:s text:c="4" />META-INF/workflow-spring.xml,\</text:p>
<text:p text:style-name="P706"><text:s text:c="4" />\</text:p>
<text:p text:style-name="P707"><text:s text:c="4" />META-INF/counter-spring.xml,\</text:p>
<text:p text:style-name="P708"><text:s text:c="4" />META-INF/mail-spring.xml,\</text:p>
<text:p text:style-name="P709"><text:s text:c="4" />META-INF/portal-spring.xml,\</text:p>
<text:p text:style-name="P710"><text:s text:c="4" />META-INF/portlet-container-spring.xml,\</text:p>
<text:p text:style-name="P711"><text:s text:c="4" />META-INF/staging-spring.xml,\</text:p>
<text:p text:style-name="P712"><text:s text:c="4" />META-INF/virtual-layouts-spring.xml,\</text:p>
<text:p text:style-name="P713"><text:s text:c="4" />\</text:p>
<text:p text:style-name="P714"><text:s text:c="4" />META-INF/monitoring-spring.xml,\</text:p>
<text:p text:style-name="P715"><text:s text:c="4" />\</text:p>
<text:p text:style-name="P716"><text:s text:c="4" />#META-INF/dynamic-data-source-spring.xml,\</text:p>
<text:p text:style-name="P717"><text:s text:c="4" />#META-INF/shard-data-source-spring.xml,\</text:p>
<text:p text:style-name="P718"><text:s text:c="4" />#META-INF/memcached-spring.xml,\</text:p>
<text:p text:style-name="P719"><text:s text:c="4" />\</text:p>
<text:p text:style-name="P720"><text:s text:c="4" />META-INF/ext-spring.xml</text:p>
<text:p text:style-name="First_20_paragraph">A server restart is
required after updating
<text:span text:style-name="T1482">portal-ext.properties</text:span>.
Next, you need to configure the patching tool.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Configuring
the Patching Tool
<text:a xlink:type="simple" xlink:href="id=configuring-the-patching-tool" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay EE's patching tool
is leveraged by LCS to apply its updates. If you're running a Liferay EE
bundle, then you already have the patching tool installed. If you're not
running a bundle, then please see the user guide section on
<text:a xlink:type="simple" xlink:href="http://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/patching-liferay-liferay-portal-6-2-user-guide-18-en" office:name=""><text:span text:style-name="Definition">how
to install the patching tool</text:span></text:a>. Once you have the
patching tool installed, there are a few steps you need to complete
before LCS can use it. Note that the commands below apply to Linux,
Unix, and Mac systems. If you're running Windows, simply drop the
<text:span text:style-name="T1483">.sh</text:span> from each command
that has it.</text:p>
<text:list text:style-name="L76">
  <text:list-item>
    <text:p text:style-name="P721">Navigate to the
    <text:span text:style-name="T1484">patching-tool</text:span>
    directory on the command line. It's typically located in the Liferay
    Home folder.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P721">Make sure that you have version 10 or
    higher of the patching tool. To display the version of your patching
    tool, run
    <text:span text:style-name="T1485">patching-tool.sh info</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P721">Delete
    <text:span text:style-name="T1486">default.properties</text:span>
    from the
    <text:span text:style-name="T1487">patching-tool</text:span>
    directory.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P721">Enable the patching tool by running
    <text:span text:style-name="T1488">patching-tool.sh auto-discovery</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P721">Configure the patching tool by
    running
    <text:span text:style-name="T1489">patching-tool.sh setup</text:span>.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P721">Patches downloaded through LCS are
    installed by the patching tool agent on server startup. For the
    agent to start with your server, you need to set the
    <text:span text:style-name="T1490">javaagent</text:span> property in
    the JVM options. Make sure that you specify the correct file path to
    the
    <text:span text:style-name="T1491">patching-tool-agent.jar</text:span>.
    Here's an example of setting the
    <text:span text:style-name="T1492">javaagent</text:span>
    property:</text:p>
<text:p text:style-name="P722">-javaagent:../../patching-tool/lib/patching-tool-agent.jar</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">If your patching tool is
installed in a location other than the Liferay Home folder, you must
specify the path of the
<text:span text:style-name="T1493">patching-tool</text:span> folder as a
JVM argument for the app server. This is done with the
<text:span text:style-name="T1494">patching.tool.home</text:span>
property. For example:</text:p>
<text:p text:style-name="P723"><text:s text:c="4" />-Dpatching.tool.home=/home/bzz/workspace/fixpacks/test-agent/liferay-portal-6.1.20-ee-ga2/patching-tool/</text:p>
<text:p text:style-name="First_20_paragraph">Great! Now you're all set
to deploy and configure the LCS client portlet.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Configuring
the LCS Client
<text:a xlink:type="simple" xlink:href="id=configuring-the-lcs-client" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Once you deploy the LCS
client portlet, you can use it to register your server with your LCS
account. Access the portlet by clicking on
<text:span text:style-name="T1495">Liferay</text:span><text:span text:style-name="T1496">
</text:span><text:span text:style-name="T1497">Cloud</text:span><text:span text:style-name="T1498">
</text:span><text:span text:style-name="T1499">Services</text:span>
under the <text:span text:style-name="T1500">Apps</text:span> section of
the
<text:span text:style-name="T1501">Control</text:span><text:span text:style-name="T1502">
</text:span><text:span text:style-name="T1503">Panel</text:span>.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img45"><draw:image xlink:href="../../images/lcs-post-install-01.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">After clicking
<text:span text:style-name="T1504">Authorize</text:span><text:span text:style-name="T1505">
</text:span><text:span text:style-name="T1506">Access</text:span> on the
screen that appears, you are then taken to the LCS website. Log in with
your credentials and then click
<text:span text:style-name="T1507">Grant</text:span><text:span text:style-name="T1508">
</text:span><text:span text:style-name="T1509">Access</text:span>.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img46"><draw:image xlink:href="../../images/lcs-auth-access.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Next, you need to register your
server with LCS by filling out the following fields:</text:p>
<text:list text:style-name="L77">
  <text:list-item>
    <text:p text:style-name="P724">Cloud Services Project: Choose your
    project from the menu.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P724">Environment: Select an environment
    from the menu or create a new one by clicking the
    <text:span text:style-name="T1510">Add</text:span><text:span text:style-name="T1511">
    </text:span><text:span text:style-name="T1512">New</text:span><text:span text:style-name="T1513">
    </text:span><text:span text:style-name="T1514">Environment</text:span>
    button. An environment should be a logical group of servers. A group
    of development servers or a cluster are good examples of
    environments. If you elect to create a new environment, a popup asks
    you to enter its
    <text:span text:style-name="T1515">Name</text:span>,
    <text:span text:style-name="T1516">Location</text:span>, and
    <text:span text:style-name="T1517">Description</text:span>.</text:p>
    <text:p text:style-name="P724"><draw:frame draw:name="img47"><draw:image xlink:href="../../images/lcs-new-environment.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P724">Server Name: Give your server a name
    that you can use to distinguish it in your LCS account.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P724">Server Location: This can be a city,
    location in an office building, or anywhere else that lets you know
    where the server is physically located.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P724">Server Description: Type in any
    description that you want to give your server. You can use this
    field to help differentiate the servers you are managing using
    LCS.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img48"><draw:image xlink:href="../../images/lcs-register-server.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Upon clicking
<text:span text:style-name="T1518">Register</text:span>, your LCS client
portlet shows your connection status. Note that it can take up to 10 or
20 seconds to perform the initial handshake with LCS and send the first
batch of information to the cloud. If you don't see any change in status
after 20 seconds, try refreshing the page. If you see a red symbol
indicating no data is being transmitted, please contact the Liferay team
for support.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img49"><draw:image xlink:href="../../images/lcs-server-connecting.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Once a successful connection is
established, some statistics and links are displayed. Here's a
description of what's displayed:</text:p>
<text:list text:style-name="L78">
  <text:list-item>
    <text:p text:style-name="P725">Heartbeat Interval: The communication
    interval with LCS. For example, if this value is
    <text:span text:style-name="T1519">00:01:00</text:span>, then the
    portlet communicates with LCS once every minute.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P725">Message Task Interval: The message
    interval with LCS. Messages received from LCS let the portlet know
    about any available updates.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P725">Metrics Task Interval: The interval
    at which server statistics and metrics are taken.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P725">Project: Clicking this link takes you
    to this server's registered project.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P725">Environment: Clicking this link takes
    you to this server's registered environment.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P725">Server: Clicking this link takes you
    to the server on LCS.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P725">Disconnect: Disconnects this Liferay
    instance from LCS.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P725">Reset Credentials: Removes the
    authorizing account from registration with LCS. It's important to
    note that your credentials are not human readable in the portal
    instance. This is because OAuth, which uses tokens, is used for
    authentication.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img50"><draw:image xlink:href="../../images/lcs-server-connected.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Great! Now that you've registered
your server with your LCS account, you can dig in to the features of
LCS.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Using LCS
<text:a xlink:type="simple" xlink:href="id=using-lcs" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Once your LCS client is
registered with your LCS account, you can get down to the business that
LCS was designed for--managing and monitoring your Liferay instance. If
you're not already there, log in with your account on
<text:a xlink:type="simple" xlink:href="https://lcs.liferay.com" office:name=""><text:span text:style-name="Definition">lcs.liferay.com</text:span></text:a>.
This is where you'll apply updates, view server metrics, manage
environments, invite external users to your project, and more.</text:p>
<text:p text:style-name="Text_20_body">At this point, you might be
wondering what information about your servers is stored on the LCS
servers. Great question! In order to offer the best service possible, we
store the following information about your servers: patches installed on
each server,
<text:span text:style-name="T1520">portal.properties</text:span> (except
sensitive data), JVM metrics, portal and portlet metrics, and cache and
server metrics. Sensitive data is defined as any key-value pair that
contains usernames or passwords. For example, the following properties
are considered sensitive and are not stored on the LCS servers:</text:p>
<text:p text:style-name="P726">omniadmin.users</text:p>
<text:p text:style-name="P727">ldap.security.credentials.0, ldap.security.credentials.1, ldap.security.credentials.2 ...</text:p>
<text:p text:style-name="P728">facebook.connect.app.secret</text:p>
<text:p text:style-name="P729">auth.token.shared.secret</text:p>
<text:p text:style-name="P730">auth.mac.shared.key</text:p>
<text:p text:style-name="P731">captcha.engine.recaptcha.key.private</text:p>
<text:p text:style-name="P732">amazon.secret.access.key</text:p>
<text:p text:style-name="P733">tunneling.servlet.shared.secret</text:p>
<text:p text:style-name="P734">microsoft.translator.client.secret</text:p>
<text:p text:style-name="P735">dl.store.s3.secret.key</text:p>
<text:p text:style-name="P736">auto.deploy.glassfish.jee.dm.passwd</text:p>
<text:p text:style-name="First_20_paragraph">Also, any properties that
end in <text:span text:style-name="T1521">.password</text:span> and are
not stored, with the exception of the following non-sensitive
properties:</text:p>
<text:p text:style-name="P737">portal.jaas.plain.password</text:p>
<text:p text:style-name="P738">portal.jaas.strict.password</text:p>
<text:p text:style-name="P739">login.create.account.allow.custom.password</text:p>
<text:p text:style-name="First_20_paragraph">Now that you know what
information is stored on the LCS servers, it's time to get to the heart
of LCS--the
<text:span text:style-name="T1522">Dashboard</text:span>.</text:p>
<text:p text:style-name="Text_20_body">The LCS Dashboard lets you view
and manage your project, environments, and servers. If you're not
already at the Dashboard, click it near the upper left-hand corner of
your LCS site. Clicking
<text:span text:style-name="T1523">Dashboard</text:span> takes you to
the project view. From there, you can get to the environment view and
the server view. Each of these views gives you a different look into
certain aspects of your LCS project. You'll start with the project
view.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Using the
Project View
<text:a xlink:type="simple" xlink:href="id=using-the-project-view" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">You can get to the project
view at any time by clicking the Dashboard tab near the upper left-hand
corner of your LCS site. The project view provides you with an overview
of your LCS project, including fix packs, alerts, environments, and
servers. Fix packs are displayed prominently in a table on the middle of
the page. Note that the status, environment, server, and location are
listed for each fix pack. If the fix pack is available, you can download
it by clicking the Download button to its right. Once a fix pack is
finished downloading, an alert appears in the Alerts table below the fix
packs table. This notification tells you the download is finished and to
restart your server. Restarting your server installs any downloaded fix
packs. Note that you must start your server with the privileges required
to write to the disk location where patches are stored and processed
(the <text:span text:style-name="T1524">patching-tool</text:span>
folder).</text:p>
<text:p text:style-name="Text_20_body">But what about using LCS to
install fix packs across a cluster? Just follow the same procedure! LCS
downloads and installs fix packs simultaneously across all nodes--you
don't have to handle each one individually.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img51"><draw:image xlink:href="../../images/lcs-project-view.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">In addition to displaying fix
pack messages, the Alerts table also displays many other kinds of
messages. For example, an alert appears whenever a server is offline.
Since this is an important message, it appears with a red dot next to
it. Other alerts appear when monitoring is unavailable, the patching
tool is unavailable, or other issues are detected.</text:p>
<text:p text:style-name="Text_20_body">To the left of the fix packs and
alerts are the environments in your project. You can also create new
environments here by clicking the blue plus icon. If you look at the
icons next to each environment, you'll notice that they're not all the
same. In fact, the color and type of the icon tells you something about
that environment:</text:p>
<text:list text:style-name="L79">
  <text:list-item>
    <text:p text:style-name="P740">Red icon: Indicates that there is
    some sort of problem or issue with one or more servers in that
    environment.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P740">Green icon: Indicates that the
    servers in that environment are operating properly.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P740">Icon with a circle: Indicates that
    the servers in that environment are in a cluster.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">You can get more
information about a specific environment by clicking it. This takes you
to the environment view.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Using the
Environment View
<text:a xlink:type="simple" xlink:href="id=using-the-environment-view" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Clicking an environment on
the left-hand side of the project view takes you to the environment
view. The environment view, as its name implies, gives you more
information about an environment in your LCS project. As with the
project view, fix packs and alerts are displayed on the center of the
screen. In fact, they behave exactly the same here as they do in the
project view. The only difference is that they show fix packs and alerts
for the environment instead of the project as a whole. Located above the
fix packs, the Environment Details button lets you edit or delete the
environment. To the left of the fix packs is the list of servers in the
environment. Clicking on one of the servers takes you to the server view
for that server.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img52"><draw:image xlink:href="../../images/lcs-environment-view.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Using the
Server View
<text:a xlink:type="simple" xlink:href="id=using-the-server-view" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The server view provides
you with detailed information about a server, including statistics and
performance metrics. You can get to the server view by clicking a server
in the environment view or by clicking a server in the fix pack or
alerts tables. Fix packs and alerts are the first thing you see here, as
the Fix Packs Alerts button is selected by default when you enter server
view. While the alerts table functions the same as it does in the other
views, the fix packs table behaves a bit differently. Fix packs are
broken down into those that are available for installation and those
that are already installed. You can access these through the
<text:span text:style-name="T1525">Available</text:span> and
<text:span text:style-name="T1526">Installed</text:span> tabs at the top
of the fix packs table.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img53"><draw:image xlink:href="../../images/lcs-server-view.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">To view metrics and statistics of
your server's performance, click the
<text:span text:style-name="T1527">Metrics</text:span> button near the
top of the page. The metrics are broken down into three main
categories--<text:span text:style-name="T1528">Application</text:span>,
<text:span text:style-name="T1529">JVM</text:span>, and
<text:span text:style-name="T1530">Server</text:span>. Application is
selected by default when you click the Metrics button.</text:p>
<text:p text:style-name="Text_20_body">The Application category also has
three other categories within
it--<text:span text:style-name="T1531">Pages</text:span>,
<text:span text:style-name="T1532">Portlets</text:span>, and
<text:span text:style-name="T1533">Cache</text:span>. Pages lists the
frequency with which specific pages are loaded, along with their average
load time. Portlets lists the same statistics, but for specific portlets
in your server. The Cache category lists Liferay Single VM metrics and
Hibernate metrics. In the following screenshot, the statistics in the
Portlet category are shown.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img54"><draw:image xlink:href="../../images/lcs-server-metrics-application-portlets.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">The JVM category, as its name
indicates, shows statistics about the JVM running on your server. This
includes data on the garbage collector and memory. The number of runs,
total time, and average time are listed for each garbage collector item.
The memory metrics are presented in a bar chart that shows the usage of
the Code Cache, PS Eden Space, PS Old Gen, PS Perm Gen, and PS Survivor
Space.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img55"><draw:image xlink:href="../../images/lcs-server-metrics-jvm.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Server is the third category in
the Application category. The Server category shows additional
information about how your server is running. For example, a horizontal
bar graph shows the number of current threads that are running on your
server. Similarly, horizontal bar graphs are used to represent the JDBC
connection pools.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img56"><draw:image xlink:href="../../images/lcs-metrics-server.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">You can also view the settings
for a server by clicking on the
<text:span text:style-name="T1534">Server</text:span><text:span text:style-name="T1535">
</text:span><text:span text:style-name="T1536">Details</text:span>
button, which is to the right of the Metrics button. The first tab under
the Settings button is
<text:span text:style-name="T1537">LCS</text:span><text:span text:style-name="T1538">
</text:span><text:span text:style-name="T1539">Server</text:span><text:span text:style-name="T1540">
</text:span><text:span text:style-name="T1541">Settings</text:span>.
This lets you view or edit your server's name, description, and
location. You can also unregister your server from LCS. The second tab
under the Settings button is
<text:span text:style-name="T1542">About</text:span><text:span text:style-name="T1543">
</text:span><text:span text:style-name="T1544">Server</text:span>. This
provides general information about your Liferay instance and hardware.
This information is useful to the Liferay support team in the event that
you need their assistance.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img57"><draw:image xlink:href="../../images/lcs-server-details-settings.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">As you can see, the LCS Dashboard
is a powerful tool that greatly simplifies the update process and also
gives you extensive information on how your servers are running. Next
you'll take a look at how to manage the users in your LCS
project.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Managing
LCS Users in Your Project
<text:a xlink:type="simple" xlink:href="id=managing-lcs-users-in-your-project" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">The Users section of LCS is
where you manage the LCS users that are part of your project. It's here
that you can grant or revoke LCS roles or invite others that aren't yet
part of your project. To manage users, first click the
<text:span text:style-name="T1545">Users</text:span> icon just below the
Dashboard icon on the upper-left of your screen. You're presented with a
table of the users on your project. To the right of each is the Manage
button. Clicking <text:span text:style-name="T1546">Manage</text:span>
lets you assign or revoke LCS roles for that user.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img58"><draw:image xlink:href="../../images/lcs-users.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">To invite external users to your
project, click on the
<text:span text:style-name="T1547">Invite</text:span> button. The
<text:span text:style-name="T1548">Invite</text:span><text:span text:style-name="T1549">
</text:span><text:span text:style-name="T1550">External</text:span><text:span text:style-name="T1551">
</text:span><text:span text:style-name="T1552">Users</text:span> pop up
lets you invite anyone with a valid email address. You can also search
for users of Liferay.com to invite. Once you've chosen who to invite,
the <text:span text:style-name="T1553">Role</text:span> selection box
lets you preassign LCS roles for when they accept your
invitation.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img59"><draw:image xlink:href="../../images/lcs-invite-users.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">As you've now seen, LCS is a
powerful tool that simplifies the management of your Liferay servers.
You can apply fix packs with just a single click and a server restart--a
process that even works across a cluster. You also get a one stop shop
for monitoring the performance of your Liferay servers. Metrics like JVM
performance, Liferay page and portlet load times, and number of current
threads give you an inside look at how your server is running. What's
more is that you can do all this collaboratively by inviting others to
your project and giving them specific roles in LCS.</text:p>
<text:p text:style-name="Text_20_body">Next, you'll learn about Liferay
clustering.</text:p>
<text:p text:style-name="Text_20_body">b0VIM
7.4      �{&gt;T�<text:span text:style-name="T1554"> �&quot;  rsezov                                  enterprise                              ~rsezov/Documents/liferay-docs/discover/deployment/articles/06-configuring-for-high-availability/01-liferay-cloud-services.markdown                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          utf-8 3210    #&quot;!</text:span><text:span text:style-name="T1555">
</text:span><text:span text:style-name="T1556">U                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 tp                                              C                            �                            �                     &lt;       �                    =       �                    =       �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ad  �  �            �  �  �  5  4  �  �  V    �  j    �  |  9  �  �  �      �</text:span><text:span text:style-name="T1557">
</text:span><text:span text:style-name="T1558">  �</text:span><text:span text:style-name="T1559">
</text:span><text:span text:style-name="T1560">  ]</text:span><text:span text:style-name="T1561">
</text:span><text:span text:style-name="T1562">  </text:span><text:span text:style-name="T1563">
</text:span><text:span text:style-name="T1564">  �</text:span><text:span text:style-name="T1565">
</text:span><text:span text:style-name="T1566">  �</text:span><text:span text:style-name="T1567">
</text:span><text:span text:style-name="T1568">  �</text:span><text:span text:style-name="T1569">
</text:span><text:span text:style-name="T1570">  U</text:span><text:span text:style-name="T1571">
</text:span><text:span text:style-name="T1572">  T</text:span><text:span text:style-name="T1573">
</text:span><text:span text:style-name="T1574">  H</text:span><text:span text:style-name="T1575">
</text:span><text:span text:style-name="T1576">  -</text:span><text:span text:style-name="T1577">
</text:span><text:span text:style-name="T1578">  </text:span><text:span text:style-name="T1579">
</text:span><text:span text:style-name="T1580">  �  �  �  u  t  </text:span>    �  �  i    �  �  }  |  +  �  �  ?  &gt;    �  }  .  �  �  ;  �  �  R    �  �  L  K                                          <text:span text:style-name="T1581">Create</text:span><text:span text:style-name="T1582">
</text:span><text:span text:style-name="T1583">a</text:span><text:span text:style-name="T1584">
</text:span><text:span text:style-name="T1585">project</text:span><text:span text:style-name="T1586">
</text:span><text:span text:style-name="T1587">and</text:span><text:span text:style-name="T1588">
</text:span><text:span text:style-name="T1589">become</text:span><text:span text:style-name="T1590">
</text:span><text:span text:style-name="T1591">an</text:span><text:span text:style-name="T1592">
</text:span><text:span text:style-name="T1593">administrator</text:span>
in the New Project section of the  To do so, click
t<text:span text:style-name="T1594">Create</text:span><text:span text:style-name="T1595">
</text:span><text:span text:style-name="T1596">a</text:span><text:span text:style-name="T1597">
</text:span><text:span text:style-name="T1598">project</text:span><text:span text:style-name="T1599">
</text:span><text:span text:style-name="T1600">and</text:span><text:span text:style-name="T1601">
</text:span><text:span text:style-name="T1602">become</text:span><text:span text:style-name="T1603">
</text:span><text:span text:style-name="T1604">an</text:span><text:span text:style-name="T1605">
</text:span><text:span text:style-name="T1606">administrator*</text:span><text:span text:style-name="T1607">
</text:span><text:span text:style-name="T1608">in</text:span><text:span text:style-name="T1609">
</text:span><text:span text:style-name="T1610">the</text:span><text:span text:style-name="T1611">
</text:span><text:span text:style-name="T1612">New</text:span><text:span text:style-name="T1613">
</text:span><text:span text:style-name="T1614">Project</text:span><text:span text:style-name="T1615">
</text:span><text:span text:style-name="T1616">section</text:span><text:span text:style-name="T1617">
</text:span><text:span text:style-name="T1618">of</text:span><text:span text:style-name="T1619">
</text:span><text:span text:style-name="T1620">the</text:span><text:span text:style-name="T1621">
</text:span><text:span text:style-name="T1622"> </text:span><text:span text:style-name="T1623">Create</text:span><text:span text:style-name="T1624">
</text:span><text:span text:style-name="T1625">a</text:span><text:span text:style-name="T1626">
</text:span><text:span text:style-name="T1627">project</text:span><text:span text:style-name="T1628">
</text:span><text:span text:style-name="T1629">and</text:span><text:span text:style-name="T1630">
</text:span><text:span text:style-name="T1631">become</text:span><text:span text:style-name="T1632">
</text:span><text:span text:style-name="T1633">an</text:span><text:span text:style-name="T1634">
</text:span><text:span text:style-name="T1635">administrator</text:span><text:span text:style-name="T1636">
</text:span><text:span text:style-name="T1637">in</text:span><text:span text:style-name="T1638">
</text:span><text:span text:style-name="T1639">the</text:span><text:span text:style-name="T1640">
</text:span><text:span text:style-name="T1641">New</text:span><text:span text:style-name="T1642">
</text:span><text:span text:style-name="T1643">Project</text:span><text:span text:style-name="T1644">
</text:span><text:span text:style-name="T1645">section</text:span><text:span text:style-name="T1646">
</text:span><text:span text:style-name="T1647">of</text:span><text:span text:style-name="T1648">
</text:span><text:span text:style-name="T1649">the</text:span><text:span text:style-name="T1650">Create</text:span><text:span text:style-name="T1651">
</text:span><text:span text:style-name="T1652">a</text:span><text:span text:style-name="T1653">
</text:span><text:span text:style-name="T1654">project</text:span><text:span text:style-name="T1655">
</text:span><text:span text:style-name="T1656">and</text:span><text:span text:style-name="T1657">
</text:span><text:span text:style-name="T1658">become</text:span><text:span text:style-name="T1659">
</text:span><text:span text:style-name="T1660">an</text:span><text:span text:style-name="T1661">
</text:span><text:span text:style-name="T1662">administrator</text:span><text:span text:style-name="T1663">
</text:span><text:span text:style-name="T1664">in</text:span><text:span text:style-name="T1665">
</text:span><text:span text:style-name="T1666">the</text:span><text:span text:style-name="T1667">
</text:span><text:span text:style-name="T1668">New</text:span><text:span text:style-name="T1669">
</text:span><text:span text:style-name="T1670">Project</text:span><text:span text:style-name="T1671">
</text:span><text:span text:style-name="T1672">section</text:span><text:span text:style-name="T1673">
</text:span><text:span text:style-name="T1674">of</text:span><text:span text:style-name="T1675">
</text:span><text:span text:style-name="T1676">Create</text:span><text:span text:style-name="T1677">
</text:span><text:span text:style-name="T1678">a</text:span><text:span text:style-name="T1679">
</text:span><text:span text:style-name="T1680">project</text:span><text:span text:style-name="T1681">
</text:span><text:span text:style-name="T1682">and</text:span><text:span text:style-name="T1683">
</text:span><text:span text:style-name="T1684">become</text:span><text:span text:style-name="T1685">
</text:span><text:span text:style-name="T1686">an</text:span><text:span text:style-name="T1687">
</text:span><text:span text:style-name="T1688">administrator</text:span><text:span text:style-name="T1689">
</text:span><text:span text:style-name="T1690">in</text:span><text:span text:style-name="T1691">
</text:span><text:span text:style-name="T1692">the</text:span><text:span text:style-name="T1693">
</text:span><text:span text:style-name="T1694">New</text:span><text:span text:style-name="T1695">
</text:span><text:span text:style-name="T1696">Project</text:span><text:span text:style-name="T1697">
</text:span><text:span text:style-name="T1698">section</text:span><text:span text:style-name="T1699">
</text:span><text:span text:style-name="T1700">of</text:span><text:span text:style-name="T1701">Create</text:span><text:span text:style-name="T1702">
</text:span><text:span text:style-name="T1703">a</text:span><text:span text:style-name="T1704">
</text:span><text:span text:style-name="T1705">project</text:span><text:span text:style-name="T1706">
</text:span><text:span text:style-name="T1707">and</text:span><text:span text:style-name="T1708">
</text:span><text:span text:style-name="T1709">become</text:span><text:span text:style-name="T1710">
</text:span><text:span text:style-name="T1711">an</text:span><text:span text:style-name="T1712">
</text:span><text:span text:style-name="T1713">administrator</text:span><text:span text:style-name="T1714">
</text:span><text:span text:style-name="T1715">in</text:span><text:span text:style-name="T1716">
</text:span><text:span text:style-name="T1717">the</text:span><text:span text:style-name="T1718">
</text:span><text:span text:style-name="T1719">New</text:span><text:span text:style-name="T1720">
</text:span><text:span text:style-name="T1721">Project</text:span><text:span text:style-name="T1722">
</text:span><text:span text:style-name="T1723">section</text:span><text:span text:style-name="T1724">
</text:span><text:span text:style-name="T1725">of</text:span><text:span text:style-name="T1726">
</text:span><text:span text:style-name="T1727">the</text:span><text:span text:style-name="T1728">Create</text:span><text:span text:style-name="T1729">
</text:span><text:span text:style-name="T1730">a</text:span><text:span text:style-name="T1731">
</text:span><text:span text:style-name="T1732">project</text:span><text:span text:style-name="T1733">
</text:span><text:span text:style-name="T1734">and</text:span><text:span text:style-name="T1735">
</text:span><text:span text:style-name="T1736">become</text:span><text:span text:style-name="T1737">
</text:span><text:span text:style-name="T1738">an</text:span><text:span text:style-name="T1739">
</text:span><text:span text:style-name="T1740">administrator</text:span><text:span text:style-name="T1741">
</text:span><text:span text:style-name="T1742">in</text:span><text:span text:style-name="T1743">
</text:span><text:span text:style-name="T1744">the</text:span><text:span text:style-name="T1745">
</text:span><text:span text:style-name="T1746">New</text:span><text:span text:style-name="T1747">
</text:span><text:span text:style-name="T1748">Project</text:span><text:span text:style-name="T1749">
</text:span><text:span text:style-name="T1750">section</text:span><text:span text:style-name="T1751">
</text:span><text:span text:style-name="T1752">of</text:span><text:span text:style-name="T1753">
</text:span><text:span text:style-name="T1754">the</text:span><text:span text:style-name="T1755">
</text:span><text:span text:style-name="T1756"> </text:span><text:span text:style-name="T1757">Create</text:span><text:span text:style-name="T1758">
</text:span><text:span text:style-name="T1759">a</text:span><text:span text:style-name="T1760">
</text:span><text:span text:style-name="T1761">project</text:span><text:span text:style-name="T1762">
</text:span><text:span text:style-name="T1763">and</text:span><text:span text:style-name="T1764">
</text:span><text:span text:style-name="T1765">become</text:span><text:span text:style-name="T1766">
</text:span><text:span text:style-name="T1767">an</text:span><text:span text:style-name="T1768">
</text:span><text:span text:style-name="T1769">administrator</text:span><text:span text:style-name="T1770">
</text:span><text:span text:style-name="T1771">in</text:span><text:span text:style-name="T1772">
</text:span><text:span text:style-name="T1773">the</text:span><text:span text:style-name="T1774">
</text:span><text:span text:style-name="T1775">New</text:span><text:span text:style-name="T1776">
</text:span><text:span text:style-name="T1777">Project</text:span><text:span text:style-name="T1778">
</text:span><text:span text:style-name="T1779">section</text:span><text:span text:style-name="T1780">
</text:span><text:span text:style-name="T1781">of</text:span><text:span text:style-name="T1782">
</text:span><text:span text:style-name="T1783">th</text:span><text:span text:style-name="T1784">Create</text:span><text:span text:style-name="T1785">
</text:span><text:span text:style-name="T1786">a</text:span><text:span text:style-name="T1787">
</text:span><text:span text:style-name="T1788">project</text:span><text:span text:style-name="T1789">
</text:span><text:span text:style-name="T1790">and</text:span><text:span text:style-name="T1791">
</text:span><text:span text:style-name="T1792">become</text:span><text:span text:style-name="T1793">
</text:span><text:span text:style-name="T1794">an</text:span><text:span text:style-name="T1795">
</text:span><text:span text:style-name="T1796">administrator</text:span><text:span text:style-name="T1797">
</text:span><text:span text:style-name="T1798">in</text:span><text:span text:style-name="T1799">
</text:span><text:span text:style-name="T1800">the</text:span><text:span text:style-name="T1801">
</text:span><text:span text:style-name="T1802">New</text:span><text:span text:style-name="T1803">
</text:span><text:span text:style-name="T1804">Project</text:span><text:span text:style-name="T1805">
</text:span><text:span text:style-name="T1806">section</text:span><text:span text:style-name="T1807">
</text:span><text:span text:style-name="T1808">of</text:span><text:span text:style-name="T1809">
</text:span><text:span text:style-name="T1810">the</text:span><text:span text:style-name="T1811">
</text:span><text:span text:style-name="T1812"> </text:span><text:span text:style-name="T1813">Create</text:span><text:span text:style-name="T1814">
</text:span><text:span text:style-name="T1815">a</text:span><text:span text:style-name="T1816">
</text:span><text:span text:style-name="T1817">project</text:span><text:span text:style-name="T1818">
</text:span><text:span text:style-name="T1819">and</text:span><text:span text:style-name="T1820">
</text:span><text:span text:style-name="T1821">become</text:span><text:span text:style-name="T1822">
</text:span><text:span text:style-name="T1823">an</text:span><text:span text:style-name="T1824">
</text:span><text:span text:style-name="T1825">administrator</text:span><text:span text:style-name="T1826">
</text:span><text:span text:style-name="T1827">in</text:span><text:span text:style-name="T1828">
</text:span><text:span text:style-name="T1829">the</text:span><text:span text:style-name="T1830">
</text:span><text:span text:style-name="T1831">New</text:span><text:span text:style-name="T1832">
</text:span><text:span text:style-name="T1833">Project</text:span><text:span text:style-name="T1834">
</text:span><text:span text:style-name="T1835">section</text:span><text:span text:style-name="T1836">
</text:span><text:span text:style-name="T1837">of</text:span><text:span text:style-name="T1838">
</text:span><text:span text:style-name="T1839">th</text:span><text:span text:style-name="T1840">Create</text:span><text:span text:style-name="T1841">
</text:span><text:span text:style-name="T1842">a</text:span><text:span text:style-name="T1843">
</text:span><text:span text:style-name="T1844">project</text:span><text:span text:style-name="T1845">
</text:span><text:span text:style-name="T1846">and</text:span><text:span text:style-name="T1847">
</text:span><text:span text:style-name="T1848">become</text:span><text:span text:style-name="T1849">
</text:span><text:span text:style-name="T1850">an</text:span><text:span text:style-name="T1851">
</text:span><text:span text:style-name="T1852">administrator</text:span><text:span text:style-name="T1853">
</text:span><text:span text:style-name="T1854">in</text:span><text:span text:style-name="T1855">
</text:span><text:span text:style-name="T1856">the</text:span><text:span text:style-name="T1857">
</text:span><text:span text:style-name="T1858">New</text:span><text:span text:style-name="T1859">
</text:span><text:span text:style-name="T1860">Project</text:span><text:span text:style-name="T1861">
</text:span><text:span text:style-name="T1862">section</text:span><text:span text:style-name="T1863">
</text:span><text:span text:style-name="T1864">of</text:span><text:span text:style-name="T1865">
</text:span><text:span text:style-name="T1866">the</text:span><text:span text:style-name="T1867">Create</text:span><text:span text:style-name="T1868">
</text:span><text:span text:style-name="T1869">a</text:span><text:span text:style-name="T1870">
</text:span><text:span text:style-name="T1871">project</text:span><text:span text:style-name="T1872">
</text:span><text:span text:style-name="T1873">and</text:span><text:span text:style-name="T1874">
</text:span><text:span text:style-name="T1875">become</text:span><text:span text:style-name="T1876">
</text:span><text:span text:style-name="T1877">an</text:span><text:span text:style-name="T1878">
</text:span><text:span text:style-name="T1879">administrator</text:span><text:span text:style-name="T1880">
</text:span><text:span text:style-name="T1881">in</text:span><text:span text:style-name="T1882">
</text:span><text:span text:style-name="T1883">the</text:span><text:span text:style-name="T1884">
</text:span><text:span text:style-name="T1885">New</text:span><text:span text:style-name="T1886">
</text:span><text:span text:style-name="T1887">Project</text:span><text:span text:style-name="T1888">
</text:span><text:span text:style-name="T1889">section</text:span><text:span text:style-name="T1890">
</text:span><text:span text:style-name="T1891">of</text:span><text:span text:style-name="T1892">
</text:span><text:span text:style-name="T1893">the</text:span><text:span text:style-name="T1894">
</text:span><text:span text:style-name="T1895"> </text:span><text:span text:style-name="T1896">Create</text:span><text:span text:style-name="T1897">
</text:span><text:span text:style-name="T1898">a</text:span><text:span text:style-name="T1899">
</text:span><text:span text:style-name="T1900">project</text:span><text:span text:style-name="T1901">
</text:span><text:span text:style-name="T1902">and</text:span><text:span text:style-name="T1903">
</text:span><text:span text:style-name="T1904">become</text:span><text:span text:style-name="T1905">
</text:span><text:span text:style-name="T1906">an</text:span><text:span text:style-name="T1907">Create</text:span><text:span text:style-name="T1908">
</text:span><text:span text:style-name="T1909">a</text:span><text:span text:style-name="T1910">
</text:span><text:span text:style-name="T1911">project</text:span><text:span text:style-name="T1912">
</text:span><text:span text:style-name="T1913">and</text:span><text:span text:style-name="T1914">
</text:span><text:span text:style-name="T1915">become</text:span><text:span text:style-name="T1916">
</text:span><text:span text:style-name="T1917">an</text:span><text:span text:style-name="T1918">
</text:span><text:span text:style-name="T1919">administrator*</text:span><text:span text:style-name="T1920">
</text:span><text:span text:style-name="T1921">in</text:span><text:span text:style-name="T1922">
</text:span><text:span text:style-name="T1923">the</text:span><text:span text:style-name="T1924">
</text:span><text:span text:style-name="T1925">New</text:span><text:span text:style-name="T1926">
</text:span><text:span text:style-name="T1927">Project</text:span><text:span text:style-name="T1928">
</text:span><text:span text:style-name="T1929">section</text:span><text:span text:style-name="T1930">
</text:span><text:span text:style-name="T1931">of</text:span><text:span text:style-name="T1932">
</text:span><text:span text:style-name="T1933">the</text:span><text:span text:style-name="T1934">
</text:span><text:span text:style-name="T1935">Create</text:span><text:span text:style-name="T1936">
</text:span><text:span text:style-name="T1937">a</text:span><text:span text:style-name="T1938">
</text:span><text:span text:style-name="T1939">project</text:span><text:span text:style-name="T1940">
</text:span><text:span text:style-name="T1941">and</text:span><text:span text:style-name="T1942">
</text:span><text:span text:style-name="T1943">become</text:span><text:span text:style-name="T1944">
</text:span><text:span text:style-name="T1945">an</text:span><text:span text:style-name="T1946">
</text:span><text:span text:style-name="T1947">administrator</text:span><text:span text:style-name="T1948">
</text:span><text:span text:style-name="T1949">in</text:span><text:span text:style-name="T1950">
</text:span><text:span text:style-name="T1951">the</text:span><text:span text:style-name="T1952">
</text:span><text:span text:style-name="T1953">New</text:span><text:span text:style-name="T1954">
</text:span><text:span text:style-name="T1955">Project</text:span><text:span text:style-name="T1956">
</text:span><text:span text:style-name="T1957">section</text:span><text:span text:style-name="T1958">
</text:span><text:span text:style-name="T1959">of</text:span><text:span text:style-name="T1960">
</text:span><text:span text:style-name="T1961">the</text:span><text:span text:style-name="T1962">
</text:span><text:span text:style-name="T1963">Create</text:span><text:span text:style-name="T1964">
</text:span><text:span text:style-name="T1965">a</text:span><text:span text:style-name="T1966">
</text:span><text:span text:style-name="T1967">project</text:span><text:span text:style-name="T1968">
</text:span><text:span text:style-name="T1969">and</text:span><text:span text:style-name="T1970">
</text:span><text:span text:style-name="T1971">become</text:span><text:span text:style-name="T1972">
</text:span><text:span text:style-name="T1973">an</text:span><text:span text:style-name="T1974">
</text:span><text:span text:style-name="T1975">administrator</text:span><text:span text:style-name="T1976">
</text:span><text:span text:style-name="T1977">in</text:span><text:span text:style-name="T1978">
</text:span><text:span text:style-name="T1979">the</text:span><text:span text:style-name="T1980">
</text:span><text:span text:style-name="T1981">New</text:span><text:span text:style-name="T1982">
</text:span><text:span text:style-name="T1983">Project</text:span><text:span text:style-name="T1984">
</text:span><text:span text:style-name="T1985">section</text:span><text:span text:style-name="T1986">
</text:span><text:span text:style-name="T1987">Create</text:span><text:span text:style-name="T1988">
</text:span><text:span text:style-name="T1989">a</text:span><text:span text:style-name="T1990">
</text:span><text:span text:style-name="T1991">project</text:span><text:span text:style-name="T1992">
</text:span><text:span text:style-name="T1993">and</text:span><text:span text:style-name="T1994">
</text:span><text:span text:style-name="T1995">become</text:span><text:span text:style-name="T1996">
</text:span><text:span text:style-name="T1997">an</text:span><text:span text:style-name="T1998">
</text:span><text:span text:style-name="T1999">administrator</text:span><text:span text:style-name="T2000">
</text:span><text:span text:style-name="T2001">in</text:span><text:span text:style-name="T2002">
</text:span><text:span text:style-name="T2003">the</text:span><text:span text:style-name="T2004">
</text:span><text:span text:style-name="T2005">New</text:span><text:span text:style-name="T2006">
</text:span><text:span text:style-name="T2007">Project</text:span><text:span text:style-name="T2008">
</text:span><text:span text:style-name="T2009">section</text:span><text:span text:style-name="T2010">
</text:span><text:span text:style-name="T2011">of</text:span><text:span text:style-name="T2012">
</text:span><text:span text:style-name="T2013">the</text:span><text:span text:style-name="T2014">
</text:span>Create a project and become an administrator in the New
Project section oCreate a project and become an administrator* in the
New Project section of the
 <text:span text:style-name="T2015">Create</text:span><text:span text:style-name="T2016">
</text:span><text:span text:style-name="T2017">a</text:span><text:span text:style-name="T2018">
</text:span><text:span text:style-name="T2019">project</text:span><text:span text:style-name="T2020">
</text:span><text:span text:style-name="T2021">and</text:span><text:span text:style-name="T2022">
</text:span><text:span text:style-name="T2023">become</text:span><text:span text:style-name="T2024">
</text:span><text:span text:style-name="T2025">an</text:span><text:span text:style-name="T2026">
</text:span><text:span text:style-name="T2027">administrator</text:span>
in the New Project section of
t<text:span text:style-name="T2028">Create</text:span><text:span text:style-name="T2029">
</text:span><text:span text:style-name="T2030">a</text:span><text:span text:style-name="T2031">
</text:span><text:span text:style-name="T2032">project</text:span><text:span text:style-name="T2033">
</text:span><text:span text:style-name="T2034">and</text:span><text:span text:style-name="T2035">
</text:span><text:span text:style-name="T2036">become</text:span><text:span text:style-name="T2037">
</text:span><text:span text:style-name="T2038">an</text:span><text:span text:style-name="T2039">
</text:span><text:span text:style-name="T2040">administrator</text:span>
in the
N<text:span text:style-name="T2041">Create</text:span><text:span text:style-name="T2042">
</text:span><text:span text:style-name="T2043">a</text:span><text:span text:style-name="T2044">
</text:span><text:span text:style-name="T2045">project</text:span><text:span text:style-name="T2046">
</text:span><text:span text:style-name="T2047">and</text:span><text:span text:style-name="T2048">
</text:span><text:span text:style-name="T2049">become</text:span><text:span text:style-name="T2050">
</text:span><text:span text:style-name="T2051">an</text:span><text:span text:style-name="T2052">
</text:span><text:span text:style-name="T2053">administrator</text:span>
in the New Project section
of<text:span text:style-name="T2054">Create</text:span><text:span text:style-name="T2055">
</text:span><text:span text:style-name="T2056">a</text:span><text:span text:style-name="T2057">
</text:span><text:span text:style-name="T2058">project</text:span><text:span text:style-name="T2059">
</text:span><text:span text:style-name="T2060">and</text:span><text:span text:style-name="T2061">
</text:span><text:span text:style-name="T2062">become</text:span><text:span text:style-name="T2063">
</text:span><text:span text:style-name="T2064">an</text:span><text:span text:style-name="T2065">
</text:span><text:span text:style-name="T2066">ad</text:span>Create a
project and become an administrator* in the New Project section of the
<text:span text:style-name="T2067">Create</text:span><text:span text:style-name="T2068">
</text:span><text:span text:style-name="T2069">a</text:span><text:span text:style-name="T2070">
</text:span><text:span text:style-name="T2071">project</text:span><text:span text:style-name="T2072">
</text:span><text:span text:style-name="T2073">and</text:span><text:span text:style-name="T2074">Create</text:span><text:span text:style-name="T2075">
</text:span><text:span text:style-name="T2076">a</text:span><text:span text:style-name="T2077">
</text:span><text:span text:style-name="T2078">project</text:span><text:span text:style-name="T2079">
</text:span><text:span text:style-name="T2080">and</text:span><text:span text:style-name="T2081">
</text:span><text:span text:style-name="T2082">become</text:span><text:span text:style-name="T2083">
</text:span><text:span text:style-name="T2084">an</text:span><text:span text:style-name="T2085">
</text:span><text:span text:style-name="T2086">administrator*</text:span><text:span text:style-name="T2087">
</text:span><text:span text:style-name="T2088">in</text:span><text:span text:style-name="T2089">
</text:span><text:span text:style-name="T2090">the</text:span><text:span text:style-name="T2091">
</text:span><text:span text:style-name="T2092">New</text:span><text:span text:style-name="T2093">
</text:span><text:span text:style-name="T2094">Project</text:span><text:span text:style-name="T2095">
</text:span><text:span text:style-name="T2096">section</text:span><text:span text:style-name="T2097">
</text:span><text:span text:style-name="T2098">Create</text:span><text:span text:style-name="T2099">
</text:span><text:span text:style-name="T2100">a</text:span><text:span text:style-name="T2101">
</text:span><text:span text:style-name="T2102">project</text:span><text:span text:style-name="T2103">
</text:span><text:span text:style-name="T2104">an</text:span>Create a
project and become an administrator*
in<text:span text:style-name="T2105">Create</text:span><text:span text:style-name="T2106">
</text:span><text:span text:style-name="T2107">a</text:span><text:span text:style-name="T2108">
</text:span><text:span text:style-name="T2109">project</text:span><text:span text:style-name="T2110">
</text:span><text:span text:style-name="T2111">and</text:span><text:span text:style-name="T2112">
</text:span><text:span text:style-name="T2113">become</text:span><text:span text:style-name="T2114">
</text:span><text:span text:style-name="T2115">an</text:span><text:span text:style-name="T2116">
</text:span><text:span text:style-name="T2117">administ</text:span>Create
a project and becom*Create a pr**Create a project and become an
administrator* in the New
Pro<text:span text:style-name="T2118">Create</text:span><text:span text:style-name="T2119">
</text:span><text:span text:style-name="T2120">a</text:span><text:span text:style-name="T2121">
</text:span><text:span text:style-name="T2122">project</text:span><text:span text:style-name="T2123">
</text:span><text:span text:style-name="T2124">and</text:span><text:span text:style-name="T2125">
</text:span><text:span text:style-name="T2126">become</text:span><text:span text:style-name="T2127">
</text:span><text:span text:style-name="T2128">an</text:span><text:span text:style-name="T2129">Create</text:span><text:span text:style-name="T2130">
</text:span><text:span text:style-name="T2131">a</text:span><text:span text:style-name="T2132">
</text:span><text:span text:style-name="T2133">project</text:span><text:span text:style-name="T2134">
</text:span><text:span text:style-name="T2135">and</text:span><text:span text:style-name="T2136">
</text:span><text:span text:style-name="T2137">become</text:span><text:span text:style-name="T2138">
</text:span><text:span text:style-name="T2139">an</text:span><text:span text:style-name="T2140">
</text:span><text:span text:style-name="T2141">administrator*</text:span><text:span text:style-name="T2142">
</text:span><text:span text:style-name="T2143">in</text:span><text:span text:style-name="T2144">
</text:span><text:span text:style-name="T2145">the</text:span><text:span text:style-name="T2146">
</text:span><text:span text:style-name="T2147">New</text:span><text:span text:style-name="T2148">
</text:span><text:span text:style-name="T2149">Project</text:span><text:span text:style-name="T2150">
</text:span><text:span text:style-name="T2151">section</text:span><text:span text:style-name="T2152">
</text:span><text:span text:style-name="T2153">of</text:span><text:span text:style-name="T2154">
</text:span><text:span text:style-name="T2155">the</text:span><text:span text:style-name="T2156">
</text:span><text:span text:style-name="T2157"> To</text:span><text:span text:style-name="T2158">
</text:span><text:span text:style-name="T2159">do</text:span><text:span text:style-name="T2160">
</text:span><text:span text:style-name="T2161">so,</text:span><text:span text:style-name="T2162">
</text:span><text:span text:style-name="T2163">clic</text:span><text:span text:style-name="T2164">Create</text:span><text:span text:style-name="T2165">
</text:span><text:span text:style-name="T2166">a</text:span><text:span text:style-name="T2167">
</text:span><text:span text:style-name="T2168">project</text:span><text:span text:style-name="T2169">
</text:span><text:span text:style-name="T2170">and</text:span><text:span text:style-name="T2171">
</text:span><text:span text:style-name="T2172">become</text:span><text:span text:style-name="T2173">
</text:span><text:span text:style-name="T2174">an</text:span><text:span text:style-name="T2175">
</text:span><text:span text:style-name="T2176">administrator</text:span><text:span text:style-name="T2177">
</text:span><text:span text:style-name="T2178">in</text:span><text:span text:style-name="T2179">
</text:span><text:span text:style-name="T2180">the</text:span><text:span text:style-name="T2181">
</text:span><text:span text:style-name="T2182">New</text:span><text:span text:style-name="T2183">
</text:span><text:span text:style-name="T2184">Project</text:span><text:span text:style-name="T2185">
</text:span><text:span text:style-name="T2186">section</text:span><text:span text:style-name="T2187">
</text:span><text:span text:style-name="T2188">o</text:span><text:span text:style-name="T2189">Create</text:span><text:span text:style-name="T2190">
</text:span><text:span text:style-name="T2191">a</text:span><text:span text:style-name="T2192">
</text:span><text:span text:style-name="T2193">project</text:span><text:span text:style-name="T2194">
</text:span><text:span text:style-name="T2195">and</text:span><text:span text:style-name="T2196">
</text:span><text:span text:style-name="T2197">become</text:span><text:span text:style-name="T2198">
</text:span><text:span text:style-name="T2199">an</text:span><text:span text:style-name="T2200">
</text:span><text:span text:style-name="T2201">administrator</text:span><text:span text:style-name="T2202">
</text:span><text:span text:style-name="T2203">in</text:span><text:span text:style-name="T2204">
</text:span><text:span text:style-name="T2205">the</text:span><text:span text:style-name="T2206">
</text:span><text:span text:style-name="T2207">New</text:span><text:span text:style-name="T2208">
</text:span><text:span text:style-name="T2209">Project</text:span><text:span text:style-name="T2210">
</text:span><text:span text:style-name="T2211">section</text:span><text:span text:style-name="T2212">
</text:span><text:span text:style-name="T2213">of</text:span><text:span text:style-name="T2214">
</text:span><text:span text:style-name="T2215">t</text:span><text:span text:style-name="T2216">Create</text:span><text:span text:style-name="T2217">
</text:span><text:span text:style-name="T2218">a</text:span><text:span text:style-name="T2219">
</text:span><text:span text:style-name="T2220">project</text:span><text:span text:style-name="T2221">
</text:span><text:span text:style-name="T2222">and</text:span><text:span text:style-name="T2223">
</text:span><text:span text:style-name="T2224">become</text:span><text:span text:style-name="T2225">
</text:span><text:span text:style-name="T2226">an</text:span><text:span text:style-name="T2227">
</text:span><text:span text:style-name="T2228">administrator</text:span><text:span text:style-name="T2229">
</text:span><text:span text:style-name="T2230">in</text:span><text:span text:style-name="T2231">
</text:span><text:span text:style-name="T2232">the</text:span><text:span text:style-name="T2233">
</text:span><text:span text:style-name="T2234">New</text:span><text:span text:style-name="T2235">
</text:span><text:span text:style-name="T2236">Project</text:span><text:span text:style-name="T2237">
</text:span><text:span text:style-name="T2238">section</text:span><text:span text:style-name="T2239">
</text:span><text:span text:style-name="T2240">o</text:span><text:span text:style-name="T2241">Create</text:span><text:span text:style-name="T2242">
</text:span><text:span text:style-name="T2243">a</text:span><text:span text:style-name="T2244">
</text:span><text:span text:style-name="T2245">project</text:span><text:span text:style-name="T2246">
</text:span><text:span text:style-name="T2247">and</text:span><text:span text:style-name="T2248">
</text:span><text:span text:style-name="T2249">become</text:span><text:span text:style-name="T2250">
</text:span><text:span text:style-name="T2251">Create</text:span><text:span text:style-name="T2252">
</text:span><text:span text:style-name="T2253">a</text:span><text:span text:style-name="T2254">
</text:span><text:span text:style-name="T2255">project</text:span><text:span text:style-name="T2256">
</text:span><text:span text:style-name="T2257">and</text:span><text:span text:style-name="T2258">
</text:span><text:span text:style-name="T2259">become</text:span><text:span text:style-name="T2260">
</text:span><text:span text:style-name="T2261">an</text:span><text:span text:style-name="T2262">
</text:span><text:span text:style-name="T2263">administrator*</text:span><text:span text:style-name="T2264">
</text:span><text:span text:style-name="T2265">in</text:span><text:span text:style-name="T2266">
</text:span><text:span text:style-name="T2267">the</text:span><text:span text:style-name="T2268">
</text:span><text:span text:style-name="T2269">New</text:span><text:span text:style-name="T2270">
</text:span><text:span text:style-name="T2271">Project</text:span><text:span text:style-name="T2272">
</text:span><text:span text:style-name="T2273">section</text:span><text:span text:style-name="T2274">
</text:span><text:span text:style-name="T2275">of</text:span><text:span text:style-name="T2276">
</text:span><text:span text:style-name="T2277">the</text:span><text:span text:style-name="T2278">
</text:span><text:span text:style-name="T2279"> To</text:span><text:span text:style-name="T2280">
</text:span><text:span text:style-name="T2281">do</text:span><text:span text:style-name="T2282">
</text:span><text:span text:style-name="T2283">so,</text:span><text:span text:style-name="T2284">
</text:span><text:span text:style-name="T2285">click</text:span><text:span text:style-name="T2286">
</text:span><text:span text:style-name="T2287">the</text:span><text:span text:style-name="T2288">
</text:span><text:span text:style-name="T2289">checkbox</text:span><text:span text:style-name="T2290">
</text:span><text:span text:style-name="T2291">next</text:span><text:span text:style-name="T2292">
</text:span><text:span text:style-name="T2293">to</text:span><text:span text:style-name="T2294">
</text:span><text:span text:style-name="T2295"> Alternativel</text:span><text:span text:style-name="T2296">Create</text:span><text:span text:style-name="T2297">
</text:span><text:span text:style-name="T2298">a</text:span><text:span text:style-name="T2299">
</text:span><text:span text:style-name="T2300">project</text:span><text:span text:style-name="T2301">
</text:span><text:span text:style-name="T2302">and</text:span><text:span text:style-name="T2303">
</text:span><text:span text:style-name="T2304">become</text:span><text:span text:style-name="T2305">
</text:span><text:span text:style-name="T2306">an</text:span><text:span text:style-name="T2307">
</text:span><text:span text:style-name="T2308">administrator</text:span>
in the New Project section of
th<text:span text:style-name="T2309">Create</text:span><text:span text:style-name="T2310">
</text:span><text:span text:style-name="T2311">a</text:span><text:span text:style-name="T2312">
</text:span><text:span text:style-name="T2313">project</text:span><text:span text:style-name="T2314">
</text:span><text:span text:style-name="T2315">and</text:span><text:span text:style-name="T2316">
</text:span><text:span text:style-name="T2317">become</text:span><text:span text:style-name="T2318">
</text:span><text:span text:style-name="T2319">an</text:span><text:span text:style-name="T2320">
</text:span><text:span text:style-name="T2321">administrator</text:span>
in the New Project section of the
<text:span text:style-name="T2322">Create</text:span><text:span text:style-name="T2323">
</text:span><text:span text:style-name="T2324">a</text:span><text:span text:style-name="T2325">
</text:span><text:span text:style-name="T2326">project</text:span><text:span text:style-name="T2327">
</text:span><text:span text:style-name="T2328">and</text:span><text:span text:style-name="T2329">
</text:span><text:span text:style-name="T2330">become</text:span><text:span text:style-name="T2331">
</text:span><text:span text:style-name="T2332">an</text:span><text:span text:style-name="T2333">
</text:span><text:span text:style-name="T2334">administrator</text:span>
in the New Project
s<text:span text:style-name="T2335">Create</text:span><text:span text:style-name="T2336">
</text:span><text:span text:style-name="T2337">a</text:span><text:span text:style-name="T2338">
</text:span><text:span text:style-name="T2339">project</text:span><text:span text:style-name="T2340">
</text:span><text:span text:style-name="T2341">and</text:span><text:span text:style-name="T2342">
</text:span><text:span text:style-name="T2343">become</text:span><text:span text:style-name="T2344">
</text:span><text:span text:style-name="T2345">an</text:span><text:span text:style-name="T2346">
</text:span><text:span text:style-name="T2347">administrator</text:span>
in the New Project section of the
<text:span text:style-name="T2348">Create</text:span><text:span text:style-name="T2349">
</text:span><text:span text:style-name="T2350">a</text:span><text:span text:style-name="T2351">
</text:span><text:span text:style-name="T2352">project</text:span><text:span text:style-name="T2353">
</text:span><text:span text:style-name="T2354">and</text:span><text:span text:style-name="T2355">
</text:span><text:span text:style-name="T2356">become</text:span><text:span text:style-name="T2357">
</text:span><text:span text:style-name="T2358">an</text:span><text:span text:style-name="T2359">
</text:span><text:span text:style-name="T2360">administrator</text:span>
in the New Project section of the
<text:span text:style-name="T2361">Create</text:span><text:span text:style-name="T2362">
</text:span><text:span text:style-name="T2363">a</text:span><text:span text:style-name="T2364">
</text:span><text:span text:style-name="T2365">project</text:span><text:span text:style-name="T2366">
</text:span><text:span text:style-name="T2367">and</text:span><text:span text:style-name="T2368">
</text:span><text:span text:style-name="T2369">become</text:span><text:span text:style-name="T2370">
</text:span><text:span text:style-name="T2371">an</text:span><text:span text:style-name="T2372">
</text:span><text:span text:style-name="T2373">administrator</text:span>
in the New Project section
of<text:span text:style-name="T2374">Create</text:span><text:span text:style-name="T2375">
</text:span><text:span text:style-name="T2376">a</text:span><text:span text:style-name="T2377">
</text:span><text:span text:style-name="T2378">project</text:span><text:span text:style-name="T2379">
</text:span><text:span text:style-name="T2380">and</text:span><text:span text:style-name="T2381">
</text:span><text:span text:style-name="T2382">become</text:span><text:span text:style-name="T2383">
</text:span><text:span text:style-name="T2384">an</text:span><text:span text:style-name="T2385">
</text:span><text:span text:style-name="T2386">administrator</text:span>
in the New Project section of
t<text:span text:style-name="T2387">Create</text:span><text:span text:style-name="T2388">
</text:span><text:span text:style-name="T2389">a</text:span><text:span text:style-name="T2390">
</text:span><text:span text:style-name="T2391">project</text:span><text:span text:style-name="T2392">
</text:span><text:span text:style-name="T2393">and</text:span><text:span text:style-name="T2394">
</text:span><text:span text:style-name="T2395">become</text:span><text:span text:style-name="T2396">
</text:span><text:span text:style-name="T2397">an</text:span><text:span text:style-name="T2398">
</text:span><text:span text:style-name="T2399">administrator</text:span>
in the New Project section of
t<text:span text:style-name="T2400">Create</text:span><text:span text:style-name="T2401">
</text:span><text:span text:style-name="T2402">a</text:span><text:span text:style-name="T2403">
</text:span><text:span text:style-name="T2404">project</text:span><text:span text:style-name="T2405">
</text:span><text:span text:style-name="T2406">and</text:span><text:span text:style-name="T2407">
</text:span><text:span text:style-name="T2408">become</text:span><text:span text:style-name="T2409">
</text:span><text:span text:style-name="T2410">an</text:span><text:span text:style-name="T2411">
</text:span><text:span text:style-name="T2412">administrator</text:span>
in the New Project section of
the<text:span text:style-name="T2413">Create</text:span><text:span text:style-name="T2414">
</text:span><text:span text:style-name="T2415">a</text:span><text:span text:style-name="T2416">
</text:span><text:span text:style-name="T2417">project</text:span><text:span text:style-name="T2418">
</text:span><text:span text:style-name="T2419">and</text:span><text:span text:style-name="T2420">
</text:span><text:span text:style-name="T2421">become</text:span><text:span text:style-name="T2422">
</text:span><text:span text:style-name="T2423">an</text:span><text:span text:style-name="T2424">
</text:span><text:span text:style-name="T2425">administrator</text:span>
in the New Project section of
th<text:span text:style-name="T2426">Create</text:span><text:span text:style-name="T2427">
</text:span><text:span text:style-name="T2428">a</text:span><text:span text:style-name="T2429">
</text:span><text:span text:style-name="T2430">project</text:span><text:span text:style-name="T2431">
</text:span><text:span text:style-name="T2432">and</text:span><text:span text:style-name="T2433">
</text:span><text:span text:style-name="T2434">become</text:span><text:span text:style-name="T2435">
</text:span><text:span text:style-name="T2436">an</text:span><text:span text:style-name="T2437">
</text:span><text:span text:style-name="T2438">administrator</text:span>
in the New Project section of
th<text:span text:style-name="T2439">Create</text:span><text:span text:style-name="T2440">
</text:span><text:span text:style-name="T2441">a</text:span><text:span text:style-name="T2442">
</text:span><text:span text:style-name="T2443">project</text:span><text:span text:style-name="T2444">
</text:span><text:span text:style-name="T2445">and</text:span><text:span text:style-name="T2446">
</text:span><text:span text:style-name="T2447">become</text:span><text:span text:style-name="T2448">
</text:span><text:span text:style-name="T2449">an</text:span><text:span text:style-name="T2450">
</text:span><text:span text:style-name="T2451">administrator</text:span>
in the New ProjecCreate a project and become an administrator in the New
Project section of the
 <text:span text:style-name="T2452">Create</text:span><text:span text:style-name="T2453">
</text:span><text:span text:style-name="T2454">a</text:span><text:span text:style-name="T2455">
</text:span><text:span text:style-name="T2456">project</text:span><text:span text:style-name="T2457">
</text:span><text:span text:style-name="T2458">and</text:span><text:span text:style-name="T2459">
</text:span><text:span text:style-name="T2460">become</text:span><text:span text:style-name="T2461">
</text:span><text:span text:style-name="T2462">an</text:span><text:span text:style-name="T2463">
</text:span><text:span text:style-name="T2464">admini</text:span>Create
a project and become an administrator* in the New Project section of the
  ad  �  �     =       �  b  Y  X    �  �  �  _  H  �  �  �  i  B  A  8  �  �  �  �  �  4  �  �  �  �  �  �  �  �    ~  ,  �
  �   C   �   �   �   �   2   1
  �  �  D  �  �  �  W  V    �  j    �  ~  -  
    �  �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Next,
you'll learn about Liferay clustering.  giving them specific roles in
LCS.  that you can do all this collaboratively by inviting others to
your project and  threads give you an inside look at how your server is
running. What's more is  JVM performance, Liferay page and portlet load
times, and number of current  stop shop for monitoring the performance
of your Liferay servers. Metrics like  server restart--a process that
even works across a cluster. You also get a one  your Liferay servers.
You can apply fix packs with just a single click and a  As you've now
seen, LCS is a powerful tool that simplifies the management of
  <draw:frame draw:name="img60"><draw:image xlink:href="../../images/lcs-invite-users.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame>  accept
your invitation. to invite, the
<text:span text:style-name="T2465">Role</text:span> selection box lets
you preassign LCS roles for when they You can also search for users of
Liferay.com to invite. Once you've chosen
who <text:span text:style-name="T2466">Invite</text:span><text:span text:style-name="T2467">
</text:span><text:span text:style-name="T2468">External</text:span><text:span text:style-name="T2469">
</text:span><text:span text:style-name="T2470">Users</text:span> pop up
lets you invite anyone with a valid email address. To invite external
users to your project, click on the
<text:span text:style-name="T2471">Invite</text:span> button.
The  <draw:frame draw:name="img61"><draw:image xlink:href="../../images/lcs-users.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame>  user. Manage
button. Clicking <text:span text:style-name="T2472">Manage</text:span>
lets you assign or revoke LCS roles for that  presented with a table of
the users on your project. To the right of each is the  just below the
Dashboard icon on the upper-left of your screen. You're  aren't yet part
of your project. To manage users, first click the
<text:span text:style-name="T2473">Users</text:span> icon  project. It's
here that you can grant or revoke LCS roles or invite others that  The
Users section of LCS is where you manage the LCS users that are part of
your   ### Managing LCS Users in Your Project  --&gt;  -Rich  Just
'splaining. :-)  &quot;formidable&quot; to &quot;powerful.&quot;
 definitions (which the synonyms list makes clear). For that reason, I
changed the negative connotations of definitions one and two, as they're
the more common I'm sure you meant definition three, but I'm guessing
many readers will assume  1. pleasant. Antonyms 1. dreadful, appalling,
threatening, menacing, fearful, frightful,
horrible. Synonyms  formidable opposition to the proposal. 4. of great
strength; forceful; powerful: 3. arousing feelings of awe or admiration
because of grandeur, strength, etc. a formidable problem. 2. of
discouraging or awesome strength, size, difficulty, etc.;
intimidating: a formidable opponent. 1. causing fear, apprehension, or
dread:  the dictionary definition has four definitions:  possibly close
to what you wanted, but having a negative connotation, and
indeed  that's a bad practice, so they'll want to know exactly what
permissions are permissions are needed exactly. Most people won't run
their servers as root, as permissions at the operating system level, but
beyond that, I'm not sure what administrative access, as mentioned here?
I assume you're talking about </text:p>
<text:p text:style-name="P741">&lt;bean id=&quot;com.liferay.portal.search.solr.server.BasicAuthSolrServer&quot; class=&quot;com.liferay.portal.search.solr.server.BasicAuthSolrServer&quot;&gt;</text:p>
<text:p text:style-name="P742"><text:s text:c="4" />&lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;http://localhost:8080/solr&quot; /&gt;</text:p>
<text:p text:style-name="P743">&lt;/bean&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Modify this value so it
points to the server where Solr is running. Then save the file and put
it back into the plugin archive in the same place it was
before.</text:p>
<text:p text:style-name="Text_20_body">Next, extract the file
<text:span text:style-name="T2474">schema.xml</text:span> from the
plugin. It should be in the
<text:span text:style-name="T2475">docroot/WEB-INF/conf</text:span>
folder. This file tells Solr how to index the data coming from Liferay,
and can be customized for your installation. Copy this file to
<text:span text:style-name="T2476">$SOLR_HOME/conf</text:span> on your
Solr box (you may have to create the
<text:span text:style-name="T2477">conf</text:span> directory).</text:p>
<text:p text:style-name="Text_20_body">Before you start Solr, you should
provide Solr with a list of
<text:span text:style-name="T2478">synonyms</text:span> and
<text:span text:style-name="T2479">stop</text:span><text:span text:style-name="T2480">
</text:span><text:span text:style-name="T2481">words</text:span>.
Synonyms are words that should be equivalent in search. For example, if
a user searches for
<text:span text:style-name="T2482">important</text:span><text:span text:style-name="T2483">
</text:span><text:span text:style-name="T2484">information</text:span>,
you may want to show results for
<text:span text:style-name="T2485">required</text:span>
<text:span text:style-name="T2486">information</text:span> or
<text:span text:style-name="T2487">critical</text:span><text:span text:style-name="T2488">
</text:span><text:span text:style-name="T2489">information</text:span>.
You can define these in
<text:span text:style-name="T2490">synonyms.txt</text:span>. Stop words
are defined in
<text:span text:style-name="T2491">stopwords.txt</text:span> and are
words that should not be indexed: articles, pronouns, and other words
that have little value in a search. Place these files in your
<text:span text:style-name="T2492">$SOLR_HOME/conf</text:span> folder.
Examples for both of these files are found in the Solr archive in the
<text:span text:style-name="T2493">solr-4.1.0/example/solr/collection1/conf</text:span>
folder. Additional Solr configuration options, most importantly
<text:span text:style-name="T2494">solrconfig.xml</text:span> and
<text:span text:style-name="T2495">elevate.xml</text:span>, are in the
<text:span text:style-name="T2496">$SOLR_HOME/conf</text:span> folder.
Now you can start Solr. After Solr has started, hot deploy the
<text:span text:style-name="T2497">solr-web</text:span> plugin to all
your nodes. See the next section for instructions on hot deploying to a
cluster.</text:p>
<text:p text:style-name="Text_20_body">Once the plugin is hot deployed,
your Liferay server's search is automatically upgraded to use Solr. It's
likely, however, that initial searches will come up with nothing: this
is because you need to reindex everything using Solr.</text:p>
<text:p text:style-name="Text_20_body">Navigate to the Control Panel.
Under the Configuration heading, click on
<text:span text:style-name="T2498">Server</text:span><text:span text:style-name="T2499">
</text:span><text:span text:style-name="T2500">Administration</text:span>.
On the Resources tab, click the
<text:span text:style-name="T2501">Execute</text:span> button next to
<text:span text:style-name="T2502">Reindex</text:span><text:span text:style-name="T2503">
</text:span><text:span text:style-name="T2504">all</text:span><text:span text:style-name="T2505">
</text:span><text:span text:style-name="T2506">search</text:span><text:span text:style-name="T2507">
</text:span><text:span text:style-name="T2508">indexes</text:span>. When
you click this button, Liferay begins sending indexing requests to Solr
for execution. Once Solr has indexed all your data, you'll have a search
server running independently of all your Liferay nodes.</text:p>
<text:p text:style-name="Text_20_body">Installing the plugin to your
nodes has the effect of overriding any calls to Lucene for searching.
All Liferay's search boxes will now use Solr as the search index. This
is ideal for a clustered environment, as it allows all your nodes to
share one search server and one search index, and this search server
operates independently of all your nodes. If, however, you don't have
the server hardware upon which to install a separate search server, you
can sync the search indexes between all your nodes, as is described
next.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Clustering
Lucene Indexes on All Nodes
<text:a xlink:type="simple" xlink:href="id=clustering-lucene-indexes-on-all-nodes" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Lucene, the search indexer
which Liferay uses, can be configured to sync indexes across each
cluster node. This is the easiest configuration to implement, though of
course, it's not as &quot;clean&quot; a configuration as using pluggable
enterprise search. Sometimes, however, you just don't have another
server to use for search indexing, so you need a way to keep all your
nodes in sync. By default, Liferay provides a method called Cluster Link
which can send indexing requests to all nodes in the cluster to keep
them in sync. This configuration doesn't require any additional
hardware, and it performs very well. It may increase network traffic
when an individual server reboots, since a full reindex will be needed.
But this should rarely happen, making it a good tradeoff if you don't
have the extra hardware to implement a Solr search server.</text:p>
<text:p text:style-name="Text_20_body">You can enable Cluster Link by
setting the following property in your
<text:span text:style-name="T2509">portal-ext.properties</text:span>
file:</text:p>
<text:p text:style-name="P744">cluster.link.enabled=true</text:p>
<text:p text:style-name="First_20_paragraph">To cluster your search
indexes, you also need to set the following property:</text:p>
<text:p text:style-name="P745">lucene.replicate.write=true</text:p>
<text:p text:style-name="First_20_paragraph">If you have
<text:span text:style-name="T2510">cluster.link.enabled=true</text:span>
but
<text:span text:style-name="T2511">lucene.replicate.write=false</text:span>,
you'll enable cache replication but not index replication.</text:p>
<text:p text:style-name="Text_20_body">Of course,
<text:span text:style-name="T2512">cluster.link.enabled=true</text:span>
and
<text:span text:style-name="T2513">lucene.replicate.write=true</text:span>
need to be set on all your nodes. That's all you need to do to sync your
indexes. Pretty easy, right? Of course, if you have existing indexes,
you'll want to reindex as described in the previous section once you
have Cluster Link enabled on all your nodes.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Distributed
Caching
<text:a xlink:type="simple" xlink:href="id=distributed-caching" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Enabling Cluster Link
automatically activates distributed caching. Distributed caching enables
some RMI (Remote Method Invocation) cache listeners that are designed to
replicate the cache across a cluster.</text:p>
<text:p text:style-name="Text_20_body">Liferay uses
<text:a xlink:type="simple" xlink:href="www.ehcache.org" office:name=""><text:span text:style-name="Definition">Ehcache</text:span></text:a>,
which has robust distributed caching support. This means that the cache
can be distributed across multiple Liferay nodes running concurrently.
Enabling this cache can increase performance dramatically. For example,
suppose that two users are browsing the message boards. The first user
clicks a thread to read it. Liferay must look up that thread from the
database and format it for display in the browser. With a distributed
Ehcache running, this thread is stored in a cache for quick retrieval,
and that cache is then replicated to the other nodes in the cluster.
Suppose then that the second user who is being served by another node in
the cluster wants to read the same forum thread and clicks on it. This
time, the data is retrieved more quickly. Because the thread is in the
cache, no trip to the database is necessary.</text:p>
<text:p text:style-name="Text_20_body">This is much more powerful than
having a cache running separately on each node. The power of
<text:span text:style-name="T2514">distributed</text:span> caching
allows for common portal destinations to be cached for multiple users.
The first user can post a message to the thread he or she was reading,
and the cache is updated across all the nodes, making the new post
available immediately from the local cache. Without that, the second
user would need to wait until the cache was invalidated on the node he
or she connected to before he or she could see the updated forum
post.</text:p>
<text:p text:style-name="Text_20_body">Once you enable distributed
caching, of course, you should do some due diligence and test your
system under a load that best simulates the kind of traffic your system
needs to handle. If you'll be serving up a lot of message board
messages, your script should reflect that. If web content is the core of
your site, your script should reflect that too.</text:p>
<text:p text:style-name="Text_20_body">As a result of a load test, you
may find that the default distributed cache settings aren't optimized
for your site. In this case, you'll need to tweak the settings yourself.
You can modify the Liferay installation directly or you can use a plugin
to do it. Either way, the settings you change are the same. Next, we'll
discuss a special EE-only optimization that can be made to the cache.
After that, we'll explain how to configure Liferay's caching
settings.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Enhanced
Distributed Cache Algorithm
<text:a xlink:type="simple" xlink:href="id=enhanced-distributed-cache-algorithm" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img62"><draw:image xlink:href="../../images/ee-feature-web.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">By default, Liferay's distributed
cache uses the RMI replication mechanism, which uses a point to point
communication topology. As you can guess, this kind of structure doesn't
scale well for a large cluster with many nodes. Because each node has to
send the same event to other nodes
<text:span text:style-name="T2515">N - 1</text:span> times, network
traffic becomes a bottleneck when
<text:span text:style-name="T2516">N</text:span> is too large. Ehcache
also has a performance issue of its own, in that it creates a
replication thread for each cache entity. In a large system like Liferay
Portal, it's very common to have more than 100 cached entities. This
translates to 100+ cache replication threads. Threads are expensive,
because they take resources (memory and CPU power). Most of the time,
these threads are sleeping, because they only need to work when a cached
entity has to talk to remote peers.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img63"><draw:image xlink:href="../../images/19-ehcache-inefficient-algorithm.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Putting heap memory aside
(because the amount of memory on the heap depends on the application(s)
running), consider the stack memory footprint of those 100+ threads. By
default on most platforms, the thread stack size is 2 MB; for 100
threads, that's more than 200 MB. If you include the heap memory size,
this number can become as high as 500 MB for just one node. And that
massive amount of threads can also cause frequent context switch
overhead, which translates to increased CPU cycles.</text:p>
<text:p text:style-name="Text_20_body">For large installations
containing many nodes, Liferay has developed an enhanced algorithm for
handling cache replication that can can fix both the
<text:span text:style-name="T2517">1</text:span> to
<text:span text:style-name="T2518">N - 1</text:span> network
communication bottleneck, as well as the massive threads bottleneck. The
default implementation uses JGroups' UDP multicast to
communicate.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img64"><draw:image xlink:href="../../images/19-ehcache-efficient-algorithm.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">To reduce the number of
replication threads, we provide a small pool of dispatching threads.
These deliver cache cluster events to remote peers. Since all cache
entities' cluster events must go through our pool of dispatching threads
to communicate, this gives us a chance to coalesce events: if two
modifications to the same cache object happen at almost the same time,
we can combine the changes into one, and then we only need to notify
remote peers once. This reduces traffic on the network. We should also
note that newer versions of Ehcache support the JGroups replicator and
can also fix the <text:span text:style-name="T2519">1</text:span> to
<text:span text:style-name="T2520">N - 1</text:span> network
communication; however, they cannot fix the massive threads issue and
they cannot coalesce cache events.</text:p>
<text:p text:style-name="Text_20_body">For EE customers who are
interested in this feature, all you have to do to enable the enhanced
algorithm is to install a plugin from the Liferay Marketplace and set
the following property in the
<text:span text:style-name="T2521">portal-ext.properties</text:span>
files of each of your nodes:</text:p>
<text:p text:style-name="P746">ehcache.cluster.link.replication.enabled=true</text:p>
<text:p text:style-name="First_20_paragraph">Search Liferay Marketplace
for the
<text:span text:style-name="T2522">Ehcache</text:span><text:span text:style-name="T2523">
</text:span><text:span text:style-name="T2524">Cluster</text:span><text:span text:style-name="T2525">
</text:span><text:span text:style-name="T2526">EE</text:span> plugin,
which is free to all EE customers, and install it on each of your nodes.
The new algorithm is immediately activated and you can reap the benefits
right away.</text:p>
<text:p text:style-name="Text_20_body">Next, let's discuss how to modify
your Ehache settings. As we've seen, it's easy to use the default
Ehcache settings just by enabling Cluster Link. If you need to tweak the
cache for your site, you have two options: you can modify Ehcache
settings with a plugin or you can modify them directly.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Modifying
the Ehcache Settings With a Plugin
<text:a xlink:type="simple" xlink:href="id=modifying-the-ehcache-settings-with-a-plugin" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">A benefit of working with
plugins is that you can quickly install a plugin on each node of your
cluster without taking down the cluster. Modifying the Ehcache settings
with a plugin is recommended over modifying Liferay's Ehcache settings
directly. We'll discuss this method first. If you're not a developer,
don't worry--even though you'll create a plugin, you won't have to write
any code.</text:p>
<text:p text:style-name="Text_20_body">Since we're assuming you're an
administrator and not a developer, we'll take the easiest route, and use
Liferay's graphical development tools, rather than the command line
Plugins SDK by itself. If you're a Liferay EE customer, download Liferay
Developer Studio from the Customer Portal. Set it up with all the
defaults from the first start wizard, and you're good to go (skip the
next paragraph).</text:p>
<text:p text:style-name="Text_20_body">If you're not a Liferay EE
customer, download Eclipse and install Liferay IDE from the Eclipse
Marketplace. Download the Plugins SDK for your edition of Liferay from
either the Customer Portal (EE) or the Downloads page on liferay.com.
Connect Liferay IDE to your Plugins SDK using the instructions found in
the
<text:span text:style-name="T2527">Liferay</text:span><text:span text:style-name="T2528">
</text:span><text:span text:style-name="T2529">Developer's</text:span><text:span text:style-name="T2530">
</text:span><text:span text:style-name="T2531">Guide</text:span>.</text:p>
<text:p text:style-name="Text_20_body">Next, create a hook plugin by
selecting <text:span text:style-name="T2532">File</text:span> →
<text:span text:style-name="T2533">New</text:span> →
<text:span text:style-name="T2534">Liferay</text:span><text:span text:style-name="T2535">
</text:span><text:span text:style-name="T2536">Project</text:span>.
Select <text:span text:style-name="T2537">Hook</text:span> as the
project type and give your project a name. Click
<text:span text:style-name="T2538">Finish</text:span> and your project
is created.</text:p>
<text:p text:style-name="Text_20_body">In your project, create a text
file called
<text:span text:style-name="T2539">portlet.properties</text:span> in the
<text:span text:style-name="T2540">docroot/WEB-INF/src</text:span>
folder. This file can override properties in your portal just like
<text:span text:style-name="T2541">portal-ext.properties</text:span>.
Into this file, add the following three properties:</text:p>
<text:p text:style-name="P747">net.sf.ehcache.configurationResourceName=</text:p>
<text:p text:style-name="P748">ehcache.single.vm.config.location=</text:p>
<text:p text:style-name="P749">ehcache.multi.vm.config.location=</text:p>
<text:p text:style-name="First_20_paragraph">Liferay's configuration
files are, of course, used by default. If you're overriding these
properties, it's because you want to customize the configuration for
your own site. A good way to start with this is to extract Liferay's
configuration files and then customize them. If you're running an
application server (such as Tomcat) that allows you to browse to the
running instance of Liferay, you can extract Liferay's configuration
files from Liferay itself. If you're not, you can extract them from
Liferay's <text:span text:style-name="T2542">.war</text:span> file or
Liferay's source code. In either place, you'll find the files in the
<text:span text:style-name="T2543">portal-impl.jar</text:span> file,
which is in Liferay's
<text:span text:style-name="T2544">WEB-INF/lib</text:span> folder. The
files you want are
<text:span text:style-name="T2545">hibernate-clustered.xml</text:span>,
<text:span text:style-name="T2546">liferay-single-vm.xml</text:span>,
and
<text:span text:style-name="T2547">liferay-multi-vm-clustered.xml</text:span>,
and they'll be in the
<text:span text:style-name="T2548">/ehcache</text:span> folder in this
<text:span text:style-name="T2549">.jar</text:span>. Once you have
these, make a subfolder of the
<text:span text:style-name="T2550">docroot</text:span> folder in your
project. Place the files you extracted into this folder and then specify
this folder in the properties above.</text:p>
<text:p text:style-name="Text_20_body">For example, if you created a
folder called
<text:span text:style-name="T2551">custom_cache</text:span> in your
project's <text:span text:style-name="T2552">docroot</text:span> folder,
you'd copy the three XML configuration files
(<text:span text:style-name="T2553">hibernate-clustered.xml</text:span>,
<text:span text:style-name="T2554">liferay-single-vm.xml</text:span>,
and
<text:span text:style-name="T2555">liferay-multi-vm-clustered.xml</text:span>)
there. Then you'd edit your
<text:span text:style-name="T2556">portlet.properties</text:span> and
specify your configuration files in the three properties above:</text:p>
<text:p text:style-name="P750">net.sf.ehcache.configurationResourceName=/custom_cache/hibernate-clustered.xml</text:p>
<text:p text:style-name="P751">ehcache.single.vm.config.location=/custom_cache/liferay-single-vm.xml</text:p>
<text:p text:style-name="P752">ehcache.multi.vm.config.location=/custom_cache/liferay-multi-vm-clustered.xml</text:p>
<text:p text:style-name="First_20_paragraph">Save the file and deploy
the plugin (deploying plugins is covered in the
<text:a xlink:type="simple" xlink:href="https://www.liferay.com/documentation/liferay-portal/6.2/development" office:name=""><text:span text:style-name="Definition">Liferay
Development Guide</text:span></text:a>), and the settings you've placed
in those files will override the default Liferay settings. In this way,
you can tweak your cache settings so that your cache performs optimally
for the type of traffic generated by your site. The strength of doing it
this way is that you don't have restart your server to change the cache
settings. This is a great benefit, but beware: since Ehcache doesn't
allow for changes to cache settings while the cache is alive,
reconfiguring a cache while the server is running will flush the
cache.</text:p>
<text:p text:style-name="Text_20_body">There is, of course, another way
to do this if you don't want to create a plugin. It requires you to
restart the server to enable the new cache settings, but you don't have
to work with any developer tools to do it.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Modifying
the Ehcache Settings Directly
<text:a xlink:type="simple" xlink:href="id=modifying-the-ehcache-settings-directly" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">This method is pretty
similar to the plugin method, except that you have to modify the Liferay
installation directly. You'll still need to extract Liferay's
configuration files as described in the previous section. Next, shut
down your server and find the location in the server where Liferay is
installed (this may not be possible on all application servers, and if
this is the case, you'll need to use the plugin method described above).
For example, suppose you're running Liferay on Tomcat. Tomcat stores the
deployed version of Liferay in
<text:span text:style-name="T2557">[Tomcat Home]/webapps/ROOT</text:span>.
Inside this folder is the folder structure
<text:span text:style-name="T2558">WEB-INF/classes</text:span>. You can
create a new folder in here called
<text:span text:style-name="T2559">custom_cache</text:span> to store the
custom versions of the cache configuration files. Copy the files you
extracted from Liferay into this folder.</text:p>
<text:p text:style-name="Text_20_body">You then need to modify the
properties in
<text:span text:style-name="T2560">portal-ext.properties</text:span>
that point to these files. Copy/paste the
<text:span text:style-name="T2561">Hibernate</text:span> section of
<text:span text:style-name="T2562">portal.properties</text:span> into
your
<text:span text:style-name="T2563">portal-ext.properties</text:span>
file and then modify the
<text:span text:style-name="T2564">net.sf.ehcache.configurationResourceName</text:span>
property to point to the clustered version of the configuration file
that is now in your custom folder:</text:p>
<text:p text:style-name="P753">net.sf.ehcache.configurationResourceName=/custom_cache/hibernate-clustered.xml</text:p>
<text:p text:style-name="First_20_paragraph">Now that Liferay is
pointing to your custom file, you can modify the settings in this file
to change the cache configuration for Hibernate.</text:p>
<text:p text:style-name="Text_20_body">Next, copy/paste the
<text:span text:style-name="T2565">Ehcache</text:span> section from the
<text:span text:style-name="T2566">portal.properties</text:span> file
into your
<text:span text:style-name="T2567">portal-ext.properties</text:span>
file. Modify the properties so they point to the files in your custom
folder. For example:</text:p>
<text:p text:style-name="P754">ehcache.multi.vm.config.location=/custom_cache/liferay-multi-vm-clustered.xml</text:p>
<text:p text:style-name="First_20_paragraph">You can now take a look at
the settings in these files and tune them to fit your environment and
application. Let's examine how to do that next.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Customizing
Hibernate Cache Settings
<text:a xlink:type="simple" xlink:href="id=customizing-hibernate-cache-settings" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">By default, Hibernate
(Liferay's database persistence layer) is configured to use Ehcache as
its cache provider. This is the recommended setting. If you're using the
default settings using Cluster Link, you already have this enabled. If,
however, you need to customize the settings, you'll have to customize it
in one of the ways described above: either in a plugin or in the
deployed instance of Liferay. The first thing, of course, is to start
off with the clustered version of the file. Copy the
<text:span text:style-name="T2568">hibernate-clustered.xml</text:span>
configuration file to your plugin or to a place in Liferay's classpath
(as described above) where you can refer to it. Then change the
following property to point to the file:</text:p>
<text:p text:style-name="P755">net.sf.ehcache.configurationResourceName=/path/to/hibernate-clustered.xml</text:p>
<text:p text:style-name="First_20_paragraph">Next, open this file in a
text editor. You'll notice that the configuration is already set up to
perform distributed caching through a multi-cast connection. The
configuration, however, might not be set up optimally for your
particular application. Notice that by default, the only object cached
in the Hibernate cache is the User object
(<text:span text:style-name="T2569">com.liferay.``portal``.model.impl.UserImpl</text:span>).
This means that when a user logs in, his or her User object will go in
the cache so that any portal operation that requires access to it (such
as permission checking) can retrieve that object very quickly from the
cache.</text:p>
<text:p text:style-name="Text_20_body">You may wish to add other objects
to the cache. For example, a large part of your application may be
document management using the Documents and Media portlet. In this case,
you may want to cache media objects, such as
<text:span text:style-name="T2570">DLFileEntryImpl</text:span> to
improve performance as users access documents. To do that, add another
block to the configuration file with the class you want to
cache:</text:p>
<text:p text:style-name="P756">&lt;cache</text:p>
<text:p text:style-name="P757"><text:s text:c="4" />eternal=&quot;false&quot;</text:p>
<text:p text:style-name="P758"><text:s text:c="4" />maxElementsInMemory=&quot;10000&quot;</text:p>
<text:p text:style-name="P759"><text:s text:c="4" />name=&quot;com.liferay.portlet.documentlibrary.model.impl.DLFileEntryImpl&quot;</text:p>
<text:p text:style-name="P760"><text:s text:c="4" />overflowToDisk=&quot;false&quot;</text:p>
<text:p text:style-name="P761"><text:s text:c="4" />timeToIdleSeconds=&quot;600&quot;</text:p>
<text:p text:style-name="P762">&gt;</text:p>
<text:p text:style-name="P763"><text:s text:c="4" />&lt;cacheEventListenerFactory</text:p>
<text:p text:style-name="P764"><text:s text:c="8" />class=&quot;com.liferay.portal.cache.ehcache.LiferayCacheEventListenerFactory&quot;</text:p>
<text:p text:style-name="P765"><text:s text:c="8" />properties=&quot;replicatePuts=false,replicateUpdatesViaCopy=false&quot;</text:p>
<text:p text:style-name="P766"><text:s text:c="8" />propertySeparator=&quot;,&quot;</text:p>
<text:p text:style-name="P767"><text:s text:c="4" />/&gt;</text:p>
<text:p text:style-name="P768"><text:s text:c="4" />&lt;bootstrapCacheLoaderFactory class=&quot;com.liferay.portal.cache.ehcache.LiferayBootstrapCacheLoaderFactory&quot; /&gt;</text:p>
<text:p text:style-name="P769">&lt;/cache&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Your site may use the
message boards portlet, and those message boards may get a lot of
traffic. To cache the threads on the message boards, configure a block
with the <text:span text:style-name="T2571">MBMessageImpl</text:span>
class:</text:p>
<text:p text:style-name="P770">&lt;cache</text:p>
<text:p text:style-name="P771"><text:s text:c="4" />eternal=&quot;false&quot;</text:p>
<text:p text:style-name="P772"><text:s text:c="4" />maxElementsInMemory=&quot;10000&quot;</text:p>
<text:p text:style-name="P773"><text:s text:c="4" />name=&quot;com.liferay.portlet.messageboards.model.impl.MBMessageImpl&quot;</text:p>
<text:p text:style-name="P774"><text:s text:c="4" />overflowToDisk=&quot;false&quot;</text:p>
<text:p text:style-name="P775"><text:s text:c="4" />timeToIdleSeconds=&quot;600&quot;</text:p>
<text:p text:style-name="P776">&gt;</text:p>
<text:p text:style-name="P777"><text:s text:c="4" />&lt;cacheEventListenerFactory</text:p>
<text:p text:style-name="P778"><text:s text:c="8" />class=&quot;com.liferay.portal.cache.ehcache.LiferayCacheEventListenerFactory&quot;</text:p>
<text:p text:style-name="P779"><text:s text:c="8" />properties=&quot;replicatePuts=false,replicateUpdatesViaCopy=false&quot;</text:p>
<text:p text:style-name="P780"><text:s text:c="8" />propertySeparator=&quot;,&quot;</text:p>
<text:p text:style-name="P781"><text:s text:c="4" />/&gt;</text:p>
<text:p text:style-name="P782"><text:s text:c="4" />&lt;bootstrapCacheLoaderFactory class=&quot;com.liferay.portal.cache.ehcache.LiferayBootstrapCacheLoaderFactory&quot; /&gt;</text:p>
<text:p text:style-name="P783">&lt;/cache&gt;</text:p>
<text:p text:style-name="First_20_paragraph">Note that if your
developers have overridden any of these classes in an Ext plugin, you'll
have to specify the overridden versions rather than the stock ones that
come with Liferay Portal. You can customize the other ehcache
configuration files in exactly the same way. Refer to Ehcache's
<text:a xlink:type="simple" xlink:href="www.ehcache.org/documentation" office:name=""><text:span text:style-name="Definition">documentation</text:span></text:a>
for information on how to do this.</text:p>
<text:p text:style-name="Text_20_body">As you can see, it's easy to add
specific data to be cached. Be careful, however, as too much caching can
actually reduce performance if the JVM runs out of memory and starts
garbage collecting too frequently. You'll likely need to experiment with
the memory settings on your JVM as well as the cache settings above. You
can find the specifics about these settings in the documentation for
Ehcache.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Configuring
Liferay's Caching Settings
<text:a xlink:type="simple" xlink:href="id=configuring-liferays-caching-settings" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">To understand how Liferay
behaves with various cache configurations, let's consider five different
scenarios.</text:p>
<text:list text:style-name="L80">
  <text:list-item>
    <text:p text:style-name="P784">Scenario 1: The portal administrator
    does not override the default cache configuration files (i.e., does
    not override
    <text:span text:style-name="T2572">ehcache.single.vm.config.location</text:span>,
    <text:span text:style-name="T2573">ehcache.multi.vm.config.location</text:span>,
    or
    <text:span text:style-name="T2574">net.sf.ehcache.configurationResourceName</text:span>)
    but does set
    <text:span text:style-name="T2575">cluster.link.enabled=true</text:span>
    and
    <text:span text:style-name="T2576">ehcache.cluster.link.replication.enabled=true</text:span>.
    This is the recommended configuration for a Liferay cluster, as long
    as the Ehcache Cluster EE app, available from Liferay Marketplace,
    has been installed.
    <text:span text:style-name="T2577">Important</text:span>: The
    Ehcache Cluster EE app must be installed or cache replication will
    <text:span text:style-name="T2578">not</text:span> work with this
    configuration. In this scenario, Liferay automatically resets cache
    peer and cache event listers and replaces them with Cluster Link
    based listeners. This basically activates Cluster Link based cache
    replication. The configured LiferayCacheManagerPeerProviderFactory,
    RMICacheManagerPeerListenerFactory, and
    LiferayCacheEventListenerFactory classes are replaced with Cluster
    Link based implementations.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P784">Scenario 2: The portal administrator
    does not override the default cache configuration files, does set
    <text:span text:style-name="T2579">cluster.link.enabled=true</text:span>,
    but does not set
    <text:span text:style-name="T2580">ehcache.cluster.link.replication.enabled=true</text:span>.
    In this case, Liferay utilizes Ehcache's out-of-the-box replication
    mechanisms (Multicast for discovery and RMI for replication). Lots
    of replicator threads appear in the log with this
    configuration.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P784">Scenario 3: The portal administrator
    does not override the default cache configuration files and does not
    set
    <text:span text:style-name="T2581">cluster.link.enabled=true</text:span>.
    In this case, Liferay does not activate any replication and operates
    with the assumption that there's no cluster.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P784">Scenario 4: The portal administrator
    overrides the default cache configuration files and sets
    <text:span text:style-name="T2582">cluster.link.enabled=true</text:span>
    and
    <text:span text:style-name="T2583">ehcache.cluster.link.replication.enabled=true</text:span>.
    In this case, Liferay uses Cluster Link based replication for any
    caches configured with the LiferayCacheEventListenerFactory classs.
    If the portal administrator configured a different
    CacheEventListener class for a specific cache (e.g., JGroups), then
    Liferay uses that listener class. This a basically a hybrid mode
    that was useful prior to Liferay 6.1 before Liferay supported cached
    object replication (and only supported cached event replication).
    This is <text:span text:style-name="T2584">not</text:span> a
    recommended configuration for Liferay 6.1 or later.</text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P784">Scenario 5: The portal administrator
    overrides the default cache configuration files and sets
    <text:span text:style-name="T2585">cluster.link.enabled=true</text:span>
    but does not set
    <text:span text:style-name="T2586">ehcache.cluster.link.replication.enabled=true</text:span>.
    In this case, Liferay uses the cache configurations specified in the
    custom cache configuration files. This is the recommended
    configuration when overriding the default cache configuration
    files.</text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph">As a general rule, we
recommend that portal administrators
<text:span text:style-name="T2587">not</text:span> set custom cache
configuration files but to set
<text:span text:style-name="T2588">cluster.link.enabled=true</text:span>
and
<text:span text:style-name="T2589">ehcache.cluster.link.replication.enabled=true</text:span>
(i.e., we recommend that portal administrators set up the configuration
in scenario 1). If it's necessary to tune the cache configurations, it's
better to do it via a plugin than to do it directly. We explained how to
do this in the section above called &quot;Modifying the Ehcache Settings
With a Plugin.&quot;</text:p>
<text:p text:style-name="Text_20_body">Next, we'll show how to share
indexes in a database. This is actually not a recommended configuration,
as it's slow (databases are always slower than file systems), but for
completeness, we'll go ahead and tell you how to do it anyway. But
you've been forewarned: it's far better to use one of the other methods
of clustering your search index.</text:p>
<text:h text:style-name="Heading_20_3" text:outline-level="3">Sharing a
Search Index (not recommended unless you have a file locking-aware SAN)
<text:a xlink:type="simple" xlink:href="id=sharing-a-search-index-not-recommended-unless-you-have-a-file-locking-aware" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">If you wish to have a
shared index (and we really hope you don't), you'll need to either share
the index on the file system or in the database. This requires changing
your Lucene configuration.</text:p>
<text:p text:style-name="Text_20_body">The Lucene configuration can be
changed by modifying values in your
<text:span text:style-name="T2590">portal-ext.properties</text:span>
file. Open your
<text:span text:style-name="T2591">portal.properties</text:span> file
and search for the text
<text:span text:style-name="T2592">Lucene</text:span>. Copy that section
and then paste it into your
<text:span text:style-name="T2593">portal-ext.properties</text:span>
file.</text:p>
<text:p text:style-name="Text_20_body">If you wish to store the Lucene
search index on a file system that is shared by all of the Liferay nodes
(not recommended: you've been warned), you can modify the location of
the search index by changing the
<text:span text:style-name="T2594">lucene.dir</text:span> property. By
default, this property points to the
<text:span text:style-name="T2595">lucene</text:span> folder inside the
Liferay home folder:</text:p>
<text:p text:style-name="P785">lucene.dir=${liferay.home}/data/lucene/</text:p>
<text:p text:style-name="First_20_paragraph">Change this to the folder
of your choice. You'll need to restart Liferay for the changes to take
effect. You can point all of the nodes to this folder and they will use
the same index.</text:p>
<text:p text:style-name="Text_20_body">Like Jackrabbit, however, this is
not the best way to share the search index, as it could result in file
corruption if different nodes try reindexing at the same time. We do not
recommend this for a production system. A better way (though still not
great) is to share the index via a database, where the database can
enforce data integrity on the index. This is very easy to do; it is a
simple change to your
<text:span text:style-name="T2596">portal-ext.properties</text:span>
file. Of course, we also don't recommend this for a production system,
as accessing the index from a database will be slower than from a file
system. If, however, you have no other option and want to do this
anyway, keep reading.</text:p>
<text:p text:style-name="Text_20_body">There is a single property called
<text:span text:style-name="T2597">lucene.store.type</text:span>. By
default this is set to go to the file system. You can change this so
that the index is stored in the database by making it the
following:</text:p>
<text:p text:style-name="P786">lucene.store.type=jdbc</text:p>
<text:p text:style-name="First_20_paragraph">The next time Liferay is
started, new tables are created in the Liferay database, and the index
is stored there. If all the Liferay nodes point to the same database
tables, they will be able to share the index. Again, performance on this
is not very good. Your DBAs may be able to tweak the database indexes a
bit to improve performance. For better performance, you should consider
using a separate search server or syncing the indexes on the nodes' file
systems.</text:p>
<text:p text:style-name="Text_20_body">+$$$</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T2598">Note:</text:span>
MySQL users need to modify their JDBC connection string for this to
work. Add the following parameter to your connection string:</text:p>
<text:p text:style-name="P787">emulateLocators=true</text:p>
<text:p text:style-name="First_20_paragraph">$$$</text:p>
<text:p text:style-name="Text_20_body">Alternatively, you can leave the
configuration alone, and each node will have its own index. This ensures
against collisions when multiple nodes update the index. However, the
indices will quickly get out of sync since they don't replicate. For
this reason, this is not a recommended configuration either. Again, for
a better configuration, replicate the indexes with Cluster Link or use a
separate search server (see the section on Solr above).</text:p>
<text:p text:style-name="Text_20_body">Now we can look at the last
consideration when clustering Liferay: hot deploy.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Hot Deploy
<text:a xlink:type="simple" xlink:href="id=hot-deploy" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Plugins which are hot
deployed will need to be deployed separately to all the Liferay nodes.
The best way to do this is to configure your application server to
support <text:span text:style-name="T2599">farms</text:span>. This is a
feature that enables you to deploy an application on one node and then
it replicates automatically to each of the other nodes. This, of course,
is configured differently for each application server, so you'll need to
consult your application server's documentation to learn how to do this.
It's by far the best way to handle hot deploy, and is the recommended
configuration. If you have this working, great! You can skip the rest of
this section completely.</text:p>
<text:p text:style-name="Text_20_body">If for some reason your
application server doesn't support this feature or you can't use it,
you'll need to come up with a way to deploy applications across your
cluster. Each node needs to have its own hot deploy folder. This folder
needs to be writable by the user under which Liferay is running, because
plugins are moved from this folder to a temporary folder when they are
deployed. This is to prevent the system from entering an endless loop,
because the presence of a plugin in the folder is what triggers the hot
deploy process.</text:p>
<text:p text:style-name="Text_20_body">When you want to deploy a plugin
to the entire cluster, copy that plugin to the hot deploy folders of all
of the Liferay nodes. Depending on the number of nodes, it may be best
to create a script to do this. Once the plugin has been deployed to all
of the nodes, you can then make use of it (by adding the portlet to a
page or choosing the theme as the look and feel for a page or page
hierarchy).</text:p>
<text:p text:style-name="Text_20_body">All of the above will get basic
Liferay clustering working; however, the configuration can be further
optimized. We will see how to do this next.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Performance
Tuning
<text:a xlink:type="simple" xlink:href="id=performance-tuning" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Once you have your portal
up and running, you may find a need to tune it for performance,
especially if your site winds up generating more traffic than you'd
anticipated. There are some definite steps you can take with regard to
improving Liferay's performance.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Memory
<text:a xlink:type="simple" xlink:href="id=memory" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Memory is one of the first
things to look at when you want to optimize performance. If you have any
disk swapping, you want to avoid it at all costs: it has a serious
impact on performance. Make sure your server has an optimal amount of
memory and your JVM is tuned to use it.</text:p>
<text:p text:style-name="Text_20_body">There are three basic JVM command
switches that control the amount of memory in the Java heap.</text:p>
<text:p text:style-name="P788">-Xms</text:p>
<text:p text:style-name="P789">-Xmx</text:p>
<text:p text:style-name="P790">-XX:MaxPermSize</text:p>
<text:p text:style-name="First_20_paragraph">These three settings
control the amount of memory available to the JVM initially, the maximum
amount of memory into which the JVM can grow, and the separate area of
the heap called Permanent Generation space.</text:p>
<text:p text:style-name="Text_20_body">The first two settings should be
set to the same value. This prevents the JVM from having to reallocate
memory if the application needs more. Setting them to the same value
causes the JVM to be created up front with the maximum amount of memory
you want to give it.</text:p>
<text:p text:style-name="P791">-Xms1024m -Xmx1024m -XX:MaxPermSize=256m</text:p>
<text:p text:style-name="First_20_paragraph">This is perfectly
reasonable for a moderately sized machine or a developer machine. These
settings give the JVM 1024MB for its regular heap size and have a
PermGen space of 256MB. If you're having performance problems, and your
profiler is showing that there's a lot of garbage collection going on,
the first thing you might want to look at is increasing the memory
available to the JVM. You'll be able to tell if memory is a problem by
running a profiler (such as Jprobe, YourKit, or the NetBeans profiler)
on the server. If you see Garbage Collection (GC) running frequently,
you definitely want to increase the amount of memory available to the
JVM.</text:p>
<text:p text:style-name="Text_20_body">Note that there is a law of
diminishing returns on memory, especially with 64 bit systems. These
systems allow you to create very large JVMs, but the larger the JVM, the
more time it takes for garbage collection to take place. For this
reason, you probably won't want to create JVMs of more than 2 GB in
size. To take advantage of higher amounts of memory on a single system,
run multiple JVMs of Liferay instead.</text:p>
<text:p text:style-name="Text_20_body">Issues with PermGen space can
also affect performance. PermGen space contains long-lived classes,
anonymous classes and interned Strings (immutable String objects that
are kept around for a long time to increase String processing
performance). Hibernate--which Liferay uses extensively--has been known
to make use of PermGen space. If you increase the amount of memory
available to the JVM, you may want to increase the amount of PermGen
space accordingly.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Garbage
Collection
<text:a xlink:type="simple" xlink:href="id=garbage-collection" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">As the system runs, various
Java objects are created. Some of these objects are long-lived, and some
are not. The ones that are not become
<text:span text:style-name="T2600">de-referenced</text:span>, which
means that the JVM no longer has a link to them because they have ceased
to be useful. These may be variables that were used for methods which
have already returned their values, objects retrieved from the database
for a user that is no longer logged on, or a host of other things. These
objects sit in memory and fill up the heap space until the JVM decides
it's time to clean them up.</text:p>
<text:p text:style-name="Text_20_body">Normally, when garbage collection
(GC) runs, it stops all processing in the JVM while it goes through the
heap looking for dead objects. Once it finds them, it frees the memory
they were taking up, and then processing can continue. If this happens
in a server environment, it can slow down the processing of requests, as
all processing comes to a halt while GC is happening.</text:p>
<text:p text:style-name="Text_20_body">There are some JVM switches that
you can enable which can reduce the amount of time processing is halted
while garbage collecting happens. These can improve the performance of
your Liferay installation if applied properly. As always, you will need
to use a profiler to monitor garbage collection during a load test to
tune the numbers properly for your server hardware, operating system,
and application server.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img65"><draw:image xlink:href="../../images/portal-admin-ch7_html_518957a7.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">The Java heap is divided into
sections for the young generation, the old generation, and the permanent
generation. The young generation is further divided into three sections:
Eden, which is where new objects are created, and two “survivor spaces,
which we can call the
<text:span text:style-name="T2601">From</text:span> and
<text:span text:style-name="T2602">To</text:span> spaces. Garbage
collection occurs in stages. Generally, it's more frequently done in the
young generation, less frequently done in the old generation, and even
less frequently done in the permanent generation, where long-lived
objects reside. When garbage collection runs in the young generation,
Eden is swept for objects which are no longer referenced. Those that are
still around are moved to the
<text:span text:style-name="T2603">To</text:span> survivor space, and
the <text:span text:style-name="T2604">From</text:span> space is then
swept. Any other objects in that space which still have references to
them are moved to the <text:span text:style-name="T2605">To</text:span>
space, and the <text:span text:style-name="T2606">From</text:span> space
is then cleared out altogether. After this, the
<text:span text:style-name="T2607">From</text:span> and the
<text:span text:style-name="T2608">To</text:span> spaces swap roles, and
processing is freed up again until the next time the JVM determines that
garbage collection needs to run.</text:p>
<text:p text:style-name="Text_20_body">After a predetermined number of
<text:span text:style-name="T2609">generations</text:span> of garbage
collection, surviving objects may be moved to the old generation.
Similarly, after a predetermined number of
<text:span text:style-name="T2610">generations</text:span> of garbage
collection in the old generation, surviving objects may be moved to the
permanent generation.</text:p>
<text:p text:style-name="Text_20_body">By default, the JDK uses a serial
garbage collector to achieve this. This works very well for a
short-lived desktop Java application, but is not necessarily the best
performer for a long-lived, server-based application like Liferay. For
this reason, you may wish to switch to the Concurrent Mark-Sweep (CMS)
collector.</text:p>
<text:p text:style-name="Text_20_body">In CMS garbage collection, rather
than halting application processing altogether, this garbage collector
makes one short pause in application execution to mark objects directly
reachable from the application code. Then it allows the application to
run while it marks all objects which are reachable from the set it
marked. Finally, it adds another phase called the
<text:span text:style-name="T2611">remark</text:span> phase which
finalizes marking by revisiting any objects modified while the
application was running. It then sweeps through and garbage collects.
Though it sounds more complicated, this has the effect of greatly
reducing the amount of time that execution needs to be halted to clean
out dead objects.</text:p>
<text:p text:style-name="Text_20_body">Just about every aspect of the
way memory management works in Java can be tuned. In your profiling, you
may want to experiment with some of the following settings to see if any
of them can increase your performance.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T2612">NewSize,</text:span><text:span text:style-name="T2613">
</text:span><text:span text:style-name="T2614">MaxNewSize:</text:span>
The initial size and the maximum size of the New or Young
Generation.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T2615">+UseParNewGC:</text:span>
Causes garbage collection to happen in parallel, using multiple CPUs.
This decreases garbage collection overhead and increases application
throughput.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T2616">+UseConcMarkSweepGC:</text:span>
Use the Concurrent Mark-Sweep Garbage Collector. This uses shorter
garbage collection pauses, and is good for applications that have a
relatively large set of long-lived data, and that run on machines with
two or more processors, such as web servers.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T2617">+CMSParallelRemarkEnabled:</text:span>
For the CMS GC, enables the garbage collector to use multiple threads
during the CMS remark phase. This decreases the pauses during this
phase.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T2618">SurvivorRatio:</text:span>
Controls the size of the two survivor spaces. It's a ratio between the
survivor space size and Eden. The default is 25. There's not much bang
for the buck here, but it may need to be adjusted.</text:p>
<text:p text:style-name="Text_20_body"><text:span text:style-name="T2619">ParallelGCThreads:</text:span>
The number of threads to use for parallel garbage collection. Should be
equal to the number of CPU cores in your server.</text:p>
<text:p text:style-name="Text_20_body">A sample configuration using the
above parameters might look something like this:</text:p>
<text:p text:style-name="P792">JAVA_OPTS=&quot;$JAVA_OPTS -XX:NewSize=700m -XX:MaxNewSize=700m -Xms2048m</text:p>
<text:p text:style-name="P793">-Xmx2048m -XX:MaxPermSize=128m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</text:p>
<text:p text:style-name="P794">-XX:+CMSParallelRemarkEnabled -XX:SurvivorRatio=20</text:p>
<text:p text:style-name="P795">-XX:ParallelGCThreads=8&quot;</text:p>
<text:p text:style-name="First_20_paragraph">Again, you should always
follow the procedure of adjusting the settings, then testing under load,
then adjusting again. Every system is different and these are general
guidelines to follow. Next, we'll see some modifications we can make to
Liferay's properties to help increase performance.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Properties
File Changes
<text:a xlink:type="simple" xlink:href="id=properties-file-changes" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">There are also some changes
you can make to your
<text:span text:style-name="T2620">portal-ext.properties</text:span>
file once you are in a production environment.</text:p>
<text:p text:style-name="Text_20_body">Set this property to true to load
the theme's merged CSS files for faster loading for production. By
default it is set to false for easier debugging for development. You can
also disable fast loading by setting the URL parameter
<text:span text:style-name="T2621">css_fast_load</text:span> to
<text:span text:style-name="T2622">0</text:span>.</text:p>
<text:p text:style-name="P796">theme.css.fast.load=true</text:p>
<text:p text:style-name="First_20_paragraph">Set this property to true
to load the combined JavaScript files from the property
<text:span text:style-name="T2623">javascript.files</text:span> into one
compacted file for faster loading for production.</text:p>
<text:p text:style-name="P797">javascript.fast.load=true</text:p>
<text:p text:style-name="First_20_paragraph">These are various things
the Liferay engineering team has done to increase performance generally.
If your developers make use of Liferay's tools and platform, their
JavaScript and themes can also take advantage of these
properties.</text:p>
<text:p text:style-name="Text_20_body">Let's look at one final, general
way of increasing Liferay's performance: disabling unused servlet
filters.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Disabling
Unused Servlet Filters
<text:a xlink:type="simple" xlink:href="id=disabling-unused-servlet-filters" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Liferay comes by default
with a number of servlet filters enabled and running. It is likely that
for your installation, you don't need them all. Since servlet filters
intercept the HTTP request and do some processing on it before Liferay
even has a chance to start building the page, you can increase
performance by disabling the ones you're not using.</text:p>
<text:p text:style-name="Text_20_body">You can disable servlet filters
you're not using by using your
<text:span text:style-name="T2624">portal-ext.properties</text:span>
file. Copy the
<text:span text:style-name="T2625">Servlet</text:span><text:span text:style-name="T2626">
</text:span><text:span text:style-name="T2627">Filters</text:span>
section from the original
<text:span text:style-name="T2628">portal.properties</text:span> file
into your customized file, and then go through the list and see if there
are any you can disable, by setting them to
<text:span text:style-name="T2629">false</text:span>.</text:p>
<text:p text:style-name="Text_20_body">For example, if you are not using
CAS for single sign-on, disable the CAS Filter. If you are not using
NTLM for single sign-ons, disable the NTLM Filter. The fewer servlet
filters you are running, the less processing power is needed for each
request.</text:p>
<text:p text:style-name="Text_20_body">As you can see, there are many
things you can do to increase Liferay's performance generally. But don't
forget to load test your own applications! It may be that a performance
issue comes from a custom-built application that's doing something it
shouldn't do. Always load test your system before putting it into
production: that's the best way of finding out potential performance
problems, and that way, you'll find them during performance testing, and
not when your system is in production.</text:p>
<text:p text:style-name="Text_20_body">Next, you'll learn how to
configure a Content Delivery Network, which can also help with your
portal's performance.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Content
Delivery Network
<text:a xlink:type="simple" xlink:href="id=content-delivery-network" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">A Content Delivery Network
(CDN) is an interconnected system of servers deployed in multiple data
centers that use geographical proximity as a criteria to deliver content
across the Internet. For more information on CDNs and their general use
cases and technical details, visit the following
<text:a xlink:type="simple" xlink:href="http://en.wikipedia.org/wiki/Content_delivery_network" office:name=""><text:span text:style-name="Definition">site</text:span></text:a>.</text:p>
<text:p text:style-name="Text_20_body">First, you'll discover the perks
of using a CDN in Liferay and learn about general guidelines for using a
CDN in your Liferay Portal instance. Then, you'll learn the steps to
configure a CDN for your portal. It's time to expand your Liferay
content around the world!</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Using CDN
for Performance Enhancements
<text:a xlink:type="simple" xlink:href="id=using-cdn-for-performance-enhancements" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">A CDN serves static content
to users in a Liferay Portal instance. These static resources (images,
CSS, JavaScript, etc.) from the portal are stored on multiple servers
around the world, and when requested, are retrieved by the server
nearest to the user.</text:p>
<text:p text:style-name="Text_20_body">The CDN functions as a caching
proxy, meaning that once static content is copied to a local server, it
is stored in a cache for quick and easy retrieval. This drastically
improves latency time, because browsers can download static resources
from a local server down the street instead of halfway around the world.
A user's request to the CDN for content is directed to a server machine
using an algorithm. That algorithm attempts to use a server closest to
the user. The figure below shows a visual representation of using
geographical proximity to improve latency.</text:p>
<text:p text:style-name="Text_20_body"><draw:frame draw:name="img66"><draw:image xlink:href="../../images/cdn-map.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">Because of the reduced wait time
for requests and reduced load on your application server, a CDN is a
great option to improve your portal's performance. Using a CDN with
Liferay, however, has some restrictions.</text:p>
<text:p text:style-name="Text_20_body">Liferay only works with CDNs that
can dynamically retrieve requested resources from Liferay. For this
reason, you should check with your CDN provider to make sure you don't
have to upload anything to them manually in order for it to work. The
CDN must fetch the content itself.</text:p>
<text:p text:style-name="Text_20_body">There are several properties in
Liferay that enable you to configure your CDN and tweak it to your
portal's needs. You'll cover how to do this next.</text:p>
<text:h text:style-name="Heading_20_2" text:outline-level="2">Configuring
Liferay to Use a CDN
<text:a xlink:type="simple" xlink:href="id=configuring-liferay-to-use-a-cdn" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">Now that you have a general
understanding of what a CDN accomplishes and how it's used in Liferay,
it's time to set one up for yourself. You can set your CDN and its
properties using two different methods: editing your portal's properties
file or using the Control Panel.</text:p>
<text:p text:style-name="Text_20_body">To configure your CDN by
properties file, you'll need to create a
<text:span text:style-name="T2630">portal-ext.properties</text:span>
file in your Liferay Home directory and set the appropriate CDN
properties. You can view the CDN properties and their descriptions by
visiting the
<text:a xlink:type="simple" xlink:href="http://docs.liferay.com/portal/6.2/propertiesdoc/portal.properties.html#Content%20Delivery%20Network" office:name=""><text:span text:style-name="Definition">Content
Delivery Network</text:span></text:a> section of the
<text:span text:style-name="T2631">portal.properties</text:span> HTML
document.</text:p>
<text:p text:style-name="Text_20_body">Once you configure your CDN host,
static assets automatically get uploaded to the CDN, and Liferay
generates URLs to them that replace the old host with your new CDN
host.</text:p>
<text:p text:style-name="Text_20_body">To configure your CDN in the
Control Panel, navigate to the Control Panel →
<text:span text:style-name="T2632">Portal</text:span><text:span text:style-name="T2633">
</text:span><text:span text:style-name="T2634">Settings</text:span>. In
the main configuration, you'll notice three fields related to
CDNs:</text:p>
<text:list text:style-name="L81">
  <text:list-item>
    <text:p text:style-name="P798"><text:span text:style-name="T2635">CDN</text:span><text:span text:style-name="T2636">
    </text:span><text:span text:style-name="T2637">Host</text:span><text:span text:style-name="T2638">
    </text:span><text:span text:style-name="T2639">HTTP</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P798"><text:span text:style-name="T2640">CDN</text:span><text:span text:style-name="T2641">
    </text:span><text:span text:style-name="T2642">Host</text:span><text:span text:style-name="T2643">
    </text:span><text:span text:style-name="T2644">HTTPS</text:span></text:p>
  </text:list-item>
  <text:list-item>
    <text:p text:style-name="P798"><text:span text:style-name="T2645">CDN</text:span><text:span text:style-name="T2646">
    </text:span><text:span text:style-name="T2647">Dynamic</text:span><text:span text:style-name="T2648">
    </text:span><text:span text:style-name="T2649">Resources</text:span><text:span text:style-name="T2650">
    </text:span><text:span text:style-name="T2651">Enabled</text:span></text:p>
  </text:list-item>
</text:list>
<text:p text:style-name="First_20_paragraph"><draw:frame draw:name="img67"><draw:image xlink:href="../../images/cdn-control-panel.png" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" /></draw:frame></text:p>
<text:p text:style-name="Text_20_body">These properties are exactly the
same as the ones you can specify in your
<text:span text:style-name="T2652">portal-ext.properties</text:span>.
Make sure to visit the CDN section of the Properties Document referenced
previously if you don't know how to fill in the CDN fields. Once you're
finished, click <text:span text:style-name="T2653">Save</text:span> and
your old host is replaced with your new CDN host for static
content.</text:p>
<text:p text:style-name="Text_20_body">As you can see, configuring a CDN
is extremely easy, and can drastically reduce latency time and improve
your portal's performance.</text:p>
<text:h text:style-name="Heading_20_1" text:outline-level="1">Summary
<text:a xlink:type="simple" xlink:href="id=summary-17" office:name=""><text:span text:style-name="Definition"></text:span></text:a></text:h>
<text:p text:style-name="First_20_paragraph">We've seen how good a fit
Liferay Portal is for the enterprise. It can be scaled linearly to grow
to whatever size you need to serve your users. Liferay Cloud Services
lets you manage and monitor your Liferay instances from a single
interface. Clustering is also a snap, and Liferay harmonizes very well
with whatever environment you may have.</text:p>
<text:p text:style-name="Text_20_body">Liferay Portal is also built for
performance. You can take advantage of read-writer database
configurations, as well as database sharding. You can tune it to support
over 3300 concurrent users on a single server with mean login times
under half a second and maximum throughput of more than 79 logins per
second. We've seen some tips for tuning Liferay Portal, and we have to
keep in mind the adage about tuning: load test and profile, tune,
repeat.</text:p>
<text:p text:style-name="Text_20_body">Configuring a Content Delivery
Network is also advantageous when you want to increase your portal's
performance. By accessing static resources from a local server, latency
time and your application server's load are drastically
reduced.</text:p>
<text:p text:style-name="Text_20_body">In all, Liferay Portal gives you
all the options you need to build a high-performance, robust environment
that supports your enterprise.</text:p>
