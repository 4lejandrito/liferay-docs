# Creating Liferay Themes [](id=creating-liferay-them-7)

Do you want to completely transform the look and feel of your Liferay Portal?
Create your own Liferay Theme! Themes are hot deployable plugins unique to a
site served by the portal. With themes, you can alter the user interface so
completely that it's difficult or impossible to tell that the site is running on
Liferay. 

Liferay provides a well organized, modular structure to its themes, allowing
you, the theme developer, to quickly modify everything from the border around a
portlet window to every object on the page. But you don't have to customize
every aspect of the theme. Your theme can inherit the styling, images, and
templates from any of the built in themes, overriding them only where necessary.
Inheritance keeps your themes smaller and less cluttered, leaving out data that
already exists in the default theme (e.g., emoticons graphics for the message
boards portlet). 

## Introduction

In this chapter we'll learn about:

- **Creating a Theme** 

- **Anatomy of a Theme**

- **Thumbnails**

- **Javascript**

- **Settings**

- **Color Schemes**

- **Portal Predefined Settings** 

- **Theme Inheritance**

Liferay's themes are designed to be very easy to create. Start by making changes
in CSS files and as your customization requirements grow, change the HTML that
controls the page design. 

Some of the technologies you may need to know to make the best use of themes
include:

- **CSS:** You can create a whole new theme just by modifying a CSS file. 

- **Velocity:** You can create templates using this simple, yet powerful, tool.
Us it to customize the HTML generated by the theme. 

- **JavaScript:** You can add special behaviors using JavaScript. 

- **XML:** You can modify the XML of a theme's configuration file to specify
some settings of the theme. 

To follow the examples in this guide you also need some familiarity using either
the command line or the Liferay IDE, where you can use its menus instead of the
commands used in the text. 

## Creating a Theme 

The process for creating a new theme is nearly identical to the one for making a
portlet. Since our theme will be named *Deep Blue*, our project name (without
spaces) is *deep-blue*. Our display name (which can have spaces) is just *Deep
Blue*. Let's create the theme using two methods, Liferay Developer Studio and
the terminal. 

***Using Developer Studio:*** 

1. Go to File &rarr; New &rarr; Liferay Project. 

2. Next, go through the following steps to setup your new theme:

    2.1. Fill in *deep-blue* for the Project name and *Deep Blue* for the
    Display name. 

    2.2. Select the Liferay Plugins SDK and Portal Runtime you've configured. 

    2.3. Select *Theme* for your Plugin type. 

    2.4. Click *Finish*. 

![Figure 4.1: Creating your theme plugin](../../images/05-themes-1.png)

When creating a new plugin in Developer Studio, we can either create a
completely new plugin or add a new plugin to an existing plugin project. 

***Using the terminal:*** Navigate to the `themes` directory in the Plugins SDK
and enter the appropriate command for your operating system:

1. In Linux and Mac OS X, enter

    ./create.sh deep-blue "Deep Blue"

2. In Windows, enter

    create.bat deep-blue "Deep Blue"

Now you have a blank theme in your `themes` folder, which the Plugins SDK
automatically named according to your specified project name, with "-theme"
appended to it. At first, your theme will be empty. But later, when you run `ant
deploy`, all the files and folders of the theme will be populated. 

### Setting a base Theme [](id=lp-6-1-dgen04-setting-a-base-theme-0)

All themes in Liferay are built on top of the *_unstyled* and *_styled* themes,
which contain very limited styling. By default, your newly created themes are
built with only these as a base. However, you can set an *existing* theme as
your base theme, to gain the additional styling from that theme, as well as the
elements for *_styled* and *_unstyled*. 

When a theme is built, the base themes are added in layers - first *_unstyled*
is added, giving you the core of the theme, then *_styled*, providing the most
basic elements. If you use a different base theme, it's added on top of
*_styled*, overriding the default styling wherever applicable. After the base
themes are added, your own custom styling is added on top. 

If you want to use a different base theme than the default, you can edit the
`build.xml` file, changing *_styled* in `<property name="theme.parent"
value="_styled>` to the name of an available theme that you wish to use. 

### Deploying the Theme [](id=lp-6-1-dgen04-deploying-the-theme-0)

If you're already familiar with portlet deployment from reading Chapter 3,
you'll find theme deployment to be a piece of cake. Like portlets, themes are
deployed in Developer Studio or the terminal. 

***Deploying in Developer Studio:*** Click and drag your theme project onto your
server. 

![Figure 4.2: Drag and drop your theme onto the server](../../images/05-themes-6.png)

Upon deploying, your server will output messages indicating your plugin is read,
registered, and available for use. 

	Reading plugin package for deep-blue-theme
	Registering themes for deep-blue-theme
	1 theme for deep-blue-theme is available for use

***Deploying in the terminal:*** Open a terminal window in your
`themes/deep-blue-theme` directory and enter this command:

    ant deploy

A BUILD SUCCESSFUL message indicates that your theme is now being deployed. If
you switch to the terminal window running Liferay, and wait for a few seconds,
you should see the message *1 theme for deep-blue-theme is available for use*. 

To apply your theme to a page, go to your web browser and login to the portal.
Hover over **Manage** at the top of the page, and click on *Page*. Directly
underneath the words **Manage Pages** select the *Look and Feel* tab. Simply
click on your theme to activate it. 

## Anatomy of a Theme [](id=anatomy-of-a-the-4)

Custom themes are based on differences from one of several built-in Liferay
themes. 

The structure of a theme is designed to separate different types of resources
into easily accessible folders. Here's the full structure of our Deep Blue
theme:

-	`deep-blue-theme/`

	-	`docroot/`
	
		-	`WEB-INF/`
		
			-	`liferay-plugin-package.properties`
			
		-	`_diffs/` - subfolders not created by default.
		
			-	`css/`
			
			-	`images/`
			
			-	`js/`
			
			-	`templates/`
		
		-	`css/`
			-	`application.css`
			
			-	`base.css`
			
			-	`custom.css`
			
			-	`dockbar.css`
			
			-	`extras.css`
			
			-	`forms.css`
			
			-	`layout.css`
			
			-	`main.css`
			
			-	`navigation.css`
			
			-	`portlet.css`
		
		-	`images/`
		
			-	(many directories)
		
		-	`js/`
			
			-	`main.js`
		
		-	`templates/`
			
			-	`init_custom.vm`
			
			-	`navigation.vm`
			
			-	`portal_normal.vm`
			
			-	`portal_pop_up.vm`
			
			-	`portlet.vm`

Let's talk about the `_diffs` folder that's created inside the `docroot`
directory of your theme; this is where you place your theme's code. Remember,
only customize the parts of your theme that will differ from the parent theme.
To do this, you mirror the directory structure of the parent theme inside of the
`_diffs` folder, placing only the folders and files you need to customize there. 

There are several other folders inside `docroot`; these were copied over from
the parent theme in your Liferay bundle when you deployed your theme. You should
use these files as the basis for your modifications. For example, to customize
the navigation, copy `navigation.vm` from
`deep-blue-theme/docroot/templates/navigation.vm` into
`deep-blue-theme/docroot/_diffs/templates` folder (you may have to create this
folder first). You can then open this file and customize it to your liking. 

For custom styles, create a folder named `css` inside your `_diffs` folder and
place a single file there called `custom.css`. This is where to put all of your
new styles and overrides of the parent theme's styles. Because `custom.css` is
loaded last, styles in this file override any styles in the parent theme. 

It's best practice to make all your custom theme styles using only the
`custom.css` file, not overriding any of the templates unless absolutely
necessary. This makes future upgrades much easier, because you won't have to
manually modify your templates to add support for new Liferay features. 

Whenever you make modifications to your theme in Developer Studio, redeploy it
by right clicking your theme located underneath your server, and selecting
*Redeploy* from the menu. 

![Figure 4.3: How to redeploy your theme plugin](../../images/05-themes-2.png)

Alternatively, redeploy your theme by opening a terminal in
`themes/deep-blue-theme` and enter this command:

	ant deploy 

Wait a few seconds until the theme deploys, then refresh your browser to see
your changes. 

---

 ![tip](../../images/tip-pen-paper.png)**Tip:** To see changes more quickly,
 modify your theme directly in your Liferay bundle. In our example, `custom.css`
 is located in
 `liferay-portal-[version]/tomcat-[tomcat-version]/webapps/deep-blue-theme/css`.
 However, for modifications made here to appear in your browser as soon as you
 refresh the page, you must enable Liferay Developer Mode. See the Liferay wiki
 for more information. 

---

Make sure you copy any changes you make back into your *_diffs* folder, or
they'll be overwritten when you redeploy your theme. 

## Thumbnails [](id=thumbnai-4)

In the *Look and Feel* settings, the *Classic* theme has a
thumbnail preview of what it looks like, but our theme has only a broken
image. Let's fix this:

1. Take a screenshot of your theme and save it in `_diffs/images` with the name
`thumbnail.png`. It must be precisely 150 pixels wide by 120 pixels
high. 

2. Save another version, this time precisely 1080 pixels wide by 864 pixels
high. Save in the `_diffs/images` directory with the name `screenshot.png`. 

After redeploying your theme, it's thumbnail preview will be shown in the *Look
and Feel* settings just like the *Classic* theme. 

## JavaScript [](id=javascri-5)

Liferay has its own JavaScript library called Alloy, an extension to Yahoo's
YUI3 framework. You can take advantage of the full power of either of these
frameworks in your themes. Inside your theme's `main.js` file, you will find
definitions for three JavaScript callbacks:

- **AUI().ready(fn):** This callback is executed as soon as the HTML in the page
has finished loading (minus any portlets loaded via AJAX). 

- **Liferay.Portlet.ready(fn):** Executed after each portlet on the page has
loaded. The callback receives two parameters: `portletId` and `node`.
`portletId` is the ID of the portlet that was just loaded. `node` is the Alloy
Node object of the same portlet. 

- **Liferay.on('allPortletsReady', fn):** Executed after everything else --
including AJAX portlets -- has finished loading. 

![Figure 4.4: Content of main.js](../../images/05-themes-4.png)

## Settings [](id=settin-4)

Each theme can define settings to make it configurable. A file named
`liferay-look-and-feel.xml` defines these files, and is located inside the
`WEB-INF` directory. This file doesn't exist by default; you should create it
now with the following content:

    <?xml version="1.0"?>
    <!DOCTYPE look-and-feel PUBLIC "-//Liferay//DTD Look and Feel 6.1.0//EN"
    "http://www.liferay.com/dtd/liferay-look-and-feel_6_1_0.dtd">

    <look-and-feel>
		<compatibility>
			<version>6.1.10+</version>
		</compatibility>
		<theme id="deep-blue" name="Deep Blue">
			<settings>
				<setting key="my-setting" value="my-value" />
			</settings>
		</theme>
    </look-and-feel>

You can define additional settings by adding more `<setting>` elements. These
settings can be accessed in the theme templates using the following code:

    $theme.getSetting("my-setting")

For an example, let's say we need to create two themes that are exactly the same
except for some changes in the header. One of the themes has more details while
the other is smaller (and takes less screen real estate). Instead of creating
two different themes, let's create one and use a setting to choose which header
we want displayed. 

In the `portal_normal.vm` template we could write:

    #if ($theme.getSetting("header-type") == "detailed")
		#parse ("$full_templates_path/header_detailed.vm")
    #else
		#parse ("$full_templates_path/header_brief.vm")
    #end

Then when we write the `liferay-look-and-feel.xml`, we write two different
entries that refer to the same theme but have a different value for the
header-type setting:

    <theme id="deep-blue" name="Deep Blue">
		<settings>
			<setting key="header-type" value="detailed" />
		</settings>
		</theme>
			<theme id="deep-blue-mini" name="Deep Blue Mini">
		<settings>
			<setting key="header-type" value="brief" />
		</settings>
    </theme>

You can also make your settings configurable from within Liferay portal. If you
want to provide options to turn certain theme features on or off, or allow a
user to provide input to a theme setting, you can use *configurable* settings. 

As an example, here's how you'd create an option to display a slogan next to
your company's name in the footer of your site's pages:

1. Insert logic into your `portal_normal.vm` template to display a slogan along
with your company's name (e.g. Nosester) in the footer of your site pages:

        <footer id="footer" role="contentinfo">
            <p>
                #if($theme.getSetting("display-slogan-footer") == true)
                    Nosester $theme.getSetting("slogan")
                #else
                    Nosester
                #end
            </p>
        </footer>

A note about a few of the theme setting variables appearing in the above logic:

- **display-slogan-footer:** holds a boolean value indicating whether to display
the version of the footer that contains your slogan. 

- **slogan:** holds your slogan text. 

2. Next, declare the two theme setting variables in your
`liferay-look-and-feel.xml`, found in your theme's `WEB-INF` folder:

        <settings>
        		<setting configurable="true" key="slogan" type="textarea" value=""></setting>
        		<setting configurable="true" key="display-slogan-footer" type="checkbox" value="true"></setting>
        </settings>

The portal administrator can input a slogan and activate it for the portal via
the *Look and Feel* section of the *Manage Site Pages* panel (see the *Creating
sites and managing pages* section of [Using Liferay
Portal](http://www.liferay.com/documentation/liferay-portal/6.1/user-guide/-/ai/managing-pages-in-liferay-port-1)). 

![Figure 4.5: Setting the footer display slogan in the *Look and Feel* of  the site's page settings.](../../images/themes-custom-configurable-setting.png)

Then, when the portal administrator saves these settings, the site's pages
display the new footer containing the slogan. 

![Figure 4.6: The slogan displayed in the page footer.](../../images/themes-custom-configurable-setting-displayed.png)


 ![note](../../images/tip-pen-paper.png)**Note:** A language properties hook
 should be used to properly display configurable theme settings, such as the
 slogan text area and footer checkbox from the previous example. For details, 
 see the [Overriding a *Language.properties* File](https://www.liferay.com/documentation/liferay-portal/6.1/development/-/ai/overriding-a-%3Cem%3Elanguage-properties-lt-em-gt-fi-1)
 section found in the *Hooks* chapter of this guide. 

Next, let's manage the color schemes in your theme. 

## Color Schemes [](id=color-schem-4)

Color schemes are specified using a CSS class name, which also lets you choose
different background images, different border colors, and more. 

Here's how you can define your color schemes in `liferay-look-and-feel.xml`:

    <theme id="deep-blue" name="Deep Blue">
		<settings>
			<setting key="my-setting" value="my-value" />
		</settings>
		<color-scheme id="01" name="Day">
			<css-class>day</css-class>
			<color-scheme-images-path>${images-path}/color_schemes/${css-class}</color-scheme-images-path>
		</color-scheme>
		<color-scheme id="02" name="Night">
			<css-class>night</css-class>
		</color-scheme>
    </theme>

In your `_diffs/css` folder, create a folder called `color_schemes`, and place a
`.css` file in it for each of your color schemes. In the case above, we can
either have one file, called `night.css` and let the default styling handle the
first color scheme, or you can have both `day.css` and `night.css` to specify
the schemes. 

Let's follow the second route (creating both scheme's folders in our
`color_schemes` folder). Place the following lines at the bottom of your
`custom.css` file:

    @import url(color_schemes/day.css);
    @import url(color_schemes/night.css);

The color scheme CSS class is placed on the `<body>` element, so you can use it
to identify you styling. In `day.css` you would prefix all of your CSS styles
like this:

    body.day { background-color: #ddf; }
    .day a { color: #66a; }

And in `night.css` you would prefix all of your CSS styles like this:

    body.night { background-color: #447; color: #777; }
    .night a { color: #bbd; }

You can also create separate thumbnail images for each of your color schemes.
The `<color-scheme-images-path>` element tells Liferay where to look for these
images (you only have to place this element in one of the color schemes for it
to affect both). For our example, create the folders
`_diffs/images/color_schemes/day` and `_diffs/images/color_schemes/night`. In
each of these folders place a `thumbnail.png` and `screenshot.png` file,
following the size specifications defined in the Thumbanils seciton above. 

## Portal Predefined Settings [](id=portal-predefined-settin-4)

The portal defines some settings that allow the theme to determine certain
behaviors. As of this writing, there are only two predefined settings, for
portlet borders and bullet styles, but this number may grow in the future. You
can modify these settings from the `liferay-look-and-feel.xml` file. 

By default, the portlet shows portlet borders. If set to `false`, the portal's
default behavior is to turn off portlet borders. 

Here's how the XML looksd when you modify the default to `false`:

    <settings>
		<setting key="portlet-setup-show-borders-default" value="false" />
    </settings>

This default behavior can be overridden for individual portlets using:

* `liferay-portlet.xml`

* Portlet CSS popup setting

This setting is used by the *Navigation* portlet to determine the CSS class name
of the list of pages. The value must be a comma separated list of valid bullet
styles to be used. 

Example:

    <settings>
		<setting key="bullet-style-options" value="classic,modern,tablemenu" />
    </settings>

The bullet style can be changed by the user in the *Navigation* portlet
configuration. The chosen style will be applied as a CSS class on the `<div>`
containing the navigation. This class will be named in the following pattern:

    .nav-menu-style-{BULLET_STYLE_OPTION} {
		... CSS selectors ...
    }

Here is an example of the HTML code that you would need to add style through CSS
code. In this case the bullet style option is **modern**:

    <div class="nav-menu nav-menu-style-modern">
		<ul class="breadcrumbs lfr-component">
			...
		</ul>
    </div>

Using CSS, and maybe some unobtrusive Javascript, it's possible to implement any
type of menu. 

## Theme inheritance [](id=theme-inheritan-4)

By default, themes are based on the *_styled* theme, which provides only basic
styling of portlets. If you open the `build.xml` file in your theme's directory
using the Build Application Configuration Editor, you see the following:

![Figure 4.7: Content of build.xml](../../images/05-themes-5.png)

The `theme.parent` property determines which built-in theme your theme will
inherit from. In addition to the *_styled* theme, you may also choose to inherit
from the *_unstyled* theme, which contains no styling whatsoever. This makes
more work for you, but you get full flexibility to design your own CSS files
from scratch. 

You can also use the default Liferay theme, called **classic**, as the parent of
your themes. Using this approach allows you to start with a look and feel that
already works and gets nice results quickly. The drawback is that since there is
so much already done for you, there won't be as much flexibility to build the
desired design. It's a compromise between creating a theme as quickly as
possible versus having full control of the result. It's your choice.

## Importing resources with your themes [](id=6-1-importing-resources-with-themes)

A theme without content is like an empty house. If you're trying to sell an
empty house, it may be difficult for prospective buyers to see its full beauty.
However, staging the house with some furniture and decorations helps prospective
buyers imagine what the house might look like with their belongings. Liferay's
resources importer application is a tool that allows a theme developer to have
files and web content automatically imported into the portal when a theme is
deployed. Usually, the resources are imported into a site template but they can
also be imported directly into a site. Portal administrators can use the site or
site template created by the resources importer to showcase the theme. This is a
great way for theme developers to provide a sample context that optimizes the
design of their theme. In fact, all standalone themes that are uploaded to
Liferay Marketplace must use the resources importer. This ensures a uniform
experience for Marketplace users: a user can download a theme from Marketplace,
install it on their portal, go to Sites or Site Templates in the Control Panel
and immediately see their new theme in action. In this section, we discuss how
to include resources with your theme.

Liferay's welcome theme includes resources that the resources importer
automatically deploys to the default site. (Note: The welcome theme was
introduced in Liferay 6.1 is only applied out-of-the-box in Liferay CE.) The
welcome theme and the pages and content that it imports to the default site
provide a good example of the resources importer's functionality.

![Figure 4.9: The welcome theme uses the resources importer to import pages and
content to the default site of a fresh Liferay
installation.](../../images/welcome-theme.png)

If it's not already installed, you can download the resources importer
application from Liferay Marketplace. Search for either *Resources Importer CE*
or *Resources Importer EE*, depending on your Liferay Portal platform, and
download the latest version. Install and deploy the resources importer to your
Liferay instance the same way you would deploy any other Liferay plugin or
Marketplace app.

---

 ![tip](../../images/tip-pen-paper.png)**Tip:** If you deploy a theme to your
 Liferay Portal instance and don't have the resources importer already deployed,
 you might see a message like this:
 
	19:21:12,224 INFO  [pool-2-thread-2][HotDeployImpl:233] Queueing test-theme
	for deploy because it is missing resources-importer-web

 Such a message appears if the resources importer is declared as a dependency in
 your theme's `liferay-plugin-package.properties` file but is not deployed. You
 can deploy the resources importer application to satisfy the dependency or you
 can remove or comment out the dependency declaration if you're not going to use
 the resources importer with your theme (see below).

---

When you create a new theme project using the Liferay Plugins SDK, check your
theme's `docroot/WEB-INF/liferay-plugin-package.properties` file for two entries
related the resources importer. One or both of these might be commented out or
missing, depending on the version of your Plugins SDK:

	required-deployment-contexts=\
	    resources-importer-web
	
	resources-importer-developer-mode-enabled=true

The first entry, `required-deployment-contexts=resources-importer-web`, declares
your theme's dependency on the resources importer plugin. If you're not going to
use the resources importer with your theme and don't want to deploy the
resources importer, you can remove or comment out this entry. The second entry,
`resources-importer-developer-mode-enabled=true`, is a convenience feature for
theme developers. With this setting enabled, if the resources are to be imported
to a site template that already exists, the site template is recreated and
reapplied to sites using the site template. Otherwise, you have to manually
delete the sites built using the resource importer's site template each time you
change anything in your theme's `docroot/WEB-INF/src/resources-importer` folder.

If you'd like to import your theme's resources directly into a site, instead of
into a site template, you can specify the following in your
`liferay-plugin-package.properties` file:

	resources-importer-target-class-name=com.liferay.portal.model.Group

	resources-importer-target-value=<site-name>

---

 ![tip](../../images/tip-pen-paper.png)**Warning:** If you're developing themes
 for Liferay Marketplace, don't configure your theme to import resources
 directly into a site. Instead, use the default: import the resources into a
 site template. Do this by commenting out the
 `resources-importer-target-class-name` property. This way, it'll be much safer
 to deploy your theme to a production Liferay instance.

---

All of the resources a theme uses with the resources importer go in the
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder. The assets to be
imported by your theme should be placed in the following directory structure:

- `<theme-name>/docroot/WEB-INF/src/resources-importer/`
    - `sitemap.json` - defines the pages, layout templates, and portlets
    - `assets.json` - (optional) specifies details on the assets
    - `document_library/`
        - `documents/` - contains documents and media files
    - `journal/`
        - `articles/` - contains web content (HTML) and folders grouping web
        content articles (XML) by template. Each folder name must match the file
        name of the corresponding template. For example, create folder `Template
        1/` to hold an article based on template file `Template 1.vm`.
        - `structures/` - contains structures (XML) and folders of child
        structures. Each folder name must match the file name of the
        corresponding parent structure. For example, create folder `Structure
        1/` to hold a child of structure file `Structure 1.xml`.
        - `templates/` - groups templates (VM or FTL) into folders by structure.
        Each folder name must match the file name of the corresponding
        structure. For example, create folder `Structure 1/` to hold a template
        for structure file `Structure 1.xml`.

When you create a new theme using the Liferay Plugins SDK
(liferay-plugins-sdk-6.1.1-ce-ga2-20121004092655026 or later), this folder
structure is created automatically. Also, a default `sitemap.json` file is
created and a default
`liferay-plugin-package.properties` file is created in the `WEB-INF` folder.

You have two options for specifying resources to be imported with your theme.
The recommended approach is to add resource files to the folders outlined above
and to specify the contents of the site or site template in a `sitemap.json`
file (described below). Alternatively, you can use an `archive.lar` file to
package the resources you'd like your theme to deploy. To create such an
`archive.lar`, just export the contents of a site from Liferay Portal using the
site scope. Then place the `archive.lar` file in your theme's
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder. If you choose to
use an archive file to package all of your resources, you won't need a
`sitemap.json` file or any other files in your
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder. Note, however, a
LAR file is version-specific; it won't work on any version of Liferay other than
the one from which it was exported. For this reason, using a `sitemap.json` file
to specify resources is the most flexible approach. If you're developing themes
for Liferay Marketplace, you should use the `sitemap.json` to specify resources
to be imported with your theme.

The `sitemap.json` in the `<theme-name>/docroot/WEB-INF/src/resources-importer`
folder specifies the site pages, layout templates, web content, assets, and
portlet configurations provided with the theme. This file describes the contents
and hierarchy of the site for Liferay to import as a site or site template. Even
if you're not familiar with JSON, the `sitemap.json` file is easy to understand.
Let's examine a sample `sitemap.json` file:

	{
		"layouts": [
			{
				"columns": [
					[
						{
							"portletId": "58"
						},
						{
							"portletId": "71"
						},
						{
							"portletId": "56",
							"portletPreferences": {
								"articleId": "Without Border.html",
								"groupId": "${groupId}",
								"portletSetupShowBorders": "false"
							}
						},
						{
							"portletId": "56",
							"portletPreferences": {
								"articleId": "Custom Title.html",
								"groupId": "${groupId}",
								"portletSetupShowBorders": "true",
								"portletSetupTitle_en_US": "Web Content Display with Custom Title",
								"portletSetupUseCustomTitle": "true"
							}
						}
					],
					[
						{
							"portletId": "47"
						},
						{
							"portletId": "71_INSTANCE_${groupId}",
							"portletPreferences": {
								"displayStyle": "[custom]",
								"headerType": "root-layout",
								"includedLayouts": "all",
								"nestedChildren": "1",
								"rootLayoutLevel": "3",
								"rootLayoutType": "relative"
							}
						},
						"Web Content with Image.html",
						{
							"portletId": "118",
							"portletPreferences": {
								"columns": [
									[
										{
											"portletId": "56",
											"portletPreferences": {
												"articleId": "Child Web Content 1.xml",
												"groupId": "${groupId}",
												"portletSetupShowBorders": "true",
												"portletSetupTitle_en_US": "Web Content Display with Child Structure 1",
												"portletSetupUseCustomTitle": "true"
											}
										}
									],
									[
										{
											"portletId": "56",
											"portletPreferences": {
												"articleId": "Child Web Content 2.xml",
												"groupId": "${groupId}",
												"portletSetupShowBorders": "true",
												"portletSetupTitle_en_US": "Web Content Display with Child Structure 2",
												"portletSetupUseCustomTitle": "true"
											}
										}
									]
								],
								"layoutTemplateId": "2_columns_i"
							}
						}
					]
				],
				"friendlyURL": "/home",
				"name": "Welcome",
				"title": "Welcome"
			},
			{
				"columns": [
					[
						{
							"portletId": "58"
						}
					],
					[
						{
							"portletId": "47"
						}
					]
				],
				"friendlyURL": "/parent-page",
				"layouts": [
					{
						"friendlyURL": "/child-page-1",
						"name": "Child Page 1",
						"title": "Child Page 1"
					},
					{
						"friendlyURL": "/child-page-2",
						"name": "Child Page 2",
						"title": "Child Page 2"
					}
				],
				"name": "Parent Page",
				"title": "Parent Page"
			},
			{
				"friendlyURL": "/hidden-page",
				"name": "Hidden Page",
				"title": "Hidden Page",
				"hidden": "true"
			}
		],
		"layoutTemplateId": "2_columns_ii"
	}

The first thing you should declare in your `sitemap.json` file is a layout
template ID so the target site or site template can reference the layout
template to use for its pages. (In the above example, this declaration is
actually at the end of the file.) You can also specify different layout
templates to use for individual pages. You can find layout templates in your
Liferay installation's `/layouttpl` folder. Next, you have to declare the
layouts, or pages, that your site template should use. Note that pages are
called *layouts* in Liferay's code. You can specify a name, title, and friendly
URL for a page, and you can set a page to be hidden. To declare that web content
should be displayed on a page, simply specify an HTML file. You can declare
portlets by specifying their portlet IDs which can be found in Liferay's
`WEB-INF/portlet-custom.xml` file. You can also specify portlet preferences for
each portlet.

Optionally, you can create an `assets.json` file in your
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder. While the
`sitemap.json` file defines the pages of the site or site template to be
imported, along with the layout templates, portlets, and portlet preferences of
these pages, the `assets.json` file specifies details about the assets to be
imported. Tags can be applied to any asset. Abstract summaries and small images
can be applied to web content articles. For example, the following `assets.json`
file specifies two tags for the `company_logo.png` image, one tag for the
`Custom Title.html` web content article, and an abstract summary and small image
for the `Child Web Content 1.xml` article structure:

	{
		"assets": [
			{
				"name": "company_logo.png",
				"tags": [
					"logo",
					"company"
				]
			},
			{
				"name": "Custom Title.html",
				"tags": [
					"web content"
				]
			},
			{
				"abstractSummary": "This is an abstract summary.",
				"name": "Child Web Content 1.xml",
				"smallImage": "company_logo.png"
			}
		]
	}

Now that you've learned about the directory structure for your resources, the
`sitemap.json` file for referencing your resources, and the `assets.json` file
for describing the assets of your resources, it's time to put resources into
your theme. You can create resources from scratch and/or bring in resources that
you've already created in Liferay. Let's go over how to leverage your HTML
(basic web content), XML (structures), or VM or FTL (templates) files from
Liferay:

- **web content (basic):** Edit the the article, click *Source*, and copy its
contents into an HTML file in the `resources-importer/journal/articles/` folder.

- **web content (based on structure and template):** Edit the article, click
*Download* to download it as a file `article.xml`. Create a folder for the
template under `resources-importer/journal/articles/`, rename the downloaded
`article.xml` file as desired, and copy it into the folder for the template. The
web content article's XML fills in the data required by the structure.

- **structure:** Edit the structure by clicking the *Launch Editor* button, and
copy and paste its contents into a new XML file for the structure in the
`resources-importer/journal/structures/` folder. The structure XML sets a
wireframe, or blueprint, for an article's data.

- **template:** Edit the template by clicking the *Launch Editor* button, and
copy and paste its contents into a new XML file for the template in the
`resources-importer/journal/templates/` folder. The template defines how the
data should be displayed.

Here is an outline of steps you can use in developing your theme and its
resources:

1. Create your theme.

2. Add your resources under the 
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder and its subfolders.

3. Create a `sitemap.json` file in your `resources-importer/` folder. In this
file, define the pages of the site or site template to be imported, along with
the layout templates, portlets, and portlet preferences of these pages.

4. Create an `assets.json` file in your `resources-importer/` folder.  In this
file, specify details of your resources assets.

5. In your `liferay-plugin-package.properties` file, include
`resources-importer-web` in your `required-deployment-contexts` property's list
and set `resources-importer-developer-mode-enabled=true`. For the
`resources-importer-target-value` property, specify the name of the site or site
template into which you are importing or comment it out to use the theme's name.
For the `resources-importer-target-class-name` property, comment it out to
import to a site template or set it to `com.liferay.portal.model.Group` to
import directly into a site.

6. Deploy your plugin into your Liferay instance.

7. View your theme, and its resources, from within Liferay. Log in to your
portal as an administrator and check the Sites or Site Templates section of the
Control Panel to make sure that your resources were deployed correctly. From the
Control Panel you can easily view your theme and its resources:

    - If you imported into a site template, select its *Actions* &rarr; *View
    Pages* to see it.

    - If you imported directly into a site, select its
    *Actions* &rarr; *Go to Public Pages* to see it.
    
You can go back to any of the beginning steps in this outline to make
refinements. It's just that easy to develop a theme with resources intact!

To see a simple working example of the resources importer in action, visit
[https://github.com/liferay/liferay-docs/tree/master/devGuide/code/test-resources-importer-theme-6.1.1.1.war](https://github.com/liferay/liferay-docs/tree/master/devGuide/code/test-resources-importer-theme-6.1.1.1.war).
This is just the classic Liferay theme with some sample resources added. If
you're interested in extending the functionality of the resources-importer
application, you can use the test-resources-importer-portlet to check that you
aren't breaking existing functionality. The test-resources-importer-portlet is
available on Github here:
[https://github.com/liferay/liferay-plugins/tree/master/portlets/test-resources-importer-portlet](https://github.com/liferay/liferay-plugins/tree/master/portlets/test-resources-importer-portlet).
The sample resources included in the test-resources-importer-theme are the same
ones included in the test-resources-importer-portlet. If you'd like to examine
another example, check out the code for Liferay's welcome theme:
[https://github.com/liferay/liferay-plugins/tree/master/themes/welcome-theme](https://github.com/liferay/liferay-plugins/tree/master/themes/welcome-theme).
Note that this theme imports resources directly into the default site.
Typically, this won't be something you'll need to do; instead, you'll usually
have your theme's resources imported into a site template. For further examples,
please examine the Zoe themes which you can find on Github here
[https://github.com/liferay/liferay-plugins/tree/master/themes](https://github.com/liferay/liferay-plugins/tree/master/themes)
and which you can download from Liferay Marketplace.
